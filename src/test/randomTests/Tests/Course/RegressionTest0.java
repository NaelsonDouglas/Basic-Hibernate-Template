
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class6 = course4.pickClass((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.util.ArrayList<personal.Student> arraylist_student5 = course4.getStudents();
    personal.Student student6 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b7 = course4.enroll(student6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student5);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class19 = course4.pickClass((int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    personal.Student student12 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = course4.enroll(student12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class8 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array9 = new administrative.Class[] {  };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class8, class_array9);
    administrative.Course course11 = new administrative.Course("hi!", arraylist_class8);
    java.util.ArrayList<administrative.Class> arraylist_class12 = course11.getClasses();
    course4.setClasses(arraylist_class12);
    java.util.ArrayList<personal.Student> arraylist_student14 = course4.getStudents();
    personal.Student student15 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = course4.enroll(student15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student14);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    boolean b11 = course4.listClasses();
    personal.Student student12 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = course4.enroll(student12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    personal.Student student8 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b9 = course4.enroll(student8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    java.lang.String str10 = course4.toString();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class12 = course4.pickClass(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class6 = course4.pickClass(100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    boolean b11 = course4.listClasses();
    administrative.Secretary secretary12 = course4.getSecretary();
    personal.Student student13 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = course4.enroll(student13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary12);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class8 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array9 = new administrative.Class[] {  };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class8, class_array9);
    administrative.Course course11 = new administrative.Course("hi!", arraylist_class8);
    java.util.ArrayList<administrative.Class> arraylist_class12 = course11.getClasses();
    course4.setClasses(arraylist_class12);
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class15 = course4.pickClass((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    personal.Student student6 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b7 = course4.enroll(student6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    administrative.Secretary secretary16 = null;
    course15.setSecretary(secretary16);
    java.lang.String str18 = course15.reportIn();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class20 = course15.pickClass((int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class8 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array9 = new administrative.Class[] {  };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class8, class_array9);
    administrative.Course course11 = new administrative.Course("hi!", arraylist_class8);
    java.util.ArrayList<administrative.Class> arraylist_class12 = course11.getClasses();
    course4.setClasses(arraylist_class12);
    personal.Student student14 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = course4.enroll(student14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    java.lang.String str10 = course4.getName();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class12 = course4.pickClass(10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    personal.Student student7 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = course4.enroll(student7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    java.util.ArrayList<personal.Student> arraylist_student20 = course19.getStudents();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class22 = course19.pickClass(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student20);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    boolean b11 = course4.listClasses();
    administrative.Secretary secretary12 = course4.getSecretary();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class14 = course4.pickClass((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary12);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    course4.setName("");
    personal.Student student13 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = course4.enroll(student13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student12 = course4.getStudents();
    course4.setName("");
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class16 = course4.pickClass((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.util.ArrayList<personal.Student> arraylist_student5 = course4.getStudents();
    administrative.Secretary secretary6 = course4.getSecretary();
    course4.setName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.lang.String str11 = course4.getName();
    personal.Student student12 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = course4.enroll(student12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    administrative.Secretary secretary7 = course4.getSecretary();
    personal.Student student8 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b9 = course4.enroll(student8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    administrative.Secretary secretary18 = null;
    course4.setSecretary(secretary18);
    course4.setName("hi!");
    java.util.ArrayList<personal.Student> arraylist_student22 = course4.getStudents();
    java.lang.String str23 = course4.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    administrative.Secretary secretary16 = null;
    course15.setSecretary(secretary16);
    java.lang.String str18 = course15.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class20 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array21 = new administrative.Class[] {  };
    boolean b22 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class20, class_array21);
    administrative.Course course23 = new administrative.Course("hi!", arraylist_class20);
    boolean b24 = course23.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class25 = course23.getClasses();
    course15.setClasses(arraylist_class25);
    java.lang.String str27 = course15.toString();
    boolean b28 = course15.listClasses();
    course15.setName("");
    personal.Student student31 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b32 = course15.enroll(student31);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    boolean b11 = course4.listClasses();
    administrative.Secretary secretary12 = course4.getSecretary();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class14 = course4.pickClass((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary12);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = null;
    course6.setSecretary(secretary8);
    course6.setName("");
    boolean b12 = course6.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = course6.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class15 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array16 = new administrative.Class[] {  };
    boolean b17 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class15, class_array16);
    administrative.Course course18 = new administrative.Course("hi!", arraylist_class15);
    course6.setClasses(arraylist_class15);
    administrative.Course course20 = new administrative.Course("", arraylist_class15);
    java.util.ArrayList<personal.Student> arraylist_student21 = course20.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class23 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array24 = new administrative.Class[] {  };
    boolean b25 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class23, class_array24);
    administrative.Course course26 = new administrative.Course("hi!", arraylist_class23);
    java.lang.String str27 = course26.toString();
    administrative.Secretary secretary28 = null;
    course26.setSecretary(secretary28);
    course26.setName("");
    boolean b32 = course26.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class33 = course26.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student34 = course26.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class35 = course26.getClasses();
    course20.setClasses(arraylist_class35);
    administrative.Course course37 = new administrative.Course("hi!", arraylist_class35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class35);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.util.ArrayList<administrative.Class> arraylist_class5 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class6 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class8 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array9 = new administrative.Class[] {  };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class8, class_array9);
    administrative.Course course11 = new administrative.Course("hi!", arraylist_class8);
    java.lang.String str12 = course11.toString();
    administrative.Secretary secretary13 = course11.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class15 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array16 = new administrative.Class[] {  };
    boolean b17 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class15, class_array16);
    administrative.Course course18 = new administrative.Course("hi!", arraylist_class15);
    java.util.ArrayList<administrative.Class> arraylist_class19 = course18.getClasses();
    course11.setClasses(arraylist_class19);
    java.util.ArrayList<personal.Student> arraylist_student21 = course11.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class22 = course11.getClasses();
    course4.setClasses(arraylist_class22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class22);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class8 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array9 = new administrative.Class[] {  };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class8, class_array9);
    administrative.Course course11 = new administrative.Course("hi!", arraylist_class8);
    java.util.ArrayList<administrative.Class> arraylist_class12 = course11.getClasses();
    course4.setClasses(arraylist_class12);
    java.util.ArrayList<personal.Student> arraylist_student14 = course4.getStudents();
    course4.setName("");
    personal.Student student17 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b18 = course4.enroll(student17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student14);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    administrative.Secretary secretary12 = course4.getSecretary();
    java.lang.String str13 = course4.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    course4.setName("");
    administrative.Secretary secretary13 = null;
    course4.setSecretary(secretary13);
    java.util.ArrayList<administrative.Class> arraylist_class15 = course4.getClasses();
    course4.setName("");
    personal.Student student18 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b19 = course4.enroll(student18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class15);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    java.lang.String str10 = course4.getName();
    personal.Student student11 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b12 = course4.enroll(student11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    boolean b11 = course4.listClasses();
    administrative.Secretary secretary12 = course4.getSecretary();
    course4.setName("hi!");
    java.lang.String str15 = course4.toString();
    course4.setName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    boolean b7 = course4.listClasses();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class9 = course4.pickClass((int)(byte)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array8 = new administrative.Class[] {  };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class7, class_array8);
    administrative.Course course10 = new administrative.Course("hi!", arraylist_class7);
    course4.setClasses(arraylist_class7);
    java.lang.String str12 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class13 = course4.getClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    administrative.Secretary secretary16 = null;
    course15.setSecretary(secretary16);
    java.lang.String str18 = course15.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class20 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array21 = new administrative.Class[] {  };
    boolean b22 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class20, class_array21);
    administrative.Course course23 = new administrative.Course("hi!", arraylist_class20);
    boolean b24 = course23.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class25 = course23.getClasses();
    course15.setClasses(arraylist_class25);
    personal.Student student27 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b28 = course15.enroll(student27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class25);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    java.lang.String str10 = course4.getName();
    boolean b11 = course4.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = course6.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.util.ArrayList<administrative.Class> arraylist_class14 = course13.getClasses();
    course6.setClasses(arraylist_class14);
    administrative.Course course16 = new administrative.Course("", arraylist_class14);
    administrative.Secretary secretary17 = null;
    course16.setSecretary(secretary17);
    java.util.ArrayList<administrative.Class> arraylist_class21 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array22 = new administrative.Class[] {  };
    boolean b23 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class21, class_array22);
    administrative.Course course24 = new administrative.Course("hi!", arraylist_class21);
    java.lang.String str25 = course24.toString();
    administrative.Secretary secretary26 = course24.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class28 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array29 = new administrative.Class[] {  };
    boolean b30 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class28, class_array29);
    administrative.Course course31 = new administrative.Course("hi!", arraylist_class28);
    java.util.ArrayList<administrative.Class> arraylist_class32 = course31.getClasses();
    course24.setClasses(arraylist_class32);
    administrative.Course course34 = new administrative.Course("", arraylist_class32);
    course16.setClasses(arraylist_class32);
    administrative.Course course36 = new administrative.Course("hi!", arraylist_class32);
    java.util.ArrayList<administrative.Class> arraylist_class37 = course36.getClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class37);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    course4.setName("");
    administrative.Secretary secretary13 = null;
    course4.setSecretary(secretary13);
    java.lang.String str15 = course4.reportIn();
    administrative.Secretary secretary16 = null;
    course4.setSecretary(secretary16);
    java.util.ArrayList<personal.Student> arraylist_student18 = course4.getStudents();
    administrative.Secretary secretary19 = null;
    course4.setSecretary(secretary19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student18);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    administrative.Course course13 = new administrative.Course("", arraylist_class12);
    personal.Student student14 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = course13.enroll(student14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = null;
    course6.setSecretary(secretary8);
    course6.setName("");
    boolean b12 = course6.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = course6.getClasses();
    administrative.Course course14 = new administrative.Course("", arraylist_class13);
    administrative.Course course15 = new administrative.Course("hi!", arraylist_class13);
    boolean b16 = course15.listClasses();
    java.util.ArrayList<personal.Student> arraylist_student17 = course15.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student17);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course4.getClasses();
    personal.Student student20 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b21 = course4.enroll(student20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    administrative.Secretary secretary16 = null;
    course15.setSecretary(secretary16);
    personal.Student student18 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b19 = course15.enroll(student18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    course4.setName("");
    administrative.Secretary secretary13 = null;
    course4.setSecretary(secretary13);
    java.util.ArrayList<administrative.Class> arraylist_class15 = course4.getClasses();
    administrative.Secretary secretary16 = null;
    course4.setSecretary(secretary16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class15);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    administrative.Secretary secretary7 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class8 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student9 = course4.getStudents();
    administrative.Secretary secretary10 = null;
    course4.setSecretary(secretary10);
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class13 = course4.pickClass((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student9);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    course4.setName("");
    boolean b9 = course4.listClasses();
    boolean b10 = course4.listClasses();
    personal.Student student11 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b12 = course4.enroll(student11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    boolean b11 = course4.listClasses();
    administrative.Secretary secretary12 = course4.getSecretary();
    administrative.Secretary secretary13 = course4.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary13);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    java.lang.String str20 = course19.reportIn();
    java.lang.String str21 = course19.getName();
    personal.Student student22 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b23 = course19.enroll(student22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.util.ArrayList<personal.Student> arraylist_student5 = course4.getStudents();
    java.lang.String str6 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student8 = course4.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array8 = new administrative.Class[] {  };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class7, class_array8);
    administrative.Course course10 = new administrative.Course("hi!", arraylist_class7);
    course4.setClasses(arraylist_class7);
    administrative.Secretary secretary12 = null;
    course4.setSecretary(secretary12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    java.lang.String str19 = course4.getName();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class21 = course4.pickClass((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.lang.String str13 = course12.toString();
    administrative.Secretary secretary14 = null;
    course12.setSecretary(secretary14);
    course12.setName("");
    boolean b18 = course12.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course12.getClasses();
    course4.setClasses(arraylist_class19);
    java.util.ArrayList<personal.Student> arraylist_student21 = course4.getStudents();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class23 = course4.pickClass(1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student21);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    java.lang.String str19 = course4.toString();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class21 = course4.pickClass((int)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    administrative.Secretary secretary16 = null;
    course15.setSecretary(secretary16);
    java.lang.String str18 = course15.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class20 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array21 = new administrative.Class[] {  };
    boolean b22 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class20, class_array21);
    administrative.Course course23 = new administrative.Course("hi!", arraylist_class20);
    boolean b24 = course23.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class25 = course23.getClasses();
    course15.setClasses(arraylist_class25);
    java.lang.String str27 = course15.toString();
    boolean b28 = course15.listClasses();
    boolean b29 = course15.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course4.getClasses();
    administrative.Secretary secretary20 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class21 = course4.getClasses();
    java.lang.String str22 = course4.toString();
    java.lang.String str23 = course4.toString();
    administrative.Secretary secretary24 = course4.getSecretary();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class26 = course4.pickClass(10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary24);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    administrative.Course course13 = new administrative.Course("", arraylist_class12);
    course13.setName("");
    java.lang.String str16 = course13.toString();
    java.lang.String str17 = course13.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    personal.Student student6 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b7 = course4.enroll(student6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    administrative.Secretary secretary7 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class8 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class9 = course4.getClasses();
    administrative.Secretary secretary10 = course4.getSecretary();
    java.lang.String str11 = course4.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student12 = course4.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class13 = course4.getClasses();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class15 = course4.pickClass((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = null;
    course6.setSecretary(secretary8);
    course6.setName("");
    boolean b12 = course6.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = course6.getClasses();
    administrative.Course course14 = new administrative.Course("", arraylist_class13);
    administrative.Course course15 = new administrative.Course("hi!", arraylist_class13);
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class17 = course15.pickClass((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course4.getClasses();
    java.lang.String str20 = course4.toString();
    java.lang.String str21 = course4.getName();
    administrative.Secretary secretary22 = course4.getSecretary();
    personal.Student student23 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b24 = course4.enroll(student23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary22);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    boolean b6 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class7 = course5.getClasses();
    administrative.Course course8 = new administrative.Course("", arraylist_class7);
    java.lang.String str9 = course8.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    administrative.Secretary secretary20 = course19.getSecretary();
    administrative.Secretary secretary21 = null;
    course19.setSecretary(secretary21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.util.ArrayList<administrative.Class> arraylist_class6 = course5.getClasses();
    administrative.Course course7 = new administrative.Course("", arraylist_class6);
    java.lang.String str8 = course7.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    administrative.Secretary secretary16 = null;
    course15.setSecretary(secretary16);
    java.lang.String str18 = course15.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class20 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array21 = new administrative.Class[] {  };
    boolean b22 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class20, class_array21);
    administrative.Course course23 = new administrative.Course("hi!", arraylist_class20);
    boolean b24 = course23.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class25 = course23.getClasses();
    course15.setClasses(arraylist_class25);
    java.lang.String str27 = course15.toString();
    boolean b28 = course15.listClasses();
    course15.setName("");
    boolean b31 = course15.listClasses();
    boolean b32 = course15.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class6 = course4.getClasses();
    personal.Student student7 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = course4.enroll(student7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class6);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    administrative.Secretary secretary18 = null;
    course4.setSecretary(secretary18);
    course4.setName("hi!");
    java.util.ArrayList<personal.Student> arraylist_student22 = course4.getStudents();
    java.lang.String str23 = course4.getName();
    administrative.Secretary secretary24 = course4.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "hi!"+ "'", str23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary24);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    administrative.Secretary secretary11 = course4.getSecretary();
    java.lang.String str12 = course4.getName();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class14 = course4.pickClass((int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    administrative.Secretary secretary20 = course19.getSecretary();
    course19.setName("");
    java.util.ArrayList<personal.Student> arraylist_student23 = course19.getStudents();
    java.lang.String str24 = course19.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    administrative.Secretary secretary16 = null;
    course15.setSecretary(secretary16);
    java.lang.String str18 = course15.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class20 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array21 = new administrative.Class[] {  };
    boolean b22 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class20, class_array21);
    administrative.Course course23 = new administrative.Course("hi!", arraylist_class20);
    boolean b24 = course23.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class25 = course23.getClasses();
    course15.setClasses(arraylist_class25);
    java.lang.String str27 = course15.toString();
    boolean b28 = course15.listClasses();
    java.lang.String str29 = course15.getName();
    boolean b30 = course15.listClasses();
    personal.Student student31 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b32 = course15.enroll(student31);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course4.getClasses();
    java.lang.String str20 = course4.toString();
    administrative.Secretary secretary21 = course4.getSecretary();
    personal.Student student22 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b23 = course4.enroll(student22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary21);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    course4.setName("");
    boolean b9 = course4.listClasses();
    boolean b10 = course4.listClasses();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class12 = course4.pickClass((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    administrative.Secretary secretary19 = null;
    course4.setSecretary(secretary19);
    personal.Student student21 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b22 = course4.enroll(student21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    administrative.Secretary secretary11 = course4.getSecretary();
    java.lang.String str12 = course4.getName();
    java.util.ArrayList<personal.Student> arraylist_student13 = course4.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    administrative.Secretary secretary20 = course19.getSecretary();
    course19.setName("");
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class24 = course19.pickClass((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    java.lang.String str7 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.lang.String str13 = course12.toString();
    administrative.Secretary secretary14 = null;
    course12.setSecretary(secretary14);
    course12.setName("");
    boolean b18 = course12.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course12.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class21 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array22 = new administrative.Class[] {  };
    boolean b23 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class21, class_array22);
    administrative.Course course24 = new administrative.Course("hi!", arraylist_class21);
    course12.setClasses(arraylist_class21);
    java.lang.String str26 = course12.toString();
    java.util.ArrayList<administrative.Class> arraylist_class27 = course12.getClasses();
    course4.setClasses(arraylist_class27);
    java.lang.String str29 = course4.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    java.util.ArrayList<personal.Student> arraylist_student20 = course19.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class22 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array23 = new administrative.Class[] {  };
    boolean b24 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class22, class_array23);
    administrative.Course course25 = new administrative.Course("hi!", arraylist_class22);
    java.lang.String str26 = course25.toString();
    administrative.Secretary secretary27 = null;
    course25.setSecretary(secretary27);
    course25.setName("");
    boolean b31 = course25.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class32 = course25.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student33 = course25.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class34 = course25.getClasses();
    course19.setClasses(arraylist_class34);
    personal.Student student36 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b37 = course19.enroll(student36);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class34);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    administrative.Secretary secretary18 = null;
    course4.setSecretary(secretary18);
    java.lang.String str20 = course4.reportIn();
    administrative.Secretary secretary21 = null;
    course4.setSecretary(secretary21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    java.lang.String str19 = course4.getName();
    personal.Student student20 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b21 = course4.enroll(student20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = null;
    course6.setSecretary(secretary8);
    course6.setName("");
    boolean b12 = course6.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = course6.getClasses();
    administrative.Course course14 = new administrative.Course("", arraylist_class13);
    administrative.Course course15 = new administrative.Course("hi!", arraylist_class13);
    boolean b16 = course15.listClasses();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class18 = course15.pickClass((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    course4.setName("");
    boolean b9 = course4.listClasses();
    boolean b10 = course4.listClasses();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class12 = course4.pickClass((int)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    administrative.Secretary secretary20 = course19.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class21 = course19.getClasses();
    course19.setName("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class21);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    boolean b5 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class6 = course4.getClasses();
    administrative.Secretary secretary7 = null;
    course4.setSecretary(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class6);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    java.lang.String str7 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.lang.String str13 = course12.toString();
    administrative.Secretary secretary14 = null;
    course12.setSecretary(secretary14);
    course12.setName("");
    boolean b18 = course12.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course12.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class21 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array22 = new administrative.Class[] {  };
    boolean b23 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class21, class_array22);
    administrative.Course course24 = new administrative.Course("hi!", arraylist_class21);
    course12.setClasses(arraylist_class21);
    java.lang.String str26 = course12.toString();
    java.util.ArrayList<administrative.Class> arraylist_class27 = course12.getClasses();
    course4.setClasses(arraylist_class27);
    java.util.ArrayList<administrative.Class> arraylist_class30 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array31 = new administrative.Class[] {  };
    boolean b32 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class30, class_array31);
    administrative.Course course33 = new administrative.Course("hi!", arraylist_class30);
    java.lang.String str34 = course33.toString();
    administrative.Secretary secretary35 = null;
    course33.setSecretary(secretary35);
    course33.setName("");
    boolean b39 = course33.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class40 = course33.getClasses();
    course4.setClasses(arraylist_class40);
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class43 = course4.pickClass((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class40);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    personal.Student student11 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b12 = course4.enroll(student11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    course4.setName("");
    administrative.Secretary secretary13 = null;
    course4.setSecretary(secretary13);
    java.util.ArrayList<administrative.Class> arraylist_class15 = course4.getClasses();
    course4.setName("");
    java.lang.String str18 = course4.getName();
    java.lang.String str19 = course4.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    administrative.Secretary secretary18 = null;
    course4.setSecretary(secretary18);
    java.lang.String str20 = course4.getName();
    java.util.ArrayList<personal.Student> arraylist_student21 = course4.getStudents();
    java.lang.String str22 = course4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }


    java.util.ArrayList<administrative.Class> arraylist_class4 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array5 = new administrative.Class[] {  };
    boolean b6 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class4, class_array5);
    administrative.Course course7 = new administrative.Course("hi!", arraylist_class4);
    java.lang.String str8 = course7.toString();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    course7.setClasses(arraylist_class9);
    administrative.Course course13 = new administrative.Course("", arraylist_class9);
    administrative.Course course14 = new administrative.Course("hi!", arraylist_class9);
    administrative.Course course15 = new administrative.Course("hi!", arraylist_class9);
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class17 = course15.pickClass((int)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student12 = course4.getStudents();
    course4.setName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = null;
    course6.setSecretary(secretary8);
    course6.setName("");
    boolean b12 = course6.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = course6.getClasses();
    administrative.Course course14 = new administrative.Course("", arraylist_class13);
    java.util.ArrayList<administrative.Class> arraylist_class17 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array18 = new administrative.Class[] {  };
    boolean b19 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class17, class_array18);
    administrative.Course course20 = new administrative.Course("hi!", arraylist_class17);
    java.lang.String str21 = course20.toString();
    administrative.Secretary secretary22 = null;
    course20.setSecretary(secretary22);
    course20.setName("");
    boolean b26 = course20.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class27 = course20.getClasses();
    administrative.Course course28 = new administrative.Course("", arraylist_class27);
    course14.setClasses(arraylist_class27);
    administrative.Course course30 = new administrative.Course("hi!", arraylist_class27);
    java.util.ArrayList<personal.Student> arraylist_student31 = course30.getStudents();
    java.lang.String str32 = course30.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "hi!"+ "'", str32.equals("hi!"));

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course4.getClasses();
    java.lang.String str20 = course4.toString();
    java.lang.String str21 = course4.getName();
    java.util.ArrayList<personal.Student> arraylist_student22 = course4.getStudents();
    administrative.Secretary secretary23 = course4.getSecretary();
    administrative.Secretary secretary24 = course4.getSecretary();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class26 = course4.pickClass((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary24);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class8 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array9 = new administrative.Class[] {  };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class8, class_array9);
    administrative.Course course11 = new administrative.Course("hi!", arraylist_class8);
    java.util.ArrayList<administrative.Class> arraylist_class12 = course11.getClasses();
    course4.setClasses(arraylist_class12);
    java.util.ArrayList<personal.Student> arraylist_student14 = course4.getStudents();
    course4.setName("");
    course4.setName("");
    java.util.ArrayList<personal.Student> arraylist_student19 = course4.getStudents();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class21 = course4.pickClass((int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student19);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    boolean b11 = course4.listClasses();
    boolean b12 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    java.lang.String str18 = course17.reportIn();
    boolean b19 = course17.listClasses();
    administrative.Secretary secretary20 = course17.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class21 = course17.getClasses();
    course4.setClasses(arraylist_class21);
    administrative.Secretary secretary23 = null;
    course4.setSecretary(secretary23);
    administrative.Secretary secretary25 = null;
    course4.setSecretary(secretary25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class21);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    administrative.Course course13 = new administrative.Course("", arraylist_class12);
    java.lang.String str14 = course13.getName();
    java.util.ArrayList<administrative.Class> arraylist_class16 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array17 = new administrative.Class[] {  };
    boolean b18 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class16, class_array17);
    administrative.Course course19 = new administrative.Course("hi!", arraylist_class16);
    java.lang.String str20 = course19.toString();
    administrative.Secretary secretary21 = null;
    course19.setSecretary(secretary21);
    course19.setName("");
    boolean b25 = course19.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class26 = course19.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class28 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array29 = new administrative.Class[] {  };
    boolean b30 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class28, class_array29);
    administrative.Course course31 = new administrative.Course("hi!", arraylist_class28);
    course19.setClasses(arraylist_class28);
    administrative.Secretary secretary33 = null;
    course19.setSecretary(secretary33);
    java.lang.String str35 = course19.getName();
    java.util.ArrayList<personal.Student> arraylist_student36 = course19.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class37 = course19.getClasses();
    course13.setClasses(arraylist_class37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class37);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    course15.setName("hi!");
    boolean b18 = course15.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class22 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array23 = new administrative.Class[] {  };
    boolean b24 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class22, class_array23);
    administrative.Course course25 = new administrative.Course("hi!", arraylist_class22);
    java.lang.String str26 = course25.toString();
    administrative.Secretary secretary27 = null;
    course25.setSecretary(secretary27);
    java.util.ArrayList<administrative.Class> arraylist_class30 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array31 = new administrative.Class[] {  };
    boolean b32 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class30, class_array31);
    administrative.Course course33 = new administrative.Course("hi!", arraylist_class30);
    java.lang.String str34 = course33.toString();
    administrative.Secretary secretary35 = null;
    course33.setSecretary(secretary35);
    course33.setName("");
    boolean b39 = course33.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class40 = course33.getClasses();
    course25.setClasses(arraylist_class40);
    administrative.Course course42 = new administrative.Course("", arraylist_class40);
    administrative.Course course43 = new administrative.Course("hi!", arraylist_class40);
    course15.setClasses(arraylist_class40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class40);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    administrative.Secretary secretary20 = course19.getSecretary();
    personal.Student student21 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b22 = course19.enroll(student21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    boolean b11 = course4.listClasses();
    boolean b12 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    java.lang.String str18 = course17.reportIn();
    boolean b19 = course17.listClasses();
    administrative.Secretary secretary20 = course17.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class21 = course17.getClasses();
    course4.setClasses(arraylist_class21);
    administrative.Secretary secretary23 = null;
    course4.setSecretary(secretary23);
    java.util.ArrayList<personal.Student> arraylist_student25 = course4.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student25);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    administrative.Secretary secretary12 = course4.getSecretary();
    java.util.ArrayList<personal.Student> arraylist_student13 = course4.getStudents();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class15 = course4.pickClass((int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class6 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array7 = new administrative.Class[] {  };
    boolean b8 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class6, class_array7);
    course4.setClasses(arraylist_class6);
    administrative.Secretary secretary10 = null;
    course4.setSecretary(secretary10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    administrative.Course course13 = new administrative.Course("", arraylist_class12);
    java.util.ArrayList<administrative.Class> arraylist_class16 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array17 = new administrative.Class[] {  };
    boolean b18 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class16, class_array17);
    administrative.Course course19 = new administrative.Course("hi!", arraylist_class16);
    java.lang.String str20 = course19.toString();
    administrative.Secretary secretary21 = null;
    course19.setSecretary(secretary21);
    course19.setName("");
    boolean b25 = course19.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class26 = course19.getClasses();
    administrative.Course course27 = new administrative.Course("", arraylist_class26);
    course13.setClasses(arraylist_class26);
    java.lang.String str29 = course13.getName();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class31 = course13.pickClass(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course4.getClasses();
    java.lang.String str20 = course4.toString();
    java.lang.String str21 = course4.getName();
    java.util.ArrayList<personal.Student> arraylist_student22 = course4.getStudents();
    administrative.Secretary secretary23 = course4.getSecretary();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class25 = course4.pickClass((int)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary23);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    boolean b11 = course4.listClasses();
    administrative.Secretary secretary12 = course4.getSecretary();
    course4.setName("hi!");
    java.lang.String str15 = course4.toString();
    personal.Student student16 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = course4.enroll(student16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.lang.String str11 = course4.getName();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course4.getClasses();
    java.lang.String str13 = course4.getName();
    java.util.ArrayList<administrative.Class> arraylist_class15 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array16 = new administrative.Class[] {  };
    boolean b17 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class15, class_array16);
    administrative.Course course18 = new administrative.Course("hi!", arraylist_class15);
    java.lang.String str19 = course18.toString();
    administrative.Secretary secretary20 = null;
    course18.setSecretary(secretary20);
    java.util.ArrayList<administrative.Class> arraylist_class23 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array24 = new administrative.Class[] {  };
    boolean b25 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class23, class_array24);
    administrative.Course course26 = new administrative.Course("hi!", arraylist_class23);
    java.lang.String str27 = course26.toString();
    administrative.Secretary secretary28 = null;
    course26.setSecretary(secretary28);
    course26.setName("");
    boolean b32 = course26.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class33 = course26.getClasses();
    course18.setClasses(arraylist_class33);
    java.util.ArrayList<personal.Student> arraylist_student35 = course18.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class37 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array38 = new administrative.Class[] {  };
    boolean b39 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class37, class_array38);
    administrative.Course course40 = new administrative.Course("hi!", arraylist_class37);
    java.lang.String str41 = course40.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class42 = course40.getClasses();
    course18.setClasses(arraylist_class42);
    course4.setClasses(arraylist_class42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class42);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array8 = new administrative.Class[] {  };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class7, class_array8);
    administrative.Course course10 = new administrative.Course("hi!", arraylist_class7);
    course4.setClasses(arraylist_class7);
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class13 = course4.pickClass((int)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    course4.setName("");
    java.lang.String str9 = course4.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    java.util.ArrayList<administrative.Class> arraylist_class8 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array9 = new administrative.Class[] {  };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class8, class_array9);
    administrative.Course course11 = new administrative.Course("hi!", arraylist_class8);
    course5.setClasses(arraylist_class8);
    administrative.Course course13 = new administrative.Course("", arraylist_class8);
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class15 = course13.pickClass(10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    administrative.Secretary secretary19 = null;
    course4.setSecretary(secretary19);
    boolean b21 = course4.listClasses();
    personal.Student student22 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b23 = course4.enroll(student22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    course4.setName("");
    boolean b9 = course4.listClasses();
    boolean b10 = course4.listClasses();
    java.lang.String str11 = course4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    java.lang.String str7 = course4.toString();
    java.lang.String str8 = course4.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class9 = course4.getClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class9);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course4.getClasses();
    administrative.Secretary secretary20 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class21 = course4.getClasses();
    java.lang.String str22 = course4.toString();
    java.lang.String str23 = course4.toString();
    course4.setName("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    course4.setName("");
    administrative.Secretary secretary13 = null;
    course4.setSecretary(secretary13);
    java.lang.String str15 = course4.reportIn();
    administrative.Secretary secretary16 = null;
    course4.setSecretary(secretary16);
    java.util.ArrayList<personal.Student> arraylist_student18 = course4.getStudents();
    java.lang.String str19 = course4.toString();
    boolean b20 = course4.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    administrative.Secretary secretary16 = null;
    course15.setSecretary(secretary16);
    java.lang.String str18 = course15.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class20 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array21 = new administrative.Class[] {  };
    boolean b22 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class20, class_array21);
    administrative.Course course23 = new administrative.Course("hi!", arraylist_class20);
    boolean b24 = course23.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class25 = course23.getClasses();
    course15.setClasses(arraylist_class25);
    java.lang.String str27 = course15.toString();
    boolean b28 = course15.listClasses();
    java.lang.String str29 = course15.getName();
    boolean b30 = course15.listClasses();
    boolean b31 = course15.listClasses();
    java.lang.String str32 = course15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.reportIn();
    boolean b7 = course5.listClasses();
    java.lang.String str8 = course5.toString();
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.lang.String str14 = course13.toString();
    administrative.Secretary secretary15 = null;
    course13.setSecretary(secretary15);
    course13.setName("");
    boolean b19 = course13.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class20 = course13.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class22 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array23 = new administrative.Class[] {  };
    boolean b24 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class22, class_array23);
    administrative.Course course25 = new administrative.Course("hi!", arraylist_class22);
    course13.setClasses(arraylist_class22);
    java.lang.String str27 = course13.toString();
    java.util.ArrayList<administrative.Class> arraylist_class28 = course13.getClasses();
    course5.setClasses(arraylist_class28);
    administrative.Course course30 = new administrative.Course("hi!", arraylist_class28);
    java.lang.String str31 = course30.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.util.ArrayList<personal.Student> arraylist_student5 = course4.getStudents();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.lang.String str7 = course4.reportIn();
    course4.setName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array8 = new administrative.Class[] {  };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class7, class_array8);
    course5.setClasses(arraylist_class7);
    administrative.Course course11 = new administrative.Course("", arraylist_class7);
    java.lang.String str12 = course11.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class7 = course4.getClasses();
    java.lang.String str8 = course4.reportIn();
    administrative.Secretary secretary9 = course4.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary9);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    course4.setName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = null;
    course6.setSecretary(secretary8);
    course6.setName("");
    boolean b12 = course6.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = course6.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class15 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array16 = new administrative.Class[] {  };
    boolean b17 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class15, class_array16);
    administrative.Course course18 = new administrative.Course("hi!", arraylist_class15);
    course6.setClasses(arraylist_class15);
    administrative.Course course20 = new administrative.Course("", arraylist_class15);
    administrative.Secretary secretary21 = course20.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class22 = course20.getClasses();
    administrative.Course course23 = new administrative.Course("", arraylist_class22);
    java.util.ArrayList<administrative.Class> arraylist_class24 = course23.getClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class24);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = null;
    course6.setSecretary(secretary8);
    course6.setName("");
    boolean b12 = course6.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = course6.getClasses();
    administrative.Course course14 = new administrative.Course("", arraylist_class13);
    administrative.Course course15 = new administrative.Course("hi!", arraylist_class13);
    boolean b16 = course15.listClasses();
    administrative.Secretary secretary17 = course15.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary17);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = course6.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.util.ArrayList<administrative.Class> arraylist_class14 = course13.getClasses();
    course6.setClasses(arraylist_class14);
    administrative.Course course16 = new administrative.Course("", arraylist_class14);
    course16.setName("hi!");
    java.util.ArrayList<administrative.Class> arraylist_class19 = course16.getClasses();
    administrative.Course course20 = new administrative.Course("", arraylist_class19);
    administrative.Secretary secretary21 = null;
    course20.setSecretary(secretary21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.util.ArrayList<personal.Student> arraylist_student5 = course4.getStudents();
    java.lang.String str6 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = course4.getClasses();
    course4.setName("hi!");
    java.util.ArrayList<personal.Student> arraylist_student10 = course4.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student10);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class8 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array9 = new administrative.Class[] {  };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class8, class_array9);
    administrative.Course course11 = new administrative.Course("hi!", arraylist_class8);
    java.util.ArrayList<administrative.Class> arraylist_class12 = course11.getClasses();
    course4.setClasses(arraylist_class12);
    java.util.ArrayList<personal.Student> arraylist_student14 = course4.getStudents();
    course4.setName("");
    boolean b17 = course4.listClasses();
    java.util.ArrayList<personal.Student> arraylist_student18 = course4.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student18);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.reportIn();
    boolean b7 = course5.listClasses();
    administrative.Secretary secretary8 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class10 = course5.getClasses();
    administrative.Course course11 = new administrative.Course("", arraylist_class10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class10);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student12 = course4.getStudents();
    course4.setName("");
    administrative.Secretary secretary15 = course4.getSecretary();
    java.lang.String str16 = course4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    administrative.Secretary secretary20 = course19.getSecretary();
    course19.setName("");
    java.util.ArrayList<personal.Student> arraylist_student23 = course19.getStudents();
    administrative.Secretary secretary24 = course19.getSecretary();
    java.lang.String str25 = course19.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student12 = course4.getStudents();
    java.lang.String str13 = course4.getName();
    administrative.Secretary secretary14 = course4.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary14);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class8 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array9 = new administrative.Class[] {  };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class8, class_array9);
    administrative.Course course11 = new administrative.Course("hi!", arraylist_class8);
    java.util.ArrayList<administrative.Class> arraylist_class12 = course11.getClasses();
    course4.setClasses(arraylist_class12);
    java.util.ArrayList<personal.Student> arraylist_student14 = course4.getStudents();
    course4.setName("");
    course4.setName("");
    administrative.Secretary secretary19 = course4.getSecretary();
    java.util.ArrayList<personal.Student> arraylist_student20 = course4.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student20);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.lang.String str14 = course13.toString();
    administrative.Secretary secretary15 = null;
    course13.setSecretary(secretary15);
    course13.setName("");
    boolean b19 = course13.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class20 = course13.getClasses();
    course5.setClasses(arraylist_class20);
    administrative.Course course22 = new administrative.Course("", arraylist_class20);
    java.lang.String str23 = course22.getName();
    administrative.Secretary secretary24 = course22.getSecretary();
    boolean b25 = course22.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = null;
    course6.setSecretary(secretary8);
    course6.setName("");
    boolean b12 = course6.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = course6.getClasses();
    administrative.Course course14 = new administrative.Course("", arraylist_class13);
    java.util.ArrayList<administrative.Class> arraylist_class17 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array18 = new administrative.Class[] {  };
    boolean b19 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class17, class_array18);
    administrative.Course course20 = new administrative.Course("hi!", arraylist_class17);
    java.lang.String str21 = course20.toString();
    administrative.Secretary secretary22 = null;
    course20.setSecretary(secretary22);
    course20.setName("");
    boolean b26 = course20.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class27 = course20.getClasses();
    administrative.Course course28 = new administrative.Course("", arraylist_class27);
    course14.setClasses(arraylist_class27);
    administrative.Course course30 = new administrative.Course("hi!", arraylist_class27);
    java.util.ArrayList<administrative.Class> arraylist_class34 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array35 = new administrative.Class[] {  };
    boolean b36 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class34, class_array35);
    administrative.Course course37 = new administrative.Course("hi!", arraylist_class34);
    java.lang.String str38 = course37.toString();
    administrative.Secretary secretary39 = null;
    course37.setSecretary(secretary39);
    course37.setName("");
    boolean b43 = course37.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class44 = course37.getClasses();
    administrative.Course course45 = new administrative.Course("", arraylist_class44);
    java.util.ArrayList<administrative.Class> arraylist_class48 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array49 = new administrative.Class[] {  };
    boolean b50 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class48, class_array49);
    administrative.Course course51 = new administrative.Course("hi!", arraylist_class48);
    java.lang.String str52 = course51.toString();
    administrative.Secretary secretary53 = null;
    course51.setSecretary(secretary53);
    course51.setName("");
    boolean b57 = course51.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class58 = course51.getClasses();
    administrative.Course course59 = new administrative.Course("", arraylist_class58);
    course45.setClasses(arraylist_class58);
    administrative.Course course61 = new administrative.Course("hi!", arraylist_class58);
    course30.setClasses(arraylist_class58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + ""+ "'", str52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class58);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    administrative.Secretary secretary7 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class8 = course4.getClasses();
    administrative.Secretary secretary9 = null;
    course4.setSecretary(secretary9);
    java.util.ArrayList<personal.Student> arraylist_student11 = course4.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course4.getClasses();
    course4.setName("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    administrative.Secretary secretary8 = course4.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary8);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array8 = new administrative.Class[] {  };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class7, class_array8);
    course5.setClasses(arraylist_class7);
    administrative.Course course11 = new administrative.Course("", arraylist_class7);
    java.util.ArrayList<personal.Student> arraylist_student12 = course11.getStudents();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class14 = course11.pickClass(1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    boolean b11 = course4.listClasses();
    java.lang.String str12 = course4.toString();
    java.util.ArrayList<personal.Student> arraylist_student13 = course4.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    java.lang.String str20 = course19.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student21 = course19.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student21);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array8 = new administrative.Class[] {  };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class7, class_array8);
    administrative.Course course10 = new administrative.Course("hi!", arraylist_class7);
    course4.setClasses(arraylist_class7);
    java.lang.String str12 = course4.toString();
    java.lang.String str13 = course4.getName();
    administrative.Secretary secretary14 = null;
    course4.setSecretary(secretary14);
    personal.Student student16 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = course4.enroll(student16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "hi!"+ "'", str13.equals("hi!"));

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    administrative.Secretary secretary20 = course19.getSecretary();
    course19.setName("");
    java.util.ArrayList<personal.Student> arraylist_student23 = course19.getStudents();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class25 = course19.pickClass((int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student23);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    course4.setName("");
    administrative.Secretary secretary13 = null;
    course4.setSecretary(secretary13);
    java.lang.String str15 = course4.reportIn();
    administrative.Secretary secretary16 = null;
    course4.setSecretary(secretary16);
    administrative.Secretary secretary18 = null;
    course4.setSecretary(secretary18);
    java.lang.String str20 = course4.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class6 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array7 = new administrative.Class[] {  };
    boolean b8 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class6, class_array7);
    course4.setClasses(arraylist_class6);
    java.lang.String str10 = course4.getName();
    course4.setName("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!"+ "'", str10.equals("hi!"));

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    boolean b11 = course4.listClasses();
    java.lang.String str12 = course4.toString();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class14 = course4.pickClass((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    course4.setName("");
    administrative.Secretary secretary13 = null;
    course4.setSecretary(secretary13);
    java.lang.String str15 = course4.reportIn();
    administrative.Secretary secretary16 = null;
    course4.setSecretary(secretary16);
    administrative.Secretary secretary18 = null;
    course4.setSecretary(secretary18);
    personal.Student student20 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b21 = course4.enroll(student20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student12 = course4.getStudents();
    course4.setName("");
    java.lang.String str15 = course4.getName();
    administrative.Secretary secretary16 = course4.getSecretary();
    course4.setName("hi!");
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class20 = course4.pickClass((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary16);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = null;
    course6.setSecretary(secretary8);
    course6.setName("");
    boolean b12 = course6.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = course6.getClasses();
    administrative.Course course14 = new administrative.Course("", arraylist_class13);
    course14.setName("");
    administrative.Secretary secretary17 = null;
    course14.setSecretary(secretary17);
    java.util.ArrayList<administrative.Class> arraylist_class21 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array22 = new administrative.Class[] {  };
    boolean b23 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class21, class_array22);
    administrative.Course course24 = new administrative.Course("hi!", arraylist_class21);
    java.lang.String str25 = course24.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class26 = course24.getClasses();
    administrative.Course course27 = new administrative.Course("hi!", arraylist_class26);
    course14.setClasses(arraylist_class26);
    administrative.Course course29 = new administrative.Course("hi!", arraylist_class26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class26);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course4.getClasses();
    java.lang.String str20 = course4.toString();
    java.lang.String str21 = course4.getName();
    administrative.Secretary secretary22 = course4.getSecretary();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class24 = course4.pickClass((int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary22);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    administrative.Secretary secretary20 = course19.getSecretary();
    java.lang.String str21 = course19.getName();
    course19.setName("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }


    java.util.ArrayList<administrative.Class> arraylist_class5 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array6 = new administrative.Class[] {  };
    boolean b7 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class5, class_array6);
    administrative.Course course8 = new administrative.Course("hi!", arraylist_class5);
    java.lang.String str9 = course8.toString();
    administrative.Secretary secretary10 = null;
    course8.setSecretary(secretary10);
    course8.setName("");
    boolean b14 = course8.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class15 = course8.getClasses();
    administrative.Course course16 = new administrative.Course("", arraylist_class15);
    java.util.ArrayList<administrative.Class> arraylist_class19 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array20 = new administrative.Class[] {  };
    boolean b21 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class19, class_array20);
    administrative.Course course22 = new administrative.Course("hi!", arraylist_class19);
    java.lang.String str23 = course22.toString();
    administrative.Secretary secretary24 = null;
    course22.setSecretary(secretary24);
    course22.setName("");
    boolean b28 = course22.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class29 = course22.getClasses();
    administrative.Course course30 = new administrative.Course("", arraylist_class29);
    course16.setClasses(arraylist_class29);
    administrative.Course course32 = new administrative.Course("", arraylist_class29);
    administrative.Course course33 = new administrative.Course("", arraylist_class29);
    administrative.Course course34 = new administrative.Course("", arraylist_class29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class29);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class8 = course6.getClasses();
    administrative.Course course9 = new administrative.Course("hi!", arraylist_class8);
    administrative.Course course10 = new administrative.Course("hi!", arraylist_class8);
    boolean b11 = course10.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class6 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array7 = new administrative.Class[] {  };
    boolean b8 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class6, class_array7);
    course4.setClasses(arraylist_class6);
    java.lang.String str10 = course4.toString();
    administrative.Secretary secretary11 = course4.getSecretary();
    java.lang.String str12 = course4.getName();
    boolean b13 = course4.listClasses();
    administrative.Secretary secretary14 = null;
    course4.setSecretary(secretary14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "hi!"+ "'", str12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    java.lang.String str7 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.lang.String str13 = course12.toString();
    administrative.Secretary secretary14 = null;
    course12.setSecretary(secretary14);
    course12.setName("");
    boolean b18 = course12.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course12.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class21 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array22 = new administrative.Class[] {  };
    boolean b23 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class21, class_array22);
    administrative.Course course24 = new administrative.Course("hi!", arraylist_class21);
    course12.setClasses(arraylist_class21);
    java.lang.String str26 = course12.toString();
    java.util.ArrayList<administrative.Class> arraylist_class27 = course12.getClasses();
    course4.setClasses(arraylist_class27);
    java.util.ArrayList<administrative.Class> arraylist_class30 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array31 = new administrative.Class[] {  };
    boolean b32 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class30, class_array31);
    administrative.Course course33 = new administrative.Course("hi!", arraylist_class30);
    java.lang.String str34 = course33.toString();
    administrative.Secretary secretary35 = null;
    course33.setSecretary(secretary35);
    course33.setName("");
    boolean b39 = course33.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class40 = course33.getClasses();
    course4.setClasses(arraylist_class40);
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class43 = course4.pickClass((int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class40);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    java.lang.String str7 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.lang.String str13 = course12.toString();
    administrative.Secretary secretary14 = null;
    course12.setSecretary(secretary14);
    course12.setName("");
    boolean b18 = course12.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course12.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class21 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array22 = new administrative.Class[] {  };
    boolean b23 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class21, class_array22);
    administrative.Course course24 = new administrative.Course("hi!", arraylist_class21);
    course12.setClasses(arraylist_class21);
    java.lang.String str26 = course12.toString();
    java.util.ArrayList<administrative.Class> arraylist_class27 = course12.getClasses();
    course4.setClasses(arraylist_class27);
    java.util.ArrayList<personal.Student> arraylist_student29 = course4.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class34 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array35 = new administrative.Class[] {  };
    boolean b36 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class34, class_array35);
    administrative.Course course37 = new administrative.Course("hi!", arraylist_class34);
    java.lang.String str38 = course37.toString();
    administrative.Secretary secretary39 = null;
    course37.setSecretary(secretary39);
    course37.setName("");
    boolean b43 = course37.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class44 = course37.getClasses();
    administrative.Course course45 = new administrative.Course("", arraylist_class44);
    administrative.Course course46 = new administrative.Course("hi!", arraylist_class44);
    java.util.ArrayList<administrative.Class> arraylist_class47 = course46.getClasses();
    administrative.Course course48 = new administrative.Course("hi!", arraylist_class47);
    course4.setClasses(arraylist_class47);
    course4.setName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class47);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }


    java.util.ArrayList<administrative.Class> arraylist_class4 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array5 = new administrative.Class[] {  };
    boolean b6 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class4, class_array5);
    administrative.Course course7 = new administrative.Course("hi!", arraylist_class4);
    java.lang.String str8 = course7.toString();
    administrative.Secretary secretary9 = null;
    course7.setSecretary(secretary9);
    course7.setName("");
    boolean b13 = course7.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = course7.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class16 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array17 = new administrative.Class[] {  };
    boolean b18 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class16, class_array17);
    administrative.Course course19 = new administrative.Course("hi!", arraylist_class16);
    course7.setClasses(arraylist_class16);
    administrative.Course course21 = new administrative.Course("", arraylist_class16);
    administrative.Secretary secretary22 = course21.getSecretary();
    course21.setName("");
    java.util.ArrayList<personal.Student> arraylist_student25 = course21.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class28 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array29 = new administrative.Class[] {  };
    boolean b30 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class28, class_array29);
    administrative.Course course31 = new administrative.Course("hi!", arraylist_class28);
    java.lang.String str32 = course31.toString();
    administrative.Secretary secretary33 = null;
    course31.setSecretary(secretary33);
    course31.setName("");
    boolean b37 = course31.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class38 = course31.getClasses();
    administrative.Course course39 = new administrative.Course("", arraylist_class38);
    java.util.ArrayList<administrative.Class> arraylist_class42 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array43 = new administrative.Class[] {  };
    boolean b44 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class42, class_array43);
    administrative.Course course45 = new administrative.Course("hi!", arraylist_class42);
    java.lang.String str46 = course45.toString();
    administrative.Secretary secretary47 = null;
    course45.setSecretary(secretary47);
    course45.setName("");
    boolean b51 = course45.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class52 = course45.getClasses();
    administrative.Course course53 = new administrative.Course("", arraylist_class52);
    course39.setClasses(arraylist_class52);
    course21.setClasses(arraylist_class52);
    administrative.Course course56 = new administrative.Course("hi!", arraylist_class52);
    administrative.Course course57 = new administrative.Course("", arraylist_class52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + ""+ "'", str46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class52);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = course6.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.util.ArrayList<administrative.Class> arraylist_class14 = course13.getClasses();
    course6.setClasses(arraylist_class14);
    administrative.Course course16 = new administrative.Course("", arraylist_class14);
    administrative.Secretary secretary17 = null;
    course16.setSecretary(secretary17);
    java.lang.String str19 = course16.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class21 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array22 = new administrative.Class[] {  };
    boolean b23 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class21, class_array22);
    administrative.Course course24 = new administrative.Course("hi!", arraylist_class21);
    boolean b25 = course24.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class26 = course24.getClasses();
    course16.setClasses(arraylist_class26);
    administrative.Course course28 = new administrative.Course("", arraylist_class26);
    java.util.ArrayList<administrative.Class> arraylist_class32 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array33 = new administrative.Class[] {  };
    boolean b34 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class32, class_array33);
    administrative.Course course35 = new administrative.Course("hi!", arraylist_class32);
    java.lang.String str36 = course35.toString();
    administrative.Secretary secretary37 = course35.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class39 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array40 = new administrative.Class[] {  };
    boolean b41 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class39, class_array40);
    administrative.Course course42 = new administrative.Course("hi!", arraylist_class39);
    java.util.ArrayList<administrative.Class> arraylist_class43 = course42.getClasses();
    course35.setClasses(arraylist_class43);
    administrative.Course course45 = new administrative.Course("", arraylist_class43);
    administrative.Secretary secretary46 = null;
    course45.setSecretary(secretary46);
    java.util.ArrayList<administrative.Class> arraylist_class50 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array51 = new administrative.Class[] {  };
    boolean b52 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class50, class_array51);
    administrative.Course course53 = new administrative.Course("hi!", arraylist_class50);
    java.lang.String str54 = course53.toString();
    administrative.Secretary secretary55 = course53.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class57 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array58 = new administrative.Class[] {  };
    boolean b59 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class57, class_array58);
    administrative.Course course60 = new administrative.Course("hi!", arraylist_class57);
    java.util.ArrayList<administrative.Class> arraylist_class61 = course60.getClasses();
    course53.setClasses(arraylist_class61);
    administrative.Course course63 = new administrative.Course("", arraylist_class61);
    course45.setClasses(arraylist_class61);
    administrative.Course course65 = new administrative.Course("hi!", arraylist_class61);
    course28.setClasses(arraylist_class61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + ""+ "'", str54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class61);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    administrative.Secretary secretary20 = course19.getSecretary();
    course19.setName("");
    java.util.ArrayList<personal.Student> arraylist_student23 = course19.getStudents();
    administrative.Secretary secretary24 = course19.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class25 = course19.getClasses();
    administrative.Secretary secretary26 = course19.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary26);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.util.ArrayList<personal.Student> arraylist_student5 = course4.getStudents();
    boolean b6 = course4.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    boolean b7 = course6.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class8 = course6.getClasses();
    administrative.Course course9 = new administrative.Course("", arraylist_class8);
    administrative.Course course10 = new administrative.Course("", arraylist_class8);
    java.util.ArrayList<administrative.Class> arraylist_class11 = course10.getClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    course4.setName("");
    administrative.Secretary secretary13 = null;
    course4.setSecretary(secretary13);
    java.util.ArrayList<administrative.Class> arraylist_class15 = course4.getClasses();
    course4.setName("");
    java.lang.String str18 = course4.getName();
    personal.Student student19 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b20 = course4.enroll(student19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student12 = course4.getStudents();
    course4.setName("");
    java.lang.String str15 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class16 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student17 = course4.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student17);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    course4.setName("");
    administrative.Secretary secretary13 = null;
    course4.setSecretary(secretary13);
    java.lang.String str15 = course4.reportIn();
    administrative.Secretary secretary16 = null;
    course4.setSecretary(secretary16);
    java.util.ArrayList<personal.Student> arraylist_student18 = course4.getStudents();
    java.lang.String str19 = course4.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.lang.String str14 = course13.toString();
    administrative.Secretary secretary15 = null;
    course13.setSecretary(secretary15);
    course13.setName("");
    boolean b19 = course13.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class20 = course13.getClasses();
    course5.setClasses(arraylist_class20);
    java.util.ArrayList<personal.Student> arraylist_student22 = course5.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class24 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array25 = new administrative.Class[] {  };
    boolean b26 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class24, class_array25);
    administrative.Course course27 = new administrative.Course("hi!", arraylist_class24);
    java.lang.String str28 = course27.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class29 = course27.getClasses();
    course5.setClasses(arraylist_class29);
    java.util.ArrayList<administrative.Class> arraylist_class31 = course5.getClasses();
    administrative.Course course32 = new administrative.Course("", arraylist_class31);
    administrative.Secretary secretary33 = course32.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary33);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = course6.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.util.ArrayList<administrative.Class> arraylist_class14 = course13.getClasses();
    course6.setClasses(arraylist_class14);
    administrative.Course course16 = new administrative.Course("", arraylist_class14);
    administrative.Secretary secretary17 = null;
    course16.setSecretary(secretary17);
    java.util.ArrayList<administrative.Class> arraylist_class21 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array22 = new administrative.Class[] {  };
    boolean b23 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class21, class_array22);
    administrative.Course course24 = new administrative.Course("hi!", arraylist_class21);
    java.lang.String str25 = course24.toString();
    administrative.Secretary secretary26 = course24.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class28 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array29 = new administrative.Class[] {  };
    boolean b30 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class28, class_array29);
    administrative.Course course31 = new administrative.Course("hi!", arraylist_class28);
    java.util.ArrayList<administrative.Class> arraylist_class32 = course31.getClasses();
    course24.setClasses(arraylist_class32);
    administrative.Course course34 = new administrative.Course("", arraylist_class32);
    course16.setClasses(arraylist_class32);
    administrative.Course course36 = new administrative.Course("", arraylist_class32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class32);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course4.getClasses();
    java.lang.String str20 = course4.toString();
    java.lang.String str21 = course4.getName();
    administrative.Secretary secretary22 = course4.getSecretary();
    course4.setName("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary22);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class7 = course4.getClasses();
    java.lang.String str8 = course4.reportIn();
    boolean b9 = course4.listClasses();
    java.util.ArrayList<personal.Student> arraylist_student10 = course4.getStudents();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class12 = course4.pickClass((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student10);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    administrative.Secretary secretary16 = null;
    course15.setSecretary(secretary16);
    java.lang.String str18 = course15.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class20 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array21 = new administrative.Class[] {  };
    boolean b22 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class20, class_array21);
    administrative.Course course23 = new administrative.Course("hi!", arraylist_class20);
    boolean b24 = course23.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class25 = course23.getClasses();
    course15.setClasses(arraylist_class25);
    java.lang.String str27 = course15.toString();
    boolean b28 = course15.listClasses();
    course15.setName("");
    java.util.ArrayList<administrative.Class> arraylist_class31 = course15.getClasses();
    java.lang.String str32 = course15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    administrative.Secretary secretary18 = null;
    course4.setSecretary(secretary18);
    java.lang.String str20 = course4.getName();
    java.util.ArrayList<personal.Student> arraylist_student21 = course4.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class22 = course4.getClasses();
    personal.Student student23 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b24 = course4.enroll(student23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class22);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.lang.String str11 = course4.getName();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course4.getClasses();
    java.lang.String str13 = course4.getName();
    administrative.Secretary secretary14 = null;
    course4.setSecretary(secretary14);
    java.util.ArrayList<personal.Student> arraylist_student16 = course4.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student16);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class6 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array7 = new administrative.Class[] {  };
    boolean b8 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class6, class_array7);
    course4.setClasses(arraylist_class6);
    java.lang.String str10 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    java.lang.String str17 = course16.toString();
    administrative.Secretary secretary18 = null;
    course16.setSecretary(secretary18);
    course16.setName("");
    boolean b22 = course16.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class23 = course16.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student24 = course16.getStudents();
    course16.setName("");
    java.lang.String str27 = course16.toString();
    java.util.ArrayList<administrative.Class> arraylist_class28 = course16.getClasses();
    administrative.Course course29 = new administrative.Course("hi!", arraylist_class28);
    course4.setClasses(arraylist_class28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class28);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class6 = course4.getClasses();
    administrative.Secretary secretary7 = course4.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.util.ArrayList<administrative.Class> arraylist_class6 = course5.getClasses();
    administrative.Course course7 = new administrative.Course("", arraylist_class6);
    java.lang.String str8 = course7.toString();
    administrative.Secretary secretary9 = null;
    course7.setSecretary(secretary9);
    java.util.ArrayList<personal.Student> arraylist_student11 = course7.getStudents();
    java.lang.String str12 = course7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = null;
    course6.setSecretary(secretary8);
    course6.setName("");
    boolean b12 = course6.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = course6.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class15 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array16 = new administrative.Class[] {  };
    boolean b17 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class15, class_array16);
    administrative.Course course18 = new administrative.Course("hi!", arraylist_class15);
    course6.setClasses(arraylist_class15);
    administrative.Course course20 = new administrative.Course("", arraylist_class15);
    administrative.Secretary secretary21 = course20.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class22 = course20.getClasses();
    administrative.Course course23 = new administrative.Course("", arraylist_class22);
    java.util.ArrayList<personal.Student> arraylist_student24 = course23.getStudents();
    boolean b25 = course23.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class12 = course4.pickClass((int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    administrative.Secretary secretary18 = null;
    course4.setSecretary(secretary18);
    course4.setName("hi!");
    java.util.ArrayList<administrative.Class> arraylist_class25 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array26 = new administrative.Class[] {  };
    boolean b27 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class25, class_array26);
    administrative.Course course28 = new administrative.Course("hi!", arraylist_class25);
    java.lang.String str29 = course28.toString();
    administrative.Secretary secretary30 = null;
    course28.setSecretary(secretary30);
    course28.setName("");
    boolean b34 = course28.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class35 = course28.getClasses();
    administrative.Course course36 = new administrative.Course("", arraylist_class35);
    administrative.Course course37 = new administrative.Course("hi!", arraylist_class35);
    course4.setClasses(arraylist_class35);
    java.util.ArrayList<administrative.Class> arraylist_class40 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array41 = new administrative.Class[] {  };
    boolean b42 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class40, class_array41);
    administrative.Course course43 = new administrative.Course("hi!", arraylist_class40);
    java.lang.String str44 = course43.toString();
    administrative.Secretary secretary45 = null;
    course43.setSecretary(secretary45);
    course43.setName("");
    boolean b49 = course43.listClasses();
    course43.setName("");
    administrative.Secretary secretary52 = null;
    course43.setSecretary(secretary52);
    java.util.ArrayList<administrative.Class> arraylist_class54 = course43.getClasses();
    course4.setClasses(arraylist_class54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class54);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }


    java.util.ArrayList<administrative.Class> arraylist_class4 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array5 = new administrative.Class[] {  };
    boolean b6 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class4, class_array5);
    administrative.Course course7 = new administrative.Course("hi!", arraylist_class4);
    java.lang.String str8 = course7.toString();
    administrative.Secretary secretary9 = null;
    course7.setSecretary(secretary9);
    course7.setName("");
    boolean b13 = course7.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = course7.getClasses();
    administrative.Course course15 = new administrative.Course("", arraylist_class14);
    java.util.ArrayList<administrative.Class> arraylist_class18 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array19 = new administrative.Class[] {  };
    boolean b20 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class18, class_array19);
    administrative.Course course21 = new administrative.Course("hi!", arraylist_class18);
    java.lang.String str22 = course21.toString();
    administrative.Secretary secretary23 = null;
    course21.setSecretary(secretary23);
    course21.setName("");
    boolean b27 = course21.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class28 = course21.getClasses();
    administrative.Course course29 = new administrative.Course("", arraylist_class28);
    course15.setClasses(arraylist_class28);
    administrative.Course course31 = new administrative.Course("", arraylist_class28);
    administrative.Course course32 = new administrative.Course("", arraylist_class28);
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class34 = course32.pickClass((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class28);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    course5.setName("");
    administrative.Secretary secretary14 = null;
    course5.setSecretary(secretary14);
    java.util.ArrayList<administrative.Class> arraylist_class16 = course5.getClasses();
    administrative.Course course17 = new administrative.Course("", arraylist_class16);
    administrative.Secretary secretary18 = course17.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary18);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student12 = course4.getStudents();
    java.lang.String str13 = course4.getName();
    java.util.ArrayList<administrative.Class> arraylist_class14 = course4.getClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class14);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    boolean b6 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class7 = course5.getClasses();
    administrative.Course course8 = new administrative.Course("", arraylist_class7);
    java.util.ArrayList<administrative.Class> arraylist_class9 = course8.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class10 = course8.getClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class10);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    administrative.Secretary secretary20 = course19.getSecretary();
    java.lang.String str21 = course19.toString();
    java.util.ArrayList<personal.Student> arraylist_student22 = course19.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student22);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    administrative.Secretary secretary12 = course4.getSecretary();
    administrative.Secretary secretary13 = null;
    course4.setSecretary(secretary13);
    java.lang.String str15 = course4.reportIn();
    administrative.Secretary secretary16 = null;
    course4.setSecretary(secretary16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    administrative.Secretary secretary7 = null;
    course4.setSecretary(secretary7);
    java.util.ArrayList<administrative.Class> arraylist_class9 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class10 = course4.getClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class10);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }


    java.util.ArrayList<administrative.Class> arraylist_class5 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array6 = new administrative.Class[] {  };
    boolean b7 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class5, class_array6);
    administrative.Course course8 = new administrative.Course("hi!", arraylist_class5);
    java.lang.String str9 = course8.toString();
    administrative.Secretary secretary10 = null;
    course8.setSecretary(secretary10);
    course8.setName("");
    boolean b14 = course8.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class15 = course8.getClasses();
    administrative.Course course16 = new administrative.Course("", arraylist_class15);
    java.util.ArrayList<administrative.Class> arraylist_class19 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array20 = new administrative.Class[] {  };
    boolean b21 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class19, class_array20);
    administrative.Course course22 = new administrative.Course("hi!", arraylist_class19);
    java.lang.String str23 = course22.toString();
    administrative.Secretary secretary24 = null;
    course22.setSecretary(secretary24);
    course22.setName("");
    boolean b28 = course22.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class29 = course22.getClasses();
    administrative.Course course30 = new administrative.Course("", arraylist_class29);
    course16.setClasses(arraylist_class29);
    administrative.Course course32 = new administrative.Course("", arraylist_class29);
    administrative.Course course33 = new administrative.Course("", arraylist_class29);
    administrative.Course course34 = new administrative.Course("hi!", arraylist_class29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class29);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    boolean b5 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class6 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student7 = course4.getStudents();
    java.lang.String str8 = course4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student12 = course4.getStudents();
    course4.setName("");
    java.lang.String str15 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class16 = course4.getClasses();
    personal.Student student17 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b18 = course4.enroll(student17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class16);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    administrative.Secretary secretary16 = null;
    course15.setSecretary(secretary16);
    java.lang.String str18 = course15.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class20 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array21 = new administrative.Class[] {  };
    boolean b22 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class20, class_array21);
    administrative.Course course23 = new administrative.Course("hi!", arraylist_class20);
    boolean b24 = course23.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class25 = course23.getClasses();
    course15.setClasses(arraylist_class25);
    java.lang.String str27 = course15.toString();
    boolean b28 = course15.listClasses();
    course15.setName("");
    boolean b31 = course15.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class32 = course15.getClasses();
    administrative.Secretary secretary33 = null;
    course15.setSecretary(secretary33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class32);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    java.lang.String str7 = course4.toString();
    administrative.Secretary secretary8 = course4.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary8);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    administrative.Secretary secretary7 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class8 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class9 = course4.getClasses();
    administrative.Secretary secretary10 = course4.getSecretary();
    administrative.Secretary secretary11 = null;
    course4.setSecretary(secretary11);
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class14 = course4.pickClass((int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary10);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    administrative.Secretary secretary16 = null;
    course15.setSecretary(secretary16);
    java.lang.String str18 = course15.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class20 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array21 = new administrative.Class[] {  };
    boolean b22 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class20, class_array21);
    administrative.Course course23 = new administrative.Course("hi!", arraylist_class20);
    boolean b24 = course23.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class25 = course23.getClasses();
    course15.setClasses(arraylist_class25);
    java.lang.String str27 = course15.toString();
    boolean b28 = course15.listClasses();
    java.lang.String str29 = course15.getName();
    boolean b30 = course15.listClasses();
    boolean b31 = course15.listClasses();
    administrative.Secretary secretary32 = course15.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class33 = course15.getClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class33);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    course5.setName("");
    administrative.Secretary secretary14 = null;
    course5.setSecretary(secretary14);
    java.util.ArrayList<administrative.Class> arraylist_class16 = course5.getClasses();
    administrative.Course course17 = new administrative.Course("", arraylist_class16);
    java.util.ArrayList<administrative.Class> arraylist_class19 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array20 = new administrative.Class[] {  };
    boolean b21 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class19, class_array20);
    administrative.Course course22 = new administrative.Course("hi!", arraylist_class19);
    java.lang.String str23 = course22.toString();
    administrative.Secretary secretary24 = null;
    course22.setSecretary(secretary24);
    course22.setName("");
    boolean b28 = course22.listClasses();
    boolean b29 = course22.listClasses();
    boolean b30 = course22.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class32 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array33 = new administrative.Class[] {  };
    boolean b34 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class32, class_array33);
    administrative.Course course35 = new administrative.Course("hi!", arraylist_class32);
    java.lang.String str36 = course35.reportIn();
    boolean b37 = course35.listClasses();
    administrative.Secretary secretary38 = course35.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class39 = course35.getClasses();
    course22.setClasses(arraylist_class39);
    course17.setClasses(arraylist_class39);
    course17.setName("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class39);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.lang.String str14 = course13.toString();
    administrative.Secretary secretary15 = null;
    course13.setSecretary(secretary15);
    course13.setName("");
    boolean b19 = course13.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class20 = course13.getClasses();
    course5.setClasses(arraylist_class20);
    administrative.Course course22 = new administrative.Course("", arraylist_class20);
    java.lang.String str23 = course22.getName();
    boolean b24 = course22.listClasses();
    administrative.Secretary secretary25 = null;
    course22.setSecretary(secretary25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    administrative.Secretary secretary12 = course4.getSecretary();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class14 = course4.pickClass((int)(byte)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary12);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    administrative.Secretary secretary7 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class8 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class9 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array13 = new administrative.Class[] {  };
    boolean b14 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class12, class_array13);
    administrative.Course course15 = new administrative.Course("hi!", arraylist_class12);
    java.util.ArrayList<administrative.Class> arraylist_class16 = course15.getClasses();
    administrative.Course course17 = new administrative.Course("", arraylist_class16);
    course4.setClasses(arraylist_class16);
    course4.setName("");
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class22 = course4.pickClass((int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class16);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    administrative.Secretary secretary18 = null;
    course4.setSecretary(secretary18);
    course4.setName("hi!");
    java.util.ArrayList<personal.Student> arraylist_student22 = course4.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student23 = course4.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class24 = course4.getClasses();
    java.lang.String str25 = course4.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "hi!"+ "'", str25.equals("hi!"));

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array8 = new administrative.Class[] {  };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class7, class_array8);
    course5.setClasses(arraylist_class7);
    administrative.Course course11 = new administrative.Course("", arraylist_class7);
    java.util.ArrayList<personal.Student> arraylist_student12 = course11.getStudents();
    java.lang.String str13 = course11.getName();
    java.lang.String str14 = course11.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Secretary secretary19 = null;
    course5.setSecretary(secretary19);
    course5.setName("hi!");
    java.util.ArrayList<personal.Student> arraylist_student23 = course5.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student24 = course5.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class25 = course5.getClasses();
    administrative.Course course26 = new administrative.Course("hi!", arraylist_class25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class25);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Secretary secretary19 = null;
    course5.setSecretary(secretary19);
    course5.setName("hi!");
    java.util.ArrayList<personal.Student> arraylist_student23 = course5.getStudents();
    java.lang.String str24 = course5.getName();
    java.util.ArrayList<administrative.Class> arraylist_class25 = course5.getClasses();
    administrative.Course course26 = new administrative.Course("hi!", arraylist_class25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "hi!"+ "'", str24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class25);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    course4.setName("");
    administrative.Secretary secretary13 = null;
    course4.setSecretary(secretary13);
    course4.setName("");
    java.util.ArrayList<administrative.Class> arraylist_class17 = course4.getClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class17);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    administrative.Secretary secretary19 = course4.getSecretary();
    java.util.ArrayList<personal.Student> arraylist_student20 = course4.getStudents();
    administrative.Secretary secretary21 = course4.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary21);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.lang.String str14 = course13.toString();
    administrative.Secretary secretary15 = null;
    course13.setSecretary(secretary15);
    course13.setName("");
    boolean b19 = course13.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class20 = course13.getClasses();
    course5.setClasses(arraylist_class20);
    administrative.Course course22 = new administrative.Course("", arraylist_class20);
    java.util.ArrayList<personal.Student> arraylist_student23 = course22.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class24 = course22.getClasses();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class26 = course22.pickClass(100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class24);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    course15.setName("hi!");
    boolean b18 = course15.listClasses();
    boolean b19 = course15.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class8 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array9 = new administrative.Class[] {  };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class8, class_array9);
    administrative.Course course11 = new administrative.Course("hi!", arraylist_class8);
    java.util.ArrayList<administrative.Class> arraylist_class12 = course11.getClasses();
    course4.setClasses(arraylist_class12);
    java.util.ArrayList<personal.Student> arraylist_student14 = course4.getStudents();
    course4.setName("");
    course4.setName("");
    java.util.ArrayList<personal.Student> arraylist_student19 = course4.getStudents();
    java.lang.String str20 = course4.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.lang.String str14 = course13.toString();
    administrative.Secretary secretary15 = null;
    course13.setSecretary(secretary15);
    course13.setName("");
    boolean b19 = course13.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class20 = course13.getClasses();
    course5.setClasses(arraylist_class20);
    administrative.Course course22 = new administrative.Course("", arraylist_class20);
    java.lang.String str23 = course22.getName();
    java.lang.String str24 = course22.reportIn();
    java.lang.String str25 = course22.getName();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class27 = course22.pickClass((int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    administrative.Course course13 = new administrative.Course("", arraylist_class12);
    course13.setName("");
    administrative.Secretary secretary16 = null;
    course13.setSecretary(secretary16);
    java.util.ArrayList<administrative.Class> arraylist_class19 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array20 = new administrative.Class[] {  };
    boolean b21 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class19, class_array20);
    administrative.Course course22 = new administrative.Course("hi!", arraylist_class19);
    java.lang.String str23 = course22.reportIn();
    boolean b24 = course22.listClasses();
    java.lang.String str25 = course22.toString();
    java.util.ArrayList<administrative.Class> arraylist_class27 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array28 = new administrative.Class[] {  };
    boolean b29 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class27, class_array28);
    administrative.Course course30 = new administrative.Course("hi!", arraylist_class27);
    java.lang.String str31 = course30.toString();
    administrative.Secretary secretary32 = null;
    course30.setSecretary(secretary32);
    course30.setName("");
    boolean b36 = course30.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class37 = course30.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class39 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array40 = new administrative.Class[] {  };
    boolean b41 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class39, class_array40);
    administrative.Course course42 = new administrative.Course("hi!", arraylist_class39);
    course30.setClasses(arraylist_class39);
    java.lang.String str44 = course30.toString();
    java.util.ArrayList<administrative.Class> arraylist_class45 = course30.getClasses();
    course22.setClasses(arraylist_class45);
    java.util.ArrayList<administrative.Class> arraylist_class48 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array49 = new administrative.Class[] {  };
    boolean b50 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class48, class_array49);
    administrative.Course course51 = new administrative.Course("hi!", arraylist_class48);
    java.lang.String str52 = course51.toString();
    administrative.Secretary secretary53 = null;
    course51.setSecretary(secretary53);
    course51.setName("");
    boolean b57 = course51.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class58 = course51.getClasses();
    course22.setClasses(arraylist_class58);
    course13.setClasses(arraylist_class58);
    java.lang.String str61 = course13.toString();
    java.util.ArrayList<personal.Student> arraylist_student62 = course13.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + ""+ "'", str52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + ""+ "'", str61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student62);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = null;
    course6.setSecretary(secretary8);
    course6.setName("");
    boolean b12 = course6.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = course6.getClasses();
    administrative.Course course14 = new administrative.Course("", arraylist_class13);
    java.util.ArrayList<administrative.Class> arraylist_class17 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array18 = new administrative.Class[] {  };
    boolean b19 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class17, class_array18);
    administrative.Course course20 = new administrative.Course("hi!", arraylist_class17);
    java.lang.String str21 = course20.toString();
    administrative.Secretary secretary22 = null;
    course20.setSecretary(secretary22);
    course20.setName("");
    boolean b26 = course20.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class27 = course20.getClasses();
    administrative.Course course28 = new administrative.Course("", arraylist_class27);
    course14.setClasses(arraylist_class27);
    administrative.Course course30 = new administrative.Course("hi!", arraylist_class27);
    java.lang.String str31 = course30.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "hi!"+ "'", str31.equals("hi!"));

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    java.lang.String str10 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array8 = new administrative.Class[] {  };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class7, class_array8);
    course5.setClasses(arraylist_class7);
    administrative.Course course11 = new administrative.Course("", arraylist_class7);
    java.util.ArrayList<personal.Student> arraylist_student12 = course11.getStudents();
    java.lang.String str13 = course11.getName();
    course11.setName("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    boolean b11 = course4.listClasses();
    boolean b12 = course4.listClasses();
    course4.setName("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class6 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class8 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array9 = new administrative.Class[] {  };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class8, class_array9);
    administrative.Course course11 = new administrative.Course("hi!", arraylist_class8);
    java.lang.String str12 = course11.reportIn();
    boolean b13 = course11.listClasses();
    administrative.Secretary secretary14 = course11.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class15 = course11.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class16 = course11.getClasses();
    course4.setClasses(arraylist_class16);
    java.util.ArrayList<personal.Student> arraylist_student18 = course4.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student18);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = null;
    course6.setSecretary(secretary8);
    course6.setName("");
    boolean b12 = course6.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = course6.getClasses();
    administrative.Course course14 = new administrative.Course("", arraylist_class13);
    administrative.Course course15 = new administrative.Course("hi!", arraylist_class13);
    boolean b16 = course15.listClasses();
    administrative.Secretary secretary17 = null;
    course15.setSecretary(secretary17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.lang.String str6 = course4.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!"+ "'", str6.equals("hi!"));

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class7 = course4.getClasses();
    java.lang.String str8 = course4.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student9 = course4.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student9);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array8 = new administrative.Class[] {  };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class7, class_array8);
    administrative.Course course10 = new administrative.Course("hi!", arraylist_class7);
    course4.setClasses(arraylist_class7);
    java.lang.String str12 = course4.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    administrative.Course course13 = new administrative.Course("", arraylist_class12);
    java.lang.String str14 = course13.getName();
    boolean b15 = course13.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    personal.Student student18 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b19 = course4.enroll(student18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    administrative.Secretary secretary7 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class8 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class9 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array13 = new administrative.Class[] {  };
    boolean b14 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class12, class_array13);
    administrative.Course course15 = new administrative.Course("hi!", arraylist_class12);
    java.util.ArrayList<administrative.Class> arraylist_class16 = course15.getClasses();
    administrative.Course course17 = new administrative.Course("", arraylist_class16);
    course4.setClasses(arraylist_class16);
    java.util.ArrayList<personal.Student> arraylist_student19 = course4.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student19);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    boolean b11 = course4.listClasses();
    boolean b12 = course4.listClasses();
    java.lang.String str13 = course4.getName();
    java.util.ArrayList<administrative.Class> arraylist_class16 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array17 = new administrative.Class[] {  };
    boolean b18 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class16, class_array17);
    administrative.Course course19 = new administrative.Course("hi!", arraylist_class16);
    java.lang.String str20 = course19.toString();
    administrative.Secretary secretary21 = course19.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class23 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array24 = new administrative.Class[] {  };
    boolean b25 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class23, class_array24);
    administrative.Course course26 = new administrative.Course("hi!", arraylist_class23);
    java.util.ArrayList<administrative.Class> arraylist_class27 = course26.getClasses();
    course19.setClasses(arraylist_class27);
    administrative.Course course29 = new administrative.Course("", arraylist_class27);
    administrative.Secretary secretary30 = null;
    course29.setSecretary(secretary30);
    java.util.ArrayList<administrative.Class> arraylist_class34 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array35 = new administrative.Class[] {  };
    boolean b36 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class34, class_array35);
    administrative.Course course37 = new administrative.Course("hi!", arraylist_class34);
    java.lang.String str38 = course37.toString();
    administrative.Secretary secretary39 = course37.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class41 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array42 = new administrative.Class[] {  };
    boolean b43 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class41, class_array42);
    administrative.Course course44 = new administrative.Course("hi!", arraylist_class41);
    java.util.ArrayList<administrative.Class> arraylist_class45 = course44.getClasses();
    course37.setClasses(arraylist_class45);
    administrative.Course course47 = new administrative.Course("", arraylist_class45);
    course29.setClasses(arraylist_class45);
    course4.setClasses(arraylist_class45);
    boolean b50 = course4.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    java.lang.String str20 = course19.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class21 = course19.getClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class21);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = null;
    course6.setSecretary(secretary8);
    course6.setName("");
    boolean b12 = course6.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = course6.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class15 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array16 = new administrative.Class[] {  };
    boolean b17 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class15, class_array16);
    administrative.Course course18 = new administrative.Course("hi!", arraylist_class15);
    course6.setClasses(arraylist_class15);
    administrative.Course course20 = new administrative.Course("", arraylist_class15);
    administrative.Secretary secretary21 = course20.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class22 = course20.getClasses();
    administrative.Course course23 = new administrative.Course("", arraylist_class22);
    java.util.ArrayList<personal.Student> arraylist_student24 = course23.getStudents();
    java.lang.String str25 = course23.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    administrative.Secretary secretary16 = null;
    course15.setSecretary(secretary16);
    java.lang.String str18 = course15.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class20 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array21 = new administrative.Class[] {  };
    boolean b22 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class20, class_array21);
    administrative.Course course23 = new administrative.Course("hi!", arraylist_class20);
    boolean b24 = course23.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class25 = course23.getClasses();
    course15.setClasses(arraylist_class25);
    java.lang.String str27 = course15.toString();
    boolean b28 = course15.listClasses();
    course15.setName("");
    boolean b31 = course15.listClasses();
    administrative.Secretary secretary32 = null;
    course15.setSecretary(secretary32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.reportIn();
    boolean b7 = course5.listClasses();
    java.lang.String str8 = course5.toString();
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.lang.String str14 = course13.toString();
    administrative.Secretary secretary15 = null;
    course13.setSecretary(secretary15);
    course13.setName("");
    boolean b19 = course13.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class20 = course13.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class22 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array23 = new administrative.Class[] {  };
    boolean b24 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class22, class_array23);
    administrative.Course course25 = new administrative.Course("hi!", arraylist_class22);
    course13.setClasses(arraylist_class22);
    java.lang.String str27 = course13.toString();
    java.util.ArrayList<administrative.Class> arraylist_class28 = course13.getClasses();
    course5.setClasses(arraylist_class28);
    administrative.Course course30 = new administrative.Course("hi!", arraylist_class28);
    course30.setName("");
    course30.setName("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class28);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    course4.setName("");
    boolean b9 = course4.listClasses();
    java.lang.String str10 = course4.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    course4.setName("");
    administrative.Secretary secretary13 = null;
    course4.setSecretary(secretary13);
    java.lang.String str15 = course4.toString();
    java.lang.String str16 = course4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = null;
    course6.setSecretary(secretary8);
    course6.setName("");
    boolean b12 = course6.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = course6.getClasses();
    administrative.Course course14 = new administrative.Course("", arraylist_class13);
    administrative.Course course15 = new administrative.Course("hi!", arraylist_class13);
    boolean b16 = course15.listClasses();
    boolean b17 = course15.listClasses();
    java.lang.String str18 = course15.toString();
    personal.Student student19 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b20 = course15.enroll(student19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.util.ArrayList<personal.Student> arraylist_student6 = course5.getStudents();
    java.lang.String str7 = course5.toString();
    java.util.ArrayList<administrative.Class> arraylist_class8 = course5.getClasses();
    administrative.Course course9 = new administrative.Course("hi!", arraylist_class8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class8);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    java.lang.String str20 = course19.reportIn();
    java.lang.String str21 = course19.getName();
    boolean b22 = course19.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class23 = course19.getClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class23);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    java.lang.String str7 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.lang.String str13 = course12.toString();
    administrative.Secretary secretary14 = null;
    course12.setSecretary(secretary14);
    course12.setName("");
    boolean b18 = course12.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course12.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class21 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array22 = new administrative.Class[] {  };
    boolean b23 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class21, class_array22);
    administrative.Course course24 = new administrative.Course("hi!", arraylist_class21);
    course12.setClasses(arraylist_class21);
    java.lang.String str26 = course12.toString();
    java.util.ArrayList<administrative.Class> arraylist_class27 = course12.getClasses();
    course4.setClasses(arraylist_class27);
    java.util.ArrayList<personal.Student> arraylist_student29 = course4.getStudents();
    administrative.Secretary secretary30 = null;
    course4.setSecretary(secretary30);
    personal.Student student32 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b33 = course4.enroll(student32);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student29);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    boolean b7 = course6.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class8 = course6.getClasses();
    administrative.Course course9 = new administrative.Course("", arraylist_class8);
    administrative.Course course10 = new administrative.Course("", arraylist_class8);
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class12 = course10.pickClass(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class8);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.util.ArrayList<administrative.Class> arraylist_class6 = course5.getClasses();
    administrative.Course course7 = new administrative.Course("", arraylist_class6);
    java.lang.String str8 = course7.toString();
    boolean b9 = course7.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class7 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class8 = course4.getClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class8);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student12 = course4.getStudents();
    course4.setName("");
    java.lang.String str15 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class16 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class19 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array20 = new administrative.Class[] {  };
    boolean b21 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class19, class_array20);
    administrative.Course course22 = new administrative.Course("hi!", arraylist_class19);
    java.lang.String str23 = course22.toString();
    java.util.ArrayList<administrative.Class> arraylist_class25 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array26 = new administrative.Class[] {  };
    boolean b27 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class25, class_array26);
    administrative.Course course28 = new administrative.Course("hi!", arraylist_class25);
    course22.setClasses(arraylist_class25);
    administrative.Course course30 = new administrative.Course("hi!", arraylist_class25);
    course4.setClasses(arraylist_class25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    java.lang.String str19 = course5.toString();
    java.util.ArrayList<administrative.Class> arraylist_class20 = course5.getClasses();
    administrative.Secretary secretary21 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class22 = course5.getClasses();
    java.lang.String str23 = course5.toString();
    java.lang.String str24 = course5.toString();
    administrative.Secretary secretary25 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class29 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array30 = new administrative.Class[] {  };
    boolean b31 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class29, class_array30);
    administrative.Course course32 = new administrative.Course("hi!", arraylist_class29);
    java.lang.String str33 = course32.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class34 = course32.getClasses();
    administrative.Course course35 = new administrative.Course("hi!", arraylist_class34);
    administrative.Course course36 = new administrative.Course("hi!", arraylist_class34);
    course5.setClasses(arraylist_class34);
    administrative.Course course38 = new administrative.Course("", arraylist_class34);
    java.lang.String str39 = course38.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class6 = course4.getClasses();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class8 = course4.pickClass((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class6);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.lang.String str13 = course12.toString();
    administrative.Secretary secretary14 = null;
    course12.setSecretary(secretary14);
    course12.setName("");
    boolean b18 = course12.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course12.getClasses();
    course4.setClasses(arraylist_class19);
    java.util.ArrayList<personal.Student> arraylist_student21 = course4.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class23 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array24 = new administrative.Class[] {  };
    boolean b25 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class23, class_array24);
    administrative.Course course26 = new administrative.Course("hi!", arraylist_class23);
    java.lang.String str27 = course26.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class28 = course26.getClasses();
    course4.setClasses(arraylist_class28);
    java.util.ArrayList<administrative.Class> arraylist_class30 = course4.getClasses();
    java.lang.String str31 = course4.reportIn();
    java.lang.String str32 = course4.toString();
    java.util.ArrayList<personal.Student> arraylist_student33 = course4.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student33);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    administrative.Secretary secretary16 = null;
    course15.setSecretary(secretary16);
    administrative.Secretary secretary18 = null;
    course15.setSecretary(secretary18);
    administrative.Secretary secretary20 = course15.getSecretary();
    java.lang.String str21 = course15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    course4.setName("");
    administrative.Secretary secretary13 = null;
    course4.setSecretary(secretary13);
    java.lang.String str15 = course4.reportIn();
    administrative.Secretary secretary16 = null;
    course4.setSecretary(secretary16);
    java.util.ArrayList<personal.Student> arraylist_student18 = course4.getStudents();
    course4.setName("");
    java.util.ArrayList<personal.Student> arraylist_student21 = course4.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student21);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    java.lang.String str19 = course5.toString();
    java.util.ArrayList<administrative.Class> arraylist_class20 = course5.getClasses();
    administrative.Secretary secretary21 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class22 = course5.getClasses();
    java.lang.String str23 = course5.toString();
    java.lang.String str24 = course5.toString();
    administrative.Secretary secretary25 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class29 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array30 = new administrative.Class[] {  };
    boolean b31 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class29, class_array30);
    administrative.Course course32 = new administrative.Course("hi!", arraylist_class29);
    java.lang.String str33 = course32.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class34 = course32.getClasses();
    administrative.Course course35 = new administrative.Course("hi!", arraylist_class34);
    administrative.Course course36 = new administrative.Course("hi!", arraylist_class34);
    course5.setClasses(arraylist_class34);
    administrative.Course course38 = new administrative.Course("", arraylist_class34);
    administrative.Secretary secretary39 = null;
    course38.setSecretary(secretary39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class34);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    java.lang.String str20 = course19.toString();
    course19.setName("hi!");
    java.lang.String str23 = course19.reportIn();
    boolean b24 = course19.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.lang.String str6 = course4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    administrative.Course course13 = new administrative.Course("", arraylist_class12);
    boolean b14 = course13.listClasses();
    administrative.Secretary secretary15 = course13.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary15);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.util.ArrayList<administrative.Class> arraylist_class5 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class6 = course4.getClasses();
    java.lang.String str7 = course4.toString();
    course4.setName("");
    java.lang.String str10 = course4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.lang.String str11 = course4.getName();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course4.getClasses();
    java.lang.String str13 = course4.getName();
    administrative.Secretary secretary14 = null;
    course4.setSecretary(secretary14);
    administrative.Secretary secretary16 = course4.getSecretary();
    personal.Student student17 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b18 = course4.enroll(student17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary16);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    java.util.ArrayList<personal.Student> arraylist_student15 = course5.getStudents();
    course5.setName("");
    course5.setName("");
    java.util.ArrayList<personal.Student> arraylist_student20 = course5.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class22 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array23 = new administrative.Class[] {  };
    boolean b24 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class22, class_array23);
    administrative.Course course25 = new administrative.Course("hi!", arraylist_class22);
    java.lang.String str26 = course25.toString();
    administrative.Secretary secretary27 = null;
    course25.setSecretary(secretary27);
    course25.setName("");
    boolean b31 = course25.listClasses();
    course25.setName("");
    administrative.Secretary secretary34 = null;
    course25.setSecretary(secretary34);
    java.util.ArrayList<administrative.Class> arraylist_class36 = course25.getClasses();
    course5.setClasses(arraylist_class36);
    administrative.Course course38 = new administrative.Course("", arraylist_class36);
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class40 = course38.pickClass((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class36);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.lang.String str14 = course13.toString();
    administrative.Secretary secretary15 = null;
    course13.setSecretary(secretary15);
    course13.setName("");
    boolean b19 = course13.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class20 = course13.getClasses();
    course5.setClasses(arraylist_class20);
    administrative.Course course22 = new administrative.Course("", arraylist_class20);
    java.lang.String str23 = course22.getName();
    java.lang.String str24 = course22.reportIn();
    java.lang.String str25 = course22.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class26 = course22.getClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class26);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course4.getClasses();
    administrative.Secretary secretary20 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class21 = course4.getClasses();
    java.lang.String str22 = course4.toString();
    java.util.ArrayList<personal.Student> arraylist_student23 = course4.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student23);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course4.getClasses();
    administrative.Secretary secretary20 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class21 = course4.getClasses();
    java.lang.String str22 = course4.toString();
    java.lang.String str23 = course4.toString();
    administrative.Secretary secretary24 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class28 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array29 = new administrative.Class[] {  };
    boolean b30 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class28, class_array29);
    administrative.Course course31 = new administrative.Course("hi!", arraylist_class28);
    java.lang.String str32 = course31.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class33 = course31.getClasses();
    administrative.Course course34 = new administrative.Course("hi!", arraylist_class33);
    administrative.Course course35 = new administrative.Course("hi!", arraylist_class33);
    course4.setClasses(arraylist_class33);
    boolean b37 = course4.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    administrative.Course course13 = new administrative.Course("", arraylist_class12);
    course13.setName("");
    boolean b16 = course13.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    administrative.Secretary secretary16 = null;
    course15.setSecretary(secretary16);
    java.lang.String str18 = course15.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class20 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array21 = new administrative.Class[] {  };
    boolean b22 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class20, class_array21);
    administrative.Course course23 = new administrative.Course("hi!", arraylist_class20);
    boolean b24 = course23.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class25 = course23.getClasses();
    course15.setClasses(arraylist_class25);
    java.lang.String str27 = course15.toString();
    boolean b28 = course15.listClasses();
    java.lang.String str29 = course15.getName();
    boolean b30 = course15.listClasses();
    boolean b31 = course15.listClasses();
    java.lang.String str32 = course15.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    java.util.ArrayList<personal.Student> arraylist_student8 = course4.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    boolean b11 = course4.listClasses();
    boolean b12 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    java.lang.String str18 = course17.reportIn();
    boolean b19 = course17.listClasses();
    administrative.Secretary secretary20 = course17.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class21 = course17.getClasses();
    course4.setClasses(arraylist_class21);
    java.lang.String str23 = course4.getName();
    course4.setName("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    boolean b16 = course15.listClasses();
    java.lang.String str17 = course15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    boolean b6 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class7 = course5.getClasses();
    administrative.Course course8 = new administrative.Course("", arraylist_class7);
    java.util.ArrayList<administrative.Class> arraylist_class9 = course8.getClasses();
    java.lang.String str10 = course8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.util.ArrayList<personal.Student> arraylist_student5 = course4.getStudents();
    java.lang.String str6 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.lang.String str14 = course13.toString();
    administrative.Secretary secretary15 = null;
    course13.setSecretary(secretary15);
    course13.setName("");
    boolean b19 = course13.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class20 = course13.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class22 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array23 = new administrative.Class[] {  };
    boolean b24 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class22, class_array23);
    administrative.Course course25 = new administrative.Course("hi!", arraylist_class22);
    course13.setClasses(arraylist_class22);
    administrative.Course course27 = new administrative.Course("", arraylist_class22);
    administrative.Secretary secretary28 = course27.getSecretary();
    course27.setName("");
    java.util.ArrayList<personal.Student> arraylist_student31 = course27.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class35 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array36 = new administrative.Class[] {  };
    boolean b37 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class35, class_array36);
    administrative.Course course38 = new administrative.Course("hi!", arraylist_class35);
    java.lang.String str39 = course38.toString();
    administrative.Secretary secretary40 = course38.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class42 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array43 = new administrative.Class[] {  };
    boolean b44 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class42, class_array43);
    administrative.Course course45 = new administrative.Course("hi!", arraylist_class42);
    java.util.ArrayList<administrative.Class> arraylist_class46 = course45.getClasses();
    course38.setClasses(arraylist_class46);
    administrative.Course course48 = new administrative.Course("", arraylist_class46);
    administrative.Secretary secretary49 = null;
    course48.setSecretary(secretary49);
    java.util.ArrayList<administrative.Class> arraylist_class53 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array54 = new administrative.Class[] {  };
    boolean b55 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class53, class_array54);
    administrative.Course course56 = new administrative.Course("hi!", arraylist_class53);
    java.lang.String str57 = course56.toString();
    administrative.Secretary secretary58 = course56.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class60 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array61 = new administrative.Class[] {  };
    boolean b62 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class60, class_array61);
    administrative.Course course63 = new administrative.Course("hi!", arraylist_class60);
    java.util.ArrayList<administrative.Class> arraylist_class64 = course63.getClasses();
    course56.setClasses(arraylist_class64);
    administrative.Course course66 = new administrative.Course("", arraylist_class64);
    course48.setClasses(arraylist_class64);
    administrative.Course course68 = new administrative.Course("hi!", arraylist_class64);
    course27.setClasses(arraylist_class64);
    course4.setClasses(arraylist_class64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + ""+ "'", str57.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class64);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    administrative.Secretary secretary20 = course19.getSecretary();
    course19.setName("");
    java.util.ArrayList<personal.Student> arraylist_student23 = course19.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student24 = course19.getStudents();
    administrative.Secretary secretary25 = course19.getSecretary();
    java.lang.String str26 = course19.toString();
    java.util.ArrayList<personal.Student> arraylist_student27 = course19.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student28 = course19.getStudents();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class30 = course19.pickClass((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student28);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class6 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array7 = new administrative.Class[] {  };
    boolean b8 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class6, class_array7);
    course4.setClasses(arraylist_class6);
    java.lang.String str10 = course4.getName();
    java.util.ArrayList<personal.Student> arraylist_student11 = course4.getStudents();
    administrative.Secretary secretary12 = course4.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!"+ "'", str10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary12);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.util.ArrayList<personal.Student> arraylist_student5 = course4.getStudents();
    java.lang.String str6 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = null;
    course4.setClasses(arraylist_class7);
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<personal.Student> arraylist_student9 = course4.getStudents();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course4.getClasses();
    administrative.Secretary secretary20 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class21 = course4.getClasses();
    java.lang.String str22 = course4.toString();
    java.lang.String str23 = course4.toString();
    administrative.Secretary secretary24 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class28 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array29 = new administrative.Class[] {  };
    boolean b30 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class28, class_array29);
    administrative.Course course31 = new administrative.Course("hi!", arraylist_class28);
    java.lang.String str32 = course31.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class33 = course31.getClasses();
    administrative.Course course34 = new administrative.Course("hi!", arraylist_class33);
    administrative.Course course35 = new administrative.Course("hi!", arraylist_class33);
    course4.setClasses(arraylist_class33);
    administrative.Secretary secretary37 = null;
    course4.setSecretary(secretary37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class33);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array8 = new administrative.Class[] {  };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class7, class_array8);
    course5.setClasses(arraylist_class7);
    administrative.Course course11 = new administrative.Course("", arraylist_class7);
    administrative.Secretary secretary12 = course11.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary12);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student13 = course5.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class14 = course5.getClasses();
    administrative.Course course15 = new administrative.Course("", arraylist_class14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class14);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    administrative.Secretary secretary7 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class8 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class9 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array13 = new administrative.Class[] {  };
    boolean b14 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class12, class_array13);
    administrative.Course course15 = new administrative.Course("hi!", arraylist_class12);
    java.util.ArrayList<administrative.Class> arraylist_class16 = course15.getClasses();
    administrative.Course course17 = new administrative.Course("", arraylist_class16);
    course4.setClasses(arraylist_class16);
    course4.setName("");
    java.lang.String str21 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class24 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array25 = new administrative.Class[] {  };
    boolean b26 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class24, class_array25);
    administrative.Course course27 = new administrative.Course("hi!", arraylist_class24);
    java.lang.String str28 = course27.toString();
    java.util.ArrayList<administrative.Class> arraylist_class30 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array31 = new administrative.Class[] {  };
    boolean b32 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class30, class_array31);
    administrative.Course course33 = new administrative.Course("hi!", arraylist_class30);
    course27.setClasses(arraylist_class30);
    administrative.Course course35 = new administrative.Course("hi!", arraylist_class30);
    course4.setClasses(arraylist_class30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.util.ArrayList<personal.Student> arraylist_student5 = course4.getStudents();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.lang.String str7 = course4.reportIn();
    administrative.Secretary secretary8 = null;
    course4.setSecretary(secretary8);
    boolean b10 = course4.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class6 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array7 = new administrative.Class[] {  };
    boolean b8 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class6, class_array7);
    course4.setClasses(arraylist_class6);
    course4.setName("");
    course4.setName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.lang.String str12 = course4.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    java.lang.String str18 = course17.toString();
    administrative.Secretary secretary19 = null;
    course17.setSecretary(secretary19);
    course17.setName("");
    boolean b23 = course17.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class24 = course17.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student25 = course17.getStudents();
    course17.setName("");
    administrative.Secretary secretary28 = course17.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class29 = course17.getClasses();
    course4.setClasses(arraylist_class29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class29);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course4.getClasses();
    java.lang.String str20 = course4.toString();
    java.lang.String str21 = course4.getName();
    administrative.Secretary secretary22 = null;
    course4.setSecretary(secretary22);
    administrative.Secretary secretary24 = course4.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary24);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    administrative.Course course13 = new administrative.Course("", arraylist_class12);
    course13.setName("");
    administrative.Secretary secretary16 = null;
    course13.setSecretary(secretary16);
    java.lang.String str18 = course13.getName();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class20 = course13.pickClass((int)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.lang.String str14 = course13.toString();
    administrative.Secretary secretary15 = null;
    course13.setSecretary(secretary15);
    course13.setName("");
    boolean b19 = course13.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class20 = course13.getClasses();
    course5.setClasses(arraylist_class20);
    administrative.Course course22 = new administrative.Course("", arraylist_class20);
    java.lang.String str23 = course22.getName();
    java.lang.String str24 = course22.reportIn();
    java.lang.String str25 = course22.getName();
    course22.setName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = course6.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.util.ArrayList<administrative.Class> arraylist_class14 = course13.getClasses();
    course6.setClasses(arraylist_class14);
    java.util.ArrayList<personal.Student> arraylist_student16 = course6.getStudents();
    course6.setName("");
    course6.setName("");
    java.util.ArrayList<administrative.Class> arraylist_class21 = course6.getClasses();
    administrative.Course course22 = new administrative.Course("", arraylist_class21);
    administrative.Course course23 = new administrative.Course("", arraylist_class21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class21);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    administrative.Secretary secretary19 = null;
    course4.setSecretary(secretary19);
    java.lang.String str21 = course4.toString();
    administrative.Secretary secretary22 = null;
    course4.setSecretary(secretary22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course4.getClasses();
    administrative.Secretary secretary20 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class21 = course4.getClasses();
    java.lang.String str22 = course4.toString();
    boolean b23 = course4.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class7 = course4.getClasses();
    java.lang.String str8 = course4.reportIn();
    administrative.Secretary secretary9 = null;
    course4.setSecretary(secretary9);
    boolean b11 = course4.listClasses();
    administrative.Secretary secretary12 = course4.getSecretary();
    java.lang.String str13 = course4.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "hi!"+ "'", str13.equals("hi!"));

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    java.lang.String str7 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.lang.String str13 = course12.toString();
    administrative.Secretary secretary14 = null;
    course12.setSecretary(secretary14);
    course12.setName("");
    boolean b18 = course12.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course12.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class21 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array22 = new administrative.Class[] {  };
    boolean b23 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class21, class_array22);
    administrative.Course course24 = new administrative.Course("hi!", arraylist_class21);
    course12.setClasses(arraylist_class21);
    java.lang.String str26 = course12.toString();
    java.util.ArrayList<administrative.Class> arraylist_class27 = course12.getClasses();
    course4.setClasses(arraylist_class27);
    java.util.ArrayList<personal.Student> arraylist_student29 = course4.getStudents();
    administrative.Secretary secretary30 = null;
    course4.setSecretary(secretary30);
    java.lang.String str32 = course4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student12 = course4.getStudents();
    java.lang.String str13 = course4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = course6.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.util.ArrayList<administrative.Class> arraylist_class14 = course13.getClasses();
    course6.setClasses(arraylist_class14);
    administrative.Course course16 = new administrative.Course("", arraylist_class14);
    administrative.Secretary secretary17 = null;
    course16.setSecretary(secretary17);
    java.lang.String str19 = course16.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class21 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array22 = new administrative.Class[] {  };
    boolean b23 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class21, class_array22);
    administrative.Course course24 = new administrative.Course("hi!", arraylist_class21);
    boolean b25 = course24.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class26 = course24.getClasses();
    course16.setClasses(arraylist_class26);
    administrative.Course course28 = new administrative.Course("", arraylist_class26);
    boolean b29 = course28.listClasses();
    personal.Student student30 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b31 = course28.enroll(student30);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    administrative.Secretary secretary20 = course19.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class21 = course19.getClasses();
    java.lang.String str22 = course19.getName();
    java.lang.String str23 = course19.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array8 = new administrative.Class[] {  };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class7, class_array8);
    administrative.Course course10 = new administrative.Course("hi!", arraylist_class7);
    course4.setClasses(arraylist_class7);
    java.lang.String str12 = course4.toString();
    boolean b13 = course4.listClasses();
    java.lang.String str14 = course4.getName();
    java.util.ArrayList<personal.Student> arraylist_student15 = course4.getStudents();
    personal.Student student16 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = course4.enroll(student16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student15);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test272"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    boolean b5 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class6 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student7 = course4.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.lang.String str14 = course13.toString();
    administrative.Secretary secretary15 = null;
    course13.setSecretary(secretary15);
    course13.setName("");
    boolean b19 = course13.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class20 = course13.getClasses();
    administrative.Course course21 = new administrative.Course("", arraylist_class20);
    course21.setName("");
    java.lang.String str24 = course21.toString();
    java.util.ArrayList<administrative.Class> arraylist_class25 = course21.getClasses();
    course4.setClasses(arraylist_class25);
    java.util.ArrayList<administrative.Class> arraylist_class27 = course4.getClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class27);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class6 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array7 = new administrative.Class[] {  };
    boolean b8 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class6, class_array7);
    course4.setClasses(arraylist_class6);
    java.lang.String str10 = course4.getName();
    java.util.ArrayList<personal.Student> arraylist_student11 = course4.getStudents();
    course4.setName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!"+ "'", str10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class6 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array7 = new administrative.Class[] {  };
    boolean b8 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class6, class_array7);
    course4.setClasses(arraylist_class6);
    java.lang.String str10 = course4.toString();
    boolean b11 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course4.getClasses();
    course4.setName("hi!");
    personal.Student student15 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = course4.enroll(student15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class8 = course6.getClasses();
    administrative.Course course9 = new administrative.Course("hi!", arraylist_class8);
    administrative.Course course10 = new administrative.Course("hi!", arraylist_class8);
    java.lang.String str11 = course10.getName();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class13 = course10.pickClass((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "hi!"+ "'", str11.equals("hi!"));

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    java.util.ArrayList<personal.Student> arraylist_student20 = course19.getStudents();
    boolean b21 = course19.listClasses();
    personal.Student student22 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b23 = course19.enroll(student22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array8 = new administrative.Class[] {  };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class7, class_array8);
    administrative.Course course10 = new administrative.Course("hi!", arraylist_class7);
    course4.setClasses(arraylist_class7);
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    java.lang.String str17 = course16.toString();
    java.util.ArrayList<administrative.Class> arraylist_class19 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array20 = new administrative.Class[] {  };
    boolean b21 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class19, class_array20);
    administrative.Course course22 = new administrative.Course("hi!", arraylist_class19);
    course16.setClasses(arraylist_class19);
    course4.setClasses(arraylist_class19);
    java.lang.String str25 = course4.getName();
    java.util.ArrayList<personal.Student> arraylist_student26 = course4.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "hi!"+ "'", str25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student26);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    administrative.Secretary secretary18 = null;
    course4.setSecretary(secretary18);
    java.lang.String str20 = course4.getName();
    java.util.ArrayList<administrative.Class> arraylist_class21 = course4.getClasses();
    administrative.Secretary secretary22 = null;
    course4.setSecretary(secretary22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class21);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test279"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.util.ArrayList<personal.Student> arraylist_student5 = course4.getStudents();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.lang.String str7 = course4.reportIn();
    administrative.Secretary secretary8 = null;
    course4.setSecretary(secretary8);
    course4.setName("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    java.lang.String str7 = course4.toString();
    java.lang.String str8 = course4.reportIn();
    course4.setName("hi!");
    java.lang.String str11 = course4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    administrative.Secretary secretary7 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class8 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student9 = course4.getStudents();
    java.lang.String str10 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    java.lang.String str17 = course16.toString();
    administrative.Secretary secretary18 = null;
    course16.setSecretary(secretary18);
    course16.setName("");
    boolean b22 = course16.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class23 = course16.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class25 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array26 = new administrative.Class[] {  };
    boolean b27 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class25, class_array26);
    administrative.Course course28 = new administrative.Course("hi!", arraylist_class25);
    course16.setClasses(arraylist_class25);
    administrative.Course course30 = new administrative.Course("", arraylist_class25);
    java.util.ArrayList<personal.Student> arraylist_student31 = course30.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class33 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array34 = new administrative.Class[] {  };
    boolean b35 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class33, class_array34);
    administrative.Course course36 = new administrative.Course("hi!", arraylist_class33);
    java.lang.String str37 = course36.toString();
    administrative.Secretary secretary38 = null;
    course36.setSecretary(secretary38);
    course36.setName("");
    boolean b42 = course36.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class43 = course36.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student44 = course36.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class45 = course36.getClasses();
    course30.setClasses(arraylist_class45);
    course4.setClasses(arraylist_class45);
    java.util.ArrayList<administrative.Class> arraylist_class49 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array50 = new administrative.Class[] {  };
    boolean b51 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class49, class_array50);
    administrative.Course course52 = new administrative.Course("hi!", arraylist_class49);
    java.lang.String str53 = course52.toString();
    administrative.Secretary secretary54 = null;
    course52.setSecretary(secretary54);
    course52.setName("");
    boolean b58 = course52.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class59 = course52.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class61 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array62 = new administrative.Class[] {  };
    boolean b63 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class61, class_array62);
    administrative.Course course64 = new administrative.Course("hi!", arraylist_class61);
    course52.setClasses(arraylist_class61);
    java.lang.String str66 = course52.toString();
    java.util.ArrayList<administrative.Class> arraylist_class67 = course52.getClasses();
    administrative.Secretary secretary68 = course52.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class69 = course52.getClasses();
    course4.setClasses(arraylist_class69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + ""+ "'", str37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + ""+ "'", str53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + ""+ "'", str66.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class69);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array8 = new administrative.Class[] {  };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class7, class_array8);
    course5.setClasses(arraylist_class7);
    administrative.Course course11 = new administrative.Course("", arraylist_class7);
    java.util.ArrayList<personal.Student> arraylist_student12 = course11.getStudents();
    administrative.Secretary secretary13 = course11.getSecretary();
    administrative.Secretary secretary14 = null;
    course11.setSecretary(secretary14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary13);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class6 = course4.getClasses();
    java.lang.String str7 = course4.reportIn();
    java.lang.String str8 = course4.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    administrative.Secretary secretary20 = course19.getSecretary();
    course19.setName("");
    java.util.ArrayList<personal.Student> arraylist_student23 = course19.getStudents();
    administrative.Secretary secretary24 = course19.getSecretary();
    java.lang.String str25 = course19.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.util.ArrayList<administrative.Class> arraylist_class7 = course6.getClasses();
    administrative.Course course8 = new administrative.Course("", arraylist_class7);
    administrative.Course course9 = new administrative.Course("hi!", arraylist_class7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class7);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    administrative.Secretary secretary16 = null;
    course15.setSecretary(secretary16);
    java.lang.String str18 = course15.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class20 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array21 = new administrative.Class[] {  };
    boolean b22 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class20, class_array21);
    administrative.Course course23 = new administrative.Course("hi!", arraylist_class20);
    boolean b24 = course23.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class25 = course23.getClasses();
    course15.setClasses(arraylist_class25);
    java.lang.String str27 = course15.toString();
    boolean b28 = course15.listClasses();
    java.lang.String str29 = course15.getName();
    boolean b30 = course15.listClasses();
    boolean b31 = course15.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class32 = course15.getClasses();
    administrative.Secretary secretary33 = null;
    course15.setSecretary(secretary33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class32);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test287"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.lang.String str11 = course4.getName();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course4.getClasses();
    java.lang.String str13 = course4.getName();
    administrative.Secretary secretary14 = null;
    course4.setSecretary(secretary14);
    java.lang.String str16 = course4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test288"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    java.util.ArrayList<personal.Student> arraylist_student20 = course19.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class22 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array23 = new administrative.Class[] {  };
    boolean b24 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class22, class_array23);
    administrative.Course course25 = new administrative.Course("hi!", arraylist_class22);
    java.lang.String str26 = course25.toString();
    administrative.Secretary secretary27 = null;
    course25.setSecretary(secretary27);
    course25.setName("");
    boolean b31 = course25.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class32 = course25.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student33 = course25.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class34 = course25.getClasses();
    course19.setClasses(arraylist_class34);
    administrative.Secretary secretary36 = course19.getSecretary();
    boolean b37 = course19.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test289"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    administrative.Secretary secretary19 = course4.getSecretary();
    java.lang.String str20 = course4.getName();
    course4.setName("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test290"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    boolean b6 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class7 = course5.getClasses();
    administrative.Course course8 = new administrative.Course("", arraylist_class7);
    java.util.ArrayList<administrative.Class> arraylist_class9 = course8.getClasses();
    course8.setName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class9);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test291"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.util.ArrayList<administrative.Class> arraylist_class5 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class6 = course4.getClasses();
    boolean b7 = course4.listClasses();
    boolean b8 = course4.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test292"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class7 = course4.getClasses();
    java.lang.String str8 = course4.reportIn();
    administrative.Secretary secretary9 = null;
    course4.setSecretary(secretary9);
    boolean b11 = course4.listClasses();
    boolean b12 = course4.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test293"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    java.lang.String str7 = course4.toString();
    course4.setName("hi!");
    administrative.Secretary secretary10 = course4.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary10);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test294"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    administrative.Course course13 = new administrative.Course("", arraylist_class12);
    course13.setName("");
    administrative.Secretary secretary16 = null;
    course13.setSecretary(secretary16);
    java.lang.String str18 = course13.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test295"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class8 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array9 = new administrative.Class[] {  };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class8, class_array9);
    administrative.Course course11 = new administrative.Course("hi!", arraylist_class8);
    java.util.ArrayList<administrative.Class> arraylist_class12 = course11.getClasses();
    course4.setClasses(arraylist_class12);
    java.lang.String str14 = course4.reportIn();
    java.lang.String str15 = course4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test296"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = null;
    course6.setSecretary(secretary8);
    course6.setName("");
    boolean b12 = course6.listClasses();
    course6.setName("");
    administrative.Secretary secretary15 = null;
    course6.setSecretary(secretary15);
    java.util.ArrayList<administrative.Class> arraylist_class17 = course6.getClasses();
    administrative.Course course18 = new administrative.Course("", arraylist_class17);
    administrative.Course course19 = new administrative.Course("hi!", arraylist_class17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class17);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test297"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array8 = new administrative.Class[] {  };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class7, class_array8);
    administrative.Course course10 = new administrative.Course("hi!", arraylist_class7);
    course4.setClasses(arraylist_class7);
    java.lang.String str12 = course4.toString();
    java.lang.String str13 = course4.getName();
    administrative.Secretary secretary14 = null;
    course4.setSecretary(secretary14);
    java.lang.String str16 = course4.toString();
    boolean b17 = course4.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "hi!"+ "'", str13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test298"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    administrative.Secretary secretary16 = null;
    course15.setSecretary(secretary16);
    administrative.Secretary secretary18 = null;
    course15.setSecretary(secretary18);
    java.lang.String str20 = course15.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test299"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = null;
    course6.setSecretary(secretary8);
    course6.setName("");
    boolean b12 = course6.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = course6.getClasses();
    administrative.Course course14 = new administrative.Course("", arraylist_class13);
    administrative.Course course15 = new administrative.Course("hi!", arraylist_class13);
    java.util.ArrayList<administrative.Class> arraylist_class16 = course15.getClasses();
    personal.Student student17 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b18 = course15.enroll(student17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class16);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test300"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    java.lang.String str19 = course4.toString();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class21 = course4.pickClass((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test301"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    java.lang.String str7 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.lang.String str13 = course12.toString();
    administrative.Secretary secretary14 = null;
    course12.setSecretary(secretary14);
    course12.setName("");
    boolean b18 = course12.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course12.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class21 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array22 = new administrative.Class[] {  };
    boolean b23 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class21, class_array22);
    administrative.Course course24 = new administrative.Course("hi!", arraylist_class21);
    course12.setClasses(arraylist_class21);
    java.lang.String str26 = course12.toString();
    java.util.ArrayList<administrative.Class> arraylist_class27 = course12.getClasses();
    course4.setClasses(arraylist_class27);
    java.util.ArrayList<administrative.Class> arraylist_class30 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array31 = new administrative.Class[] {  };
    boolean b32 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class30, class_array31);
    administrative.Course course33 = new administrative.Course("hi!", arraylist_class30);
    java.lang.String str34 = course33.toString();
    administrative.Secretary secretary35 = null;
    course33.setSecretary(secretary35);
    course33.setName("");
    boolean b39 = course33.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class40 = course33.getClasses();
    course4.setClasses(arraylist_class40);
    boolean b42 = course4.listClasses();
    java.lang.String str43 = course4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test302"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student12 = course4.getStudents();
    course4.setName("");
    administrative.Secretary secretary15 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class16 = course4.getClasses();
    course4.setName("hi!");
    administrative.Secretary secretary19 = null;
    course4.setSecretary(secretary19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class16);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test303"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    administrative.Secretary secretary20 = course19.getSecretary();
    course19.setName("");
    java.util.ArrayList<personal.Student> arraylist_student23 = course19.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student24 = course19.getStudents();
    administrative.Secretary secretary25 = course19.getSecretary();
    java.lang.String str26 = course19.toString();
    java.util.ArrayList<administrative.Class> arraylist_class29 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array30 = new administrative.Class[] {  };
    boolean b31 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class29, class_array30);
    administrative.Course course32 = new administrative.Course("hi!", arraylist_class29);
    java.lang.String str33 = course32.toString();
    administrative.Secretary secretary34 = null;
    course32.setSecretary(secretary34);
    course32.setName("");
    boolean b38 = course32.listClasses();
    course32.setName("");
    administrative.Secretary secretary41 = null;
    course32.setSecretary(secretary41);
    java.util.ArrayList<administrative.Class> arraylist_class43 = course32.getClasses();
    administrative.Course course44 = new administrative.Course("", arraylist_class43);
    java.util.ArrayList<administrative.Class> arraylist_class46 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array47 = new administrative.Class[] {  };
    boolean b48 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class46, class_array47);
    administrative.Course course49 = new administrative.Course("hi!", arraylist_class46);
    java.lang.String str50 = course49.toString();
    administrative.Secretary secretary51 = null;
    course49.setSecretary(secretary51);
    course49.setName("");
    boolean b55 = course49.listClasses();
    boolean b56 = course49.listClasses();
    boolean b57 = course49.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class59 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array60 = new administrative.Class[] {  };
    boolean b61 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class59, class_array60);
    administrative.Course course62 = new administrative.Course("hi!", arraylist_class59);
    java.lang.String str63 = course62.reportIn();
    boolean b64 = course62.listClasses();
    administrative.Secretary secretary65 = course62.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class66 = course62.getClasses();
    course49.setClasses(arraylist_class66);
    course44.setClasses(arraylist_class66);
    course19.setClasses(arraylist_class66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + ""+ "'", str50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + ""+ "'", str63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class66);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test304"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.util.ArrayList<personal.Student> arraylist_student5 = course4.getStudents();
    java.lang.String str6 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = course4.getClasses();
    course4.setName("hi!");
    java.util.ArrayList<administrative.Class> arraylist_class11 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array12 = new administrative.Class[] {  };
    boolean b13 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class11, class_array12);
    administrative.Course course14 = new administrative.Course("hi!", arraylist_class11);
    java.lang.String str15 = course14.reportIn();
    boolean b16 = course14.listClasses();
    java.lang.String str17 = course14.toString();
    java.util.ArrayList<administrative.Class> arraylist_class19 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array20 = new administrative.Class[] {  };
    boolean b21 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class19, class_array20);
    administrative.Course course22 = new administrative.Course("hi!", arraylist_class19);
    java.lang.String str23 = course22.toString();
    administrative.Secretary secretary24 = null;
    course22.setSecretary(secretary24);
    course22.setName("");
    boolean b28 = course22.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class29 = course22.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class31 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array32 = new administrative.Class[] {  };
    boolean b33 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class31, class_array32);
    administrative.Course course34 = new administrative.Course("hi!", arraylist_class31);
    course22.setClasses(arraylist_class31);
    java.lang.String str36 = course22.toString();
    java.util.ArrayList<administrative.Class> arraylist_class37 = course22.getClasses();
    course14.setClasses(arraylist_class37);
    java.util.ArrayList<administrative.Class> arraylist_class40 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array41 = new administrative.Class[] {  };
    boolean b42 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class40, class_array41);
    administrative.Course course43 = new administrative.Course("hi!", arraylist_class40);
    java.lang.String str44 = course43.toString();
    administrative.Secretary secretary45 = null;
    course43.setSecretary(secretary45);
    course43.setName("");
    boolean b49 = course43.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class50 = course43.getClasses();
    course14.setClasses(arraylist_class50);
    course4.setClasses(arraylist_class50);
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class54 = course4.pickClass((int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class50);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test305"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    administrative.Secretary secretary20 = course19.getSecretary();
    course19.setName("");
    java.util.ArrayList<administrative.Class> arraylist_class23 = course19.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student24 = course19.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student24);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test306"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    administrative.Course course13 = new administrative.Course("", arraylist_class12);
    boolean b14 = course13.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class15 = course13.getClasses();
    boolean b16 = course13.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test307"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.util.ArrayList<personal.Student> arraylist_student5 = course4.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class6 = course4.getClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class6);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test308"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    boolean b11 = course4.listClasses();
    java.lang.String str12 = course4.toString();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class14 = course4.pickClass((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test309"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    boolean b11 = course4.listClasses();
    boolean b12 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    java.lang.String str18 = course17.reportIn();
    boolean b19 = course17.listClasses();
    administrative.Secretary secretary20 = course17.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class21 = course17.getClasses();
    course4.setClasses(arraylist_class21);
    administrative.Secretary secretary23 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class24 = course4.getClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class24);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test310"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class8 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array9 = new administrative.Class[] {  };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class8, class_array9);
    administrative.Course course11 = new administrative.Course("hi!", arraylist_class8);
    java.util.ArrayList<administrative.Class> arraylist_class12 = course11.getClasses();
    course4.setClasses(arraylist_class12);
    java.util.ArrayList<personal.Student> arraylist_student14 = course4.getStudents();
    administrative.Secretary secretary15 = course4.getSecretary();
    java.lang.String str16 = course4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test311"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    administrative.Secretary secretary11 = course4.getSecretary();
    java.lang.String str12 = course4.getName();
    java.lang.String str13 = course4.reportIn();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class15 = course4.pickClass((int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test312"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.util.ArrayList<personal.Student> arraylist_student5 = course4.getStudents();
    java.lang.String str6 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = course4.getClasses();
    java.lang.String str8 = course4.toString();
    boolean b9 = course4.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test313"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    course4.setName("");
    administrative.Secretary secretary13 = null;
    course4.setSecretary(secretary13);
    java.lang.String str15 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class17 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array18 = new administrative.Class[] {  };
    boolean b19 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class17, class_array18);
    administrative.Course course20 = new administrative.Course("hi!", arraylist_class17);
    java.lang.String str21 = course20.toString();
    administrative.Secretary secretary22 = null;
    course20.setSecretary(secretary22);
    course20.setName("");
    boolean b26 = course20.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class27 = course20.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class29 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array30 = new administrative.Class[] {  };
    boolean b31 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class29, class_array30);
    administrative.Course course32 = new administrative.Course("hi!", arraylist_class29);
    course20.setClasses(arraylist_class29);
    java.lang.String str34 = course20.toString();
    java.util.ArrayList<administrative.Class> arraylist_class35 = course20.getClasses();
    administrative.Secretary secretary36 = course20.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class37 = course20.getClasses();
    course4.setClasses(arraylist_class37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class37);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test314"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student13 = course5.getStudents();
    course5.setName("");
    java.lang.String str16 = course5.toString();
    java.util.ArrayList<administrative.Class> arraylist_class17 = course5.getClasses();
    administrative.Course course18 = new administrative.Course("hi!", arraylist_class17);
    java.lang.String str19 = course18.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test315"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = null;
    course6.setSecretary(secretary8);
    course6.setName("");
    boolean b12 = course6.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = course6.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class15 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array16 = new administrative.Class[] {  };
    boolean b17 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class15, class_array16);
    administrative.Course course18 = new administrative.Course("hi!", arraylist_class15);
    course6.setClasses(arraylist_class15);
    administrative.Course course20 = new administrative.Course("", arraylist_class15);
    administrative.Secretary secretary21 = course20.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class22 = course20.getClasses();
    administrative.Course course23 = new administrative.Course("", arraylist_class22);
    boolean b24 = course23.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test316"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.util.ArrayList<administrative.Class> arraylist_class5 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class6 = course4.getClasses();
    java.lang.String str7 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.lang.String str14 = course13.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class15 = course13.getClasses();
    administrative.Course course16 = new administrative.Course("", arraylist_class15);
    course4.setClasses(arraylist_class15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class15);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test317"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    java.lang.String str10 = course4.toString();
    administrative.Secretary secretary11 = course4.getSecretary();
    java.lang.String str12 = course4.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test318"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array8 = new administrative.Class[] {  };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class7, class_array8);
    course5.setClasses(arraylist_class7);
    administrative.Course course11 = new administrative.Course("", arraylist_class7);
    java.util.ArrayList<personal.Student> arraylist_student12 = course11.getStudents();
    java.lang.String str13 = course11.getName();
    personal.Student student14 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = course11.enroll(student14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test319"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    boolean b7 = course6.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class8 = course6.getClasses();
    administrative.Course course9 = new administrative.Course("", arraylist_class8);
    administrative.Course course10 = new administrative.Course("hi!", arraylist_class8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class8);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test320"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.reportIn();
    boolean b7 = course5.listClasses();
    administrative.Secretary secretary8 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = course5.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student10 = course5.getStudents();
    java.lang.String str11 = course5.toString();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    java.lang.String str18 = course17.toString();
    administrative.Secretary secretary19 = null;
    course17.setSecretary(secretary19);
    course17.setName("");
    boolean b23 = course17.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class24 = course17.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class26 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array27 = new administrative.Class[] {  };
    boolean b28 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class26, class_array27);
    administrative.Course course29 = new administrative.Course("hi!", arraylist_class26);
    course17.setClasses(arraylist_class26);
    administrative.Course course31 = new administrative.Course("", arraylist_class26);
    java.util.ArrayList<personal.Student> arraylist_student32 = course31.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class34 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array35 = new administrative.Class[] {  };
    boolean b36 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class34, class_array35);
    administrative.Course course37 = new administrative.Course("hi!", arraylist_class34);
    java.lang.String str38 = course37.toString();
    administrative.Secretary secretary39 = null;
    course37.setSecretary(secretary39);
    course37.setName("");
    boolean b43 = course37.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class44 = course37.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student45 = course37.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class46 = course37.getClasses();
    course31.setClasses(arraylist_class46);
    course5.setClasses(arraylist_class46);
    administrative.Course course49 = new administrative.Course("", arraylist_class46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class46);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test321"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = null;
    course6.setSecretary(secretary8);
    course6.setName("");
    boolean b12 = course6.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = course6.getClasses();
    administrative.Course course14 = new administrative.Course("", arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    boolean b16 = course15.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test322"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    administrative.Secretary secretary20 = course19.getSecretary();
    java.lang.String str21 = course19.toString();
    administrative.Secretary secretary22 = course19.getSecretary();
    java.lang.String str23 = course19.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test323"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course4.getClasses();
    administrative.Secretary secretary20 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class21 = course4.getClasses();
    java.lang.String str22 = course4.getName();
    course4.setName("hi!");
    java.util.ArrayList<personal.Student> arraylist_student25 = course4.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student25);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test324"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Secretary secretary19 = null;
    course5.setSecretary(secretary19);
    java.lang.String str21 = course5.getName();
    java.util.ArrayList<personal.Student> arraylist_student22 = course5.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class23 = course5.getClasses();
    administrative.Course course24 = new administrative.Course("", arraylist_class23);
    administrative.Secretary secretary25 = course24.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary25);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test325"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    administrative.Secretary secretary12 = course4.getSecretary();
    administrative.Secretary secretary13 = null;
    course4.setSecretary(secretary13);
    personal.Student student15 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = course4.enroll(student15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary12);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test326"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    course4.setName("");
    java.util.ArrayList<administrative.Class> arraylist_class13 = course4.getClasses();
    java.lang.String str14 = course4.getName();
    java.util.ArrayList<personal.Student> arraylist_student15 = course4.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student15);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test327"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    java.util.ArrayList<personal.Student> arraylist_student20 = course19.getStudents();
    boolean b21 = course19.listClasses();
    java.util.ArrayList<personal.Student> arraylist_student22 = course19.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student22);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test328"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    course4.setName("");
    java.util.ArrayList<personal.Student> arraylist_student13 = course4.getStudents();
    course4.setName("hi!");
    personal.Student student16 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = course4.enroll(student16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test329"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    course4.setName("");
    administrative.Secretary secretary13 = null;
    course4.setSecretary(secretary13);
    java.lang.String str15 = course4.reportIn();
    administrative.Secretary secretary16 = null;
    course4.setSecretary(secretary16);
    administrative.Secretary secretary18 = null;
    course4.setSecretary(secretary18);
    course4.setName("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test330"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class8 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array9 = new administrative.Class[] {  };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class8, class_array9);
    administrative.Course course11 = new administrative.Course("hi!", arraylist_class8);
    java.util.ArrayList<administrative.Class> arraylist_class12 = course11.getClasses();
    course4.setClasses(arraylist_class12);
    java.util.ArrayList<personal.Student> arraylist_student14 = course4.getStudents();
    course4.setName("");
    java.lang.String str17 = course4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test331"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.reportIn();
    boolean b7 = course5.listClasses();
    administrative.Secretary secretary8 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = course5.getClasses();
    administrative.Secretary secretary10 = null;
    course5.setSecretary(secretary10);
    java.util.ArrayList<personal.Student> arraylist_student12 = course5.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class13 = course5.getClasses();
    administrative.Course course14 = new administrative.Course("hi!", arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test332"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array8 = new administrative.Class[] {  };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class7, class_array8);
    administrative.Course course10 = new administrative.Course("hi!", arraylist_class7);
    course4.setClasses(arraylist_class7);
    java.lang.String str12 = course4.toString();
    boolean b13 = course4.listClasses();
    java.lang.String str14 = course4.getName();
    java.lang.String str15 = course4.toString();
    java.lang.String str16 = course4.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test333"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.lang.String str14 = course13.toString();
    administrative.Secretary secretary15 = null;
    course13.setSecretary(secretary15);
    course13.setName("");
    boolean b19 = course13.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class20 = course13.getClasses();
    course5.setClasses(arraylist_class20);
    administrative.Course course22 = new administrative.Course("", arraylist_class20);
    java.lang.String str23 = course22.getName();
    java.lang.String str24 = course22.reportIn();
    java.lang.String str25 = course22.toString();
    administrative.Secretary secretary26 = course22.getSecretary();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class28 = course22.pickClass(1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary26);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test334"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    administrative.Secretary secretary11 = course4.getSecretary();
    boolean b12 = course4.listClasses();
    java.util.ArrayList<personal.Student> arraylist_student13 = course4.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class14 = course4.getClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class14);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test335"); }


    java.util.ArrayList<administrative.Class> arraylist_class5 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array6 = new administrative.Class[] {  };
    boolean b7 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class5, class_array6);
    administrative.Course course8 = new administrative.Course("hi!", arraylist_class5);
    java.lang.String str9 = course8.toString();
    administrative.Secretary secretary10 = course8.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class12 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array13 = new administrative.Class[] {  };
    boolean b14 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class12, class_array13);
    administrative.Course course15 = new administrative.Course("hi!", arraylist_class12);
    java.util.ArrayList<administrative.Class> arraylist_class16 = course15.getClasses();
    course8.setClasses(arraylist_class16);
    administrative.Course course18 = new administrative.Course("", arraylist_class16);
    course18.setName("hi!");
    java.util.ArrayList<administrative.Class> arraylist_class21 = course18.getClasses();
    administrative.Course course22 = new administrative.Course("", arraylist_class21);
    administrative.Course course23 = new administrative.Course("hi!", arraylist_class21);
    administrative.Course course24 = new administrative.Course("hi!", arraylist_class21);
    administrative.Secretary secretary25 = course24.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary25);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test336"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.util.ArrayList<personal.Student> arraylist_student5 = course4.getStudents();
    java.lang.String str6 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = course4.getClasses();
    course4.setName("hi!");
    java.util.ArrayList<administrative.Class> arraylist_class11 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array12 = new administrative.Class[] {  };
    boolean b13 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class11, class_array12);
    administrative.Course course14 = new administrative.Course("hi!", arraylist_class11);
    java.lang.String str15 = course14.reportIn();
    boolean b16 = course14.listClasses();
    java.lang.String str17 = course14.toString();
    java.util.ArrayList<administrative.Class> arraylist_class19 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array20 = new administrative.Class[] {  };
    boolean b21 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class19, class_array20);
    administrative.Course course22 = new administrative.Course("hi!", arraylist_class19);
    java.lang.String str23 = course22.toString();
    administrative.Secretary secretary24 = null;
    course22.setSecretary(secretary24);
    course22.setName("");
    boolean b28 = course22.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class29 = course22.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class31 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array32 = new administrative.Class[] {  };
    boolean b33 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class31, class_array32);
    administrative.Course course34 = new administrative.Course("hi!", arraylist_class31);
    course22.setClasses(arraylist_class31);
    java.lang.String str36 = course22.toString();
    java.util.ArrayList<administrative.Class> arraylist_class37 = course22.getClasses();
    course14.setClasses(arraylist_class37);
    java.util.ArrayList<administrative.Class> arraylist_class40 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array41 = new administrative.Class[] {  };
    boolean b42 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class40, class_array41);
    administrative.Course course43 = new administrative.Course("hi!", arraylist_class40);
    java.lang.String str44 = course43.toString();
    administrative.Secretary secretary45 = null;
    course43.setSecretary(secretary45);
    course43.setName("");
    boolean b49 = course43.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class50 = course43.getClasses();
    course14.setClasses(arraylist_class50);
    course4.setClasses(arraylist_class50);
    administrative.Secretary secretary53 = course4.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary53);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test337"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class7 = course4.getClasses();
    java.lang.String str8 = course4.reportIn();
    boolean b9 = course4.listClasses();
    java.util.ArrayList<personal.Student> arraylist_student10 = course4.getStudents();
    course4.setName("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student10);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test338"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.util.ArrayList<personal.Student> arraylist_student5 = course4.getStudents();
    java.lang.String str6 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = null;
    course4.setClasses(arraylist_class7);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = course4.reportIn();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test339"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class7 = course4.getClasses();
    java.lang.String str8 = course4.reportIn();
    boolean b9 = course4.listClasses();
    java.util.ArrayList<personal.Student> arraylist_student10 = course4.getStudents();
    java.lang.String str11 = course4.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test340"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    administrative.Secretary secretary16 = null;
    course15.setSecretary(secretary16);
    administrative.Secretary secretary18 = course15.getSecretary();
    administrative.Secretary secretary19 = course15.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary19);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test341"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    administrative.Secretary secretary12 = course4.getSecretary();
    java.util.ArrayList<personal.Student> arraylist_student13 = course4.getStudents();
    boolean b14 = course4.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test342"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    administrative.Secretary secretary20 = course19.getSecretary();
    course19.setName("");
    java.util.ArrayList<personal.Student> arraylist_student23 = course19.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class26 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array27 = new administrative.Class[] {  };
    boolean b28 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class26, class_array27);
    administrative.Course course29 = new administrative.Course("hi!", arraylist_class26);
    java.lang.String str30 = course29.toString();
    administrative.Secretary secretary31 = null;
    course29.setSecretary(secretary31);
    course29.setName("");
    boolean b35 = course29.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class36 = course29.getClasses();
    administrative.Course course37 = new administrative.Course("", arraylist_class36);
    java.util.ArrayList<administrative.Class> arraylist_class40 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array41 = new administrative.Class[] {  };
    boolean b42 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class40, class_array41);
    administrative.Course course43 = new administrative.Course("hi!", arraylist_class40);
    java.lang.String str44 = course43.toString();
    administrative.Secretary secretary45 = null;
    course43.setSecretary(secretary45);
    course43.setName("");
    boolean b49 = course43.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class50 = course43.getClasses();
    administrative.Course course51 = new administrative.Course("", arraylist_class50);
    course37.setClasses(arraylist_class50);
    course19.setClasses(arraylist_class50);
    java.util.ArrayList<personal.Student> arraylist_student54 = course19.getStudents();
    java.lang.String str55 = course19.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + ""+ "'", str30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + ""+ "'", str55.equals(""));

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test343"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = course6.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.util.ArrayList<administrative.Class> arraylist_class14 = course13.getClasses();
    course6.setClasses(arraylist_class14);
    administrative.Course course16 = new administrative.Course("", arraylist_class14);
    administrative.Course course17 = new administrative.Course("", arraylist_class14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class14);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test344"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class6 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array7 = new administrative.Class[] {  };
    boolean b8 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class6, class_array7);
    course4.setClasses(arraylist_class6);
    java.lang.String str10 = course4.toString();
    administrative.Secretary secretary11 = course4.getSecretary();
    java.lang.String str12 = course4.getName();
    java.lang.String str13 = course4.getName();
    personal.Student student14 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = course4.enroll(student14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "hi!"+ "'", str12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "hi!"+ "'", str13.equals("hi!"));

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test345"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array8 = new administrative.Class[] {  };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class7, class_array8);
    course5.setClasses(arraylist_class7);
    administrative.Course course11 = new administrative.Course("", arraylist_class7);
    personal.Student student12 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = course11.enroll(student12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test346"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    administrative.Secretary secretary7 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class8 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student9 = course4.getStudents();
    java.lang.String str10 = course4.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test347"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class6 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class8 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array9 = new administrative.Class[] {  };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class8, class_array9);
    administrative.Course course11 = new administrative.Course("hi!", arraylist_class8);
    java.lang.String str12 = course11.reportIn();
    boolean b13 = course11.listClasses();
    administrative.Secretary secretary14 = course11.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class15 = course11.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class16 = course11.getClasses();
    course4.setClasses(arraylist_class16);
    java.util.ArrayList<administrative.Class> arraylist_class18 = null;
    course4.setClasses(arraylist_class18);
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<personal.Student> arraylist_student20 = course4.getStudents();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class16);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test348"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.util.ArrayList<personal.Student> arraylist_student5 = course4.getStudents();
    java.lang.String str6 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = course4.getClasses();
    course4.setName("hi!");
    java.lang.String str10 = course4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test349"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.lang.String str14 = course13.toString();
    administrative.Secretary secretary15 = null;
    course13.setSecretary(secretary15);
    course13.setName("");
    boolean b19 = course13.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class20 = course13.getClasses();
    course5.setClasses(arraylist_class20);
    administrative.Course course22 = new administrative.Course("", arraylist_class20);
    java.util.ArrayList<personal.Student> arraylist_student23 = course22.getStudents();
    administrative.Secretary secretary24 = null;
    course22.setSecretary(secretary24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student23);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test350"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class8 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array9 = new administrative.Class[] {  };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class8, class_array9);
    administrative.Course course11 = new administrative.Course("hi!", arraylist_class8);
    java.util.ArrayList<administrative.Class> arraylist_class12 = course11.getClasses();
    course4.setClasses(arraylist_class12);
    java.util.ArrayList<personal.Student> arraylist_student14 = course4.getStudents();
    course4.setName("");
    course4.setName("");
    java.util.ArrayList<personal.Student> arraylist_student19 = course4.getStudents();
    java.lang.String str20 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class23 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array24 = new administrative.Class[] {  };
    boolean b25 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class23, class_array24);
    administrative.Course course26 = new administrative.Course("hi!", arraylist_class23);
    java.lang.String str27 = course26.toString();
    administrative.Secretary secretary28 = null;
    course26.setSecretary(secretary28);
    course26.setName("");
    boolean b32 = course26.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class33 = course26.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class35 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array36 = new administrative.Class[] {  };
    boolean b37 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class35, class_array36);
    administrative.Course course38 = new administrative.Course("hi!", arraylist_class35);
    course26.setClasses(arraylist_class35);
    administrative.Course course40 = new administrative.Course("", arraylist_class35);
    administrative.Secretary secretary41 = course40.getSecretary();
    course40.setName("");
    java.util.ArrayList<personal.Student> arraylist_student44 = course40.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class48 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array49 = new administrative.Class[] {  };
    boolean b50 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class48, class_array49);
    administrative.Course course51 = new administrative.Course("hi!", arraylist_class48);
    java.lang.String str52 = course51.toString();
    administrative.Secretary secretary53 = course51.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class55 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array56 = new administrative.Class[] {  };
    boolean b57 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class55, class_array56);
    administrative.Course course58 = new administrative.Course("hi!", arraylist_class55);
    java.util.ArrayList<administrative.Class> arraylist_class59 = course58.getClasses();
    course51.setClasses(arraylist_class59);
    administrative.Course course61 = new administrative.Course("", arraylist_class59);
    administrative.Secretary secretary62 = null;
    course61.setSecretary(secretary62);
    java.util.ArrayList<administrative.Class> arraylist_class66 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array67 = new administrative.Class[] {  };
    boolean b68 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class66, class_array67);
    administrative.Course course69 = new administrative.Course("hi!", arraylist_class66);
    java.lang.String str70 = course69.toString();
    administrative.Secretary secretary71 = course69.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class73 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array74 = new administrative.Class[] {  };
    boolean b75 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class73, class_array74);
    administrative.Course course76 = new administrative.Course("hi!", arraylist_class73);
    java.util.ArrayList<administrative.Class> arraylist_class77 = course76.getClasses();
    course69.setClasses(arraylist_class77);
    administrative.Course course79 = new administrative.Course("", arraylist_class77);
    course61.setClasses(arraylist_class77);
    administrative.Course course81 = new administrative.Course("hi!", arraylist_class77);
    course40.setClasses(arraylist_class77);
    course4.setClasses(arraylist_class77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + ""+ "'", str52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + ""+ "'", str70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class77);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test351"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class6 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array7 = new administrative.Class[] {  };
    boolean b8 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class6, class_array7);
    course4.setClasses(arraylist_class6);
    java.lang.String str10 = course4.toString();
    boolean b11 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course4.getClasses();
    personal.Student student13 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = course4.enroll(student13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test352"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    administrative.Secretary secretary16 = null;
    course15.setSecretary(secretary16);
    java.lang.String str18 = course15.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class21 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array22 = new administrative.Class[] {  };
    boolean b23 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class21, class_array22);
    administrative.Course course24 = new administrative.Course("hi!", arraylist_class21);
    java.lang.String str25 = course24.toString();
    java.util.ArrayList<administrative.Class> arraylist_class26 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array27 = new administrative.Class[] {  };
    boolean b28 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class26, class_array27);
    course24.setClasses(arraylist_class26);
    administrative.Course course30 = new administrative.Course("", arraylist_class26);
    course15.setClasses(arraylist_class26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test353"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class9 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array10 = new administrative.Class[] {  };
    boolean b11 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class9, class_array10);
    administrative.Course course12 = new administrative.Course("hi!", arraylist_class9);
    java.util.ArrayList<administrative.Class> arraylist_class13 = course12.getClasses();
    course5.setClasses(arraylist_class13);
    administrative.Course course15 = new administrative.Course("", arraylist_class13);
    java.lang.String str16 = course15.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test354"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class19 = course4.getClasses();
    administrative.Secretary secretary20 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class21 = course4.getClasses();
    java.lang.String str22 = course4.getName();
    course4.setName("hi!");
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class26 = course4.pickClass((int)(byte)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test355"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    boolean b5 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class6 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student7 = course4.getStudents();
    administrative.Secretary secretary8 = null;
    course4.setSecretary(secretary8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student7);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test356"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class6 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array7 = new administrative.Class[] {  };
    boolean b8 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class6, class_array7);
    course4.setClasses(arraylist_class6);
    java.lang.String str10 = course4.toString();
    boolean b11 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course4.getClasses();
    course4.setName("hi!");
    course4.setName("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test357"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    course5.setName("");
    administrative.Secretary secretary14 = null;
    course5.setSecretary(secretary14);
    java.util.ArrayList<administrative.Class> arraylist_class16 = course5.getClasses();
    administrative.Course course17 = new administrative.Course("", arraylist_class16);
    java.util.ArrayList<administrative.Class> arraylist_class19 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array20 = new administrative.Class[] {  };
    boolean b21 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class19, class_array20);
    administrative.Course course22 = new administrative.Course("hi!", arraylist_class19);
    java.lang.String str23 = course22.toString();
    administrative.Secretary secretary24 = null;
    course22.setSecretary(secretary24);
    course22.setName("");
    boolean b28 = course22.listClasses();
    boolean b29 = course22.listClasses();
    boolean b30 = course22.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class32 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array33 = new administrative.Class[] {  };
    boolean b34 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class32, class_array33);
    administrative.Course course35 = new administrative.Course("hi!", arraylist_class32);
    java.lang.String str36 = course35.reportIn();
    boolean b37 = course35.listClasses();
    administrative.Secretary secretary38 = course35.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class39 = course35.getClasses();
    course22.setClasses(arraylist_class39);
    course17.setClasses(arraylist_class39);
    java.lang.String str42 = course17.toString();
    administrative.Secretary secretary43 = null;
    course17.setSecretary(secretary43);
    java.lang.String str45 = course17.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + ""+ "'", str45.equals(""));

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test358"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    administrative.Course course19 = new administrative.Course("", arraylist_class14);
    java.lang.String str20 = course19.toString();
    course19.setName("hi!");
    java.util.ArrayList<personal.Student> arraylist_student23 = course19.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student23);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test359"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    boolean b5 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class6 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student7 = course4.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.lang.String str14 = course13.toString();
    administrative.Secretary secretary15 = null;
    course13.setSecretary(secretary15);
    course13.setName("");
    boolean b19 = course13.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class20 = course13.getClasses();
    administrative.Course course21 = new administrative.Course("", arraylist_class20);
    course21.setName("");
    java.lang.String str24 = course21.toString();
    java.util.ArrayList<administrative.Class> arraylist_class25 = course21.getClasses();
    course4.setClasses(arraylist_class25);
    personal.Student student27 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b28 = course4.enroll(student27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class25);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test360"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student12 = course4.getStudents();
    course4.setName("");
    java.lang.String str15 = course4.getName();
    administrative.Secretary secretary16 = course4.getSecretary();
    boolean b17 = course4.listClasses();
    course4.setName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test361"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    java.util.ArrayList<administrative.Class> arraylist_class8 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array9 = new administrative.Class[] {  };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class8, class_array9);
    course6.setClasses(arraylist_class8);
    administrative.Course course12 = new administrative.Course("", arraylist_class8);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class8);
    java.util.ArrayList<personal.Student> arraylist_student14 = course13.getStudents();
    administrative.Secretary secretary15 = course13.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary15);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test362"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.util.ArrayList<personal.Student> arraylist_student6 = course5.getStudents();
    java.lang.String str7 = course5.toString();
    java.util.ArrayList<administrative.Class> arraylist_class8 = null;
    course5.setClasses(arraylist_class8);
    java.util.ArrayList<administrative.Class> arraylist_class11 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array12 = new administrative.Class[] {  };
    boolean b13 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class11, class_array12);
    administrative.Course course14 = new administrative.Course("hi!", arraylist_class11);
    java.lang.String str15 = course14.toString();
    administrative.Secretary secretary16 = null;
    course14.setSecretary(secretary16);
    course14.setName("");
    boolean b20 = course14.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class21 = course14.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student22 = course14.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class23 = course14.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class24 = course14.getClasses();
    course5.setClasses(arraylist_class24);
    administrative.Course course26 = new administrative.Course("", arraylist_class24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class24);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test363"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    course4.setName("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test364"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    boolean b11 = course4.listClasses();
    boolean b12 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    java.lang.String str18 = course17.reportIn();
    boolean b19 = course17.listClasses();
    administrative.Secretary secretary20 = course17.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class21 = course17.getClasses();
    course4.setClasses(arraylist_class21);
    java.lang.String str23 = course4.getName();
    java.lang.String str24 = course4.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test365"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.util.ArrayList<administrative.Class> arraylist_class6 = course5.getClasses();
    administrative.Course course7 = new administrative.Course("", arraylist_class6);
    java.lang.String str8 = course7.toString();
    java.lang.String str9 = course7.reportIn();
    java.lang.String str10 = course7.reportIn();
    boolean b11 = course7.listClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test366"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    boolean b11 = course4.listClasses();
    administrative.Secretary secretary12 = course4.getSecretary();
    course4.setName("hi!");
    java.lang.String str15 = course4.getName();
    java.util.ArrayList<administrative.Class> arraylist_class18 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array19 = new administrative.Class[] {  };
    boolean b20 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class18, class_array19);
    administrative.Course course21 = new administrative.Course("hi!", arraylist_class18);
    java.lang.String str22 = course21.toString();
    administrative.Secretary secretary23 = null;
    course21.setSecretary(secretary23);
    course21.setName("");
    boolean b27 = course21.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class28 = course21.getClasses();
    administrative.Course course29 = new administrative.Course("", arraylist_class28);
    course29.setName("");
    java.lang.String str32 = course29.toString();
    java.util.ArrayList<administrative.Class> arraylist_class33 = course29.getClasses();
    course4.setClasses(arraylist_class33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!"+ "'", str15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class33);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test367"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.lang.String str14 = course13.toString();
    administrative.Secretary secretary15 = null;
    course13.setSecretary(secretary15);
    course13.setName("");
    boolean b19 = course13.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class20 = course13.getClasses();
    course5.setClasses(arraylist_class20);
    administrative.Course course22 = new administrative.Course("", arraylist_class20);
    java.lang.String str23 = course22.getName();
    boolean b24 = course22.listClasses();
    administrative.Secretary secretary25 = course22.getSecretary();
    java.lang.String str26 = course22.getName();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class28 = course22.pickClass(1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test368"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    boolean b11 = course4.listClasses();
    administrative.Secretary secretary12 = course4.getSecretary();
    course4.setName("hi!");
    java.util.ArrayList<administrative.Class> arraylist_class16 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array17 = new administrative.Class[] {  };
    boolean b18 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class16, class_array17);
    administrative.Course course19 = new administrative.Course("hi!", arraylist_class16);
    java.lang.String str20 = course19.toString();
    administrative.Secretary secretary21 = null;
    course19.setSecretary(secretary21);
    course19.setName("");
    boolean b25 = course19.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class26 = course19.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class28 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array29 = new administrative.Class[] {  };
    boolean b30 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class28, class_array29);
    administrative.Course course31 = new administrative.Course("hi!", arraylist_class28);
    course19.setClasses(arraylist_class28);
    administrative.Secretary secretary33 = null;
    course19.setSecretary(secretary33);
    course19.setName("hi!");
    java.util.ArrayList<personal.Student> arraylist_student37 = course19.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student38 = course19.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class39 = course19.getClasses();
    course4.setClasses(arraylist_class39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class39);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test369"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.reportIn();
    boolean b6 = course4.listClasses();
    administrative.Secretary secretary7 = course4.getSecretary();
    administrative.Secretary secretary8 = null;
    course4.setSecretary(secretary8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary7);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test370"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    administrative.Secretary secretary8 = null;
    course6.setSecretary(secretary8);
    course6.setName("");
    boolean b12 = course6.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = course6.getClasses();
    administrative.Course course14 = new administrative.Course("", arraylist_class13);
    administrative.Course course15 = new administrative.Course("hi!", arraylist_class13);
    boolean b16 = course15.listClasses();
    java.lang.String str17 = course15.toString();
    java.util.ArrayList<administrative.Class> arraylist_class20 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array21 = new administrative.Class[] {  };
    boolean b22 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class20, class_array21);
    administrative.Course course23 = new administrative.Course("hi!", arraylist_class20);
    java.lang.String str24 = course23.toString();
    administrative.Secretary secretary25 = null;
    course23.setSecretary(secretary25);
    course23.setName("");
    boolean b29 = course23.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class30 = course23.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class32 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array33 = new administrative.Class[] {  };
    boolean b34 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class32, class_array33);
    administrative.Course course35 = new administrative.Course("hi!", arraylist_class32);
    course23.setClasses(arraylist_class32);
    administrative.Course course37 = new administrative.Course("", arraylist_class32);
    course15.setClasses(arraylist_class32);
    java.lang.String str39 = course15.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!"+ "'", str39.equals("hi!"));

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test371"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    java.lang.String str18 = course4.toString();
    administrative.Secretary secretary19 = course4.getSecretary();
    administrative.Secretary secretary20 = course4.getSecretary();
    java.lang.String str21 = course4.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test372"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    administrative.Secretary secretary11 = course4.getSecretary();
    java.lang.String str12 = course4.getName();
    boolean b13 = course4.listClasses();
    java.util.ArrayList<personal.Student> arraylist_student14 = course4.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student14);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test373"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class6 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array7 = new administrative.Class[] {  };
    boolean b8 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class6, class_array7);
    course4.setClasses(arraylist_class6);
    java.lang.String str10 = course4.toString();
    boolean b11 = course4.listClasses();
    java.util.ArrayList<personal.Student> arraylist_student12 = course4.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test374"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    administrative.Secretary secretary11 = course4.getSecretary();
    boolean b12 = course4.listClasses();
    java.util.ArrayList<personal.Student> arraylist_student13 = course4.getStudents();
    java.lang.String str14 = course4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test375"); }


    java.util.ArrayList<administrative.Class> arraylist_class5 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array6 = new administrative.Class[] {  };
    boolean b7 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class5, class_array6);
    administrative.Course course8 = new administrative.Course("hi!", arraylist_class5);
    java.lang.String str9 = course8.toString();
    administrative.Secretary secretary10 = course8.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class12 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array13 = new administrative.Class[] {  };
    boolean b14 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class12, class_array13);
    administrative.Course course15 = new administrative.Course("hi!", arraylist_class12);
    java.util.ArrayList<administrative.Class> arraylist_class16 = course15.getClasses();
    course8.setClasses(arraylist_class16);
    administrative.Course course18 = new administrative.Course("", arraylist_class16);
    course18.setName("hi!");
    java.util.ArrayList<administrative.Class> arraylist_class21 = course18.getClasses();
    administrative.Course course22 = new administrative.Course("", arraylist_class21);
    administrative.Course course23 = new administrative.Course("hi!", arraylist_class21);
    administrative.Course course24 = new administrative.Course("hi!", arraylist_class21);
    java.util.ArrayList<administrative.Class> arraylist_class25 = course24.getClasses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class25);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test376"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class11 = course4.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class13 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array14 = new administrative.Class[] {  };
    boolean b15 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class13, class_array14);
    administrative.Course course16 = new administrative.Course("hi!", arraylist_class13);
    course4.setClasses(arraylist_class13);
    administrative.Secretary secretary18 = null;
    course4.setSecretary(secretary18);
    course4.setName("hi!");
    java.lang.String str22 = course4.reportIn();
    administrative.Secretary secretary23 = course4.getSecretary();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary23);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test377"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class6 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array7 = new administrative.Class[] {  };
    boolean b8 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class6, class_array7);
    course4.setClasses(arraylist_class6);
    java.lang.String str10 = course4.toString();
    administrative.Secretary secretary11 = course4.getSecretary();
    course4.setName("hi!");
    java.lang.String str14 = course4.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test378"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    course4.setName("");
    java.util.ArrayList<administrative.Class> arraylist_class13 = course4.getClasses();
    java.lang.String str14 = course4.getName();
    java.lang.String str15 = course4.toString();
    java.lang.String str16 = course4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test379"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    java.util.ArrayList<administrative.Class> arraylist_class10 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array11 = new administrative.Class[] {  };
    boolean b12 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class10, class_array11);
    administrative.Course course13 = new administrative.Course("hi!", arraylist_class10);
    java.lang.String str14 = course13.toString();
    administrative.Secretary secretary15 = null;
    course13.setSecretary(secretary15);
    course13.setName("");
    boolean b19 = course13.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class20 = course13.getClasses();
    course5.setClasses(arraylist_class20);
    java.util.ArrayList<personal.Student> arraylist_student22 = course5.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class24 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array25 = new administrative.Class[] {  };
    boolean b26 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class24, class_array25);
    administrative.Course course27 = new administrative.Course("hi!", arraylist_class24);
    java.lang.String str28 = course27.reportIn();
    java.util.ArrayList<administrative.Class> arraylist_class29 = course27.getClasses();
    course5.setClasses(arraylist_class29);
    java.util.ArrayList<administrative.Class> arraylist_class31 = course5.getClasses();
    administrative.Course course32 = new administrative.Course("", arraylist_class31);
    java.util.ArrayList<administrative.Class> arraylist_class36 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array37 = new administrative.Class[] {  };
    boolean b38 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class36, class_array37);
    administrative.Course course39 = new administrative.Course("hi!", arraylist_class36);
    boolean b40 = course39.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class41 = course39.getClasses();
    administrative.Course course42 = new administrative.Course("", arraylist_class41);
    administrative.Course course43 = new administrative.Course("", arraylist_class41);
    course32.setClasses(arraylist_class41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class41);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test380"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    java.lang.String str11 = course4.getName();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course4.getClasses();
    java.lang.String str13 = course4.getName();
    administrative.Secretary secretary14 = course4.getSecretary();
    java.lang.String str15 = course4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test381"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    java.util.ArrayList<administrative.Class> arraylist_class7 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array8 = new administrative.Class[] {  };
    boolean b9 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class7, class_array8);
    administrative.Course course10 = new administrative.Course("hi!", arraylist_class7);
    course4.setClasses(arraylist_class7);
    java.lang.String str12 = course4.toString();
    administrative.Secretary secretary13 = null;
    course4.setSecretary(secretary13);
    java.util.ArrayList<administrative.Class> arraylist_class17 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array18 = new administrative.Class[] {  };
    boolean b19 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class17, class_array18);
    administrative.Course course20 = new administrative.Course("hi!", arraylist_class17);
    java.lang.String str21 = course20.toString();
    administrative.Secretary secretary22 = null;
    course20.setSecretary(secretary22);
    course20.setName("");
    boolean b26 = course20.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class27 = course20.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class29 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array30 = new administrative.Class[] {  };
    boolean b31 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class29, class_array30);
    administrative.Course course32 = new administrative.Course("hi!", arraylist_class29);
    course20.setClasses(arraylist_class29);
    administrative.Course course34 = new administrative.Course("", arraylist_class29);
    java.util.ArrayList<personal.Student> arraylist_student35 = course34.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class37 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array38 = new administrative.Class[] {  };
    boolean b39 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class37, class_array38);
    administrative.Course course40 = new administrative.Course("hi!", arraylist_class37);
    java.lang.String str41 = course40.toString();
    administrative.Secretary secretary42 = null;
    course40.setSecretary(secretary42);
    course40.setName("");
    boolean b46 = course40.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class47 = course40.getClasses();
    java.util.ArrayList<personal.Student> arraylist_student48 = course40.getStudents();
    java.util.ArrayList<administrative.Class> arraylist_class49 = course40.getClasses();
    course34.setClasses(arraylist_class49);
    course4.setClasses(arraylist_class49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class49);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test382"); }


    java.util.ArrayList<administrative.Class> arraylist_class3 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array4 = new administrative.Class[] {  };
    boolean b5 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class3, class_array4);
    administrative.Course course6 = new administrative.Course("hi!", arraylist_class3);
    java.lang.String str7 = course6.toString();
    java.util.ArrayList<administrative.Class> arraylist_class8 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array9 = new administrative.Class[] {  };
    boolean b10 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class8, class_array9);
    course6.setClasses(arraylist_class8);
    administrative.Course course12 = new administrative.Course("", arraylist_class8);
    administrative.Course course13 = new administrative.Course("", arraylist_class8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test383"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = null;
    course4.setSecretary(secretary6);
    course4.setName("");
    boolean b10 = course4.listClasses();
    course4.setName("");
    java.util.ArrayList<personal.Student> arraylist_student13 = course4.getStudents();
    course4.setName("hi!");
    boolean b16 = course4.listClasses();
    java.lang.String str17 = course4.getName();
    // The following exception was thrown during execution in test generation
    try {
    administrative.Class class19 = course4.pickClass((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "hi!"+ "'", str17.equals("hi!"));

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test384"); }


    java.util.ArrayList<administrative.Class> arraylist_class1 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array2 = new administrative.Class[] {  };
    boolean b3 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class1, class_array2);
    administrative.Course course4 = new administrative.Course("hi!", arraylist_class1);
    java.lang.String str5 = course4.toString();
    administrative.Secretary secretary6 = course4.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class7 = course4.getClasses();
    java.lang.String str8 = course4.reportIn();
    boolean b9 = course4.listClasses();
    java.lang.String str10 = course4.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!"+ "'", str10.equals("hi!"));

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test385"); }


    java.util.ArrayList<administrative.Class> arraylist_class2 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array3 = new administrative.Class[] {  };
    boolean b4 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class2, class_array3);
    administrative.Course course5 = new administrative.Course("hi!", arraylist_class2);
    java.lang.String str6 = course5.toString();
    administrative.Secretary secretary7 = null;
    course5.setSecretary(secretary7);
    course5.setName("");
    boolean b11 = course5.listClasses();
    java.util.ArrayList<administrative.Class> arraylist_class12 = course5.getClasses();
    java.util.ArrayList<administrative.Class> arraylist_class14 = new java.util.ArrayList<administrative.Class>();
    administrative.Class[] class_array15 = new administrative.Class[] {  };
    boolean b16 = java.util.Collections.addAll((java.util.Collection<administrative.Class>)arraylist_class14, class_array15);
    administrative.Course course17 = new administrative.Course("hi!", arraylist_class14);
    course5.setClasses(arraylist_class14);
    java.lang.String str19 = course5.toString();
    java.util.ArrayList<administrative.Class> arraylist_class20 = course5.getClasses();
    administrative.Secretary secretary21 = course5.getSecretary();
    java.util.ArrayList<administrative.Class> arraylist_class22 = course5.getClasses();
    administrative.Course course23 = new administrative.Course("hi!", arraylist_class22);
    java.util.ArrayList<personal.Student> arraylist_student24 = course23.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(class_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(secretary21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_class22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student24);

  }

}
