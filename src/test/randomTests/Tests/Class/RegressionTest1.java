
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test001"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.listRequisites();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    boolean b29 = class17.isAvailable();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student38 = class37.getStudents();
    java.lang.String str39 = class37.getID();
    boolean b40 = class17.addPreRequisite(class37);
    boolean b41 = class7.addPreRequisite(class17);
    java.lang.String str42 = class17.getID();
    java.lang.String str43 = class17.toString();
    int i44 = class17.getCredits();
    administrative.Class class52 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)10, true, false, (int)' ', "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n");
    administrative.Class class60 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i61 = class60.getMinCredits();
    java.lang.String str62 = class60.getName();
    java.lang.String str63 = class60.getID();
    java.lang.String str64 = class60.getTeacher();
    java.lang.String str65 = class60.getName();
    java.lang.String str66 = class60.reportIn();
    java.lang.String str67 = class60.getTeacher();
    boolean b68 = class52.addPreRequisite(class60);
    java.lang.String str69 = class52.listRequisites();
    boolean b70 = class17.addPreRequisite(class52);
    boolean b71 = class17.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str43.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + ""+ "'", str62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + ""+ "'", str63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + ""+ "'", str64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + ""+ "'", str65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + ""+ "'", str66.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + ""+ "'", str67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "|| "+ "'", str69.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test002"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    boolean b32 = class29.isElective();
    java.lang.String str33 = class29.toString();
    java.lang.String str34 = class29.toString();
    java.util.ArrayList<personal.Student> arraylist_student35 = class29.getStudents();
    java.lang.String str36 = class29.getName();
    boolean b37 = class29.isAvailable();
    administrative.Course course38 = null;
    class29.setCourse(course38);
    int i40 = class29.getMinCredits();
    administrative.Class class48 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)100, true, false, (int)'a', "hi!");
    java.lang.String str49 = class48.toString();
    boolean b50 = class29.addPreRequisite(class48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str33.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str34.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str49.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test003"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.getName();
    java.lang.String str13 = class7.getName();
    java.lang.String str14 = class7.toString();
    administrative.Course course15 = null;
    class7.setCourse(course15);
    java.util.ArrayList<personal.Student> arraylist_student17 = class7.getStudents();
    boolean b18 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str14.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test004"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.util.ArrayList<personal.Student> arraylist_student12 = class7.getStudents();
    java.lang.String str13 = class7.listRequisites();
    int i14 = class7.getCredits();
    int i15 = class7.getMinCredits();
    administrative.Class class23 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)10, true, false, (int)' ', "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n");
    administrative.Class class31 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i32 = class31.getMinCredits();
    java.lang.String str33 = class31.getName();
    java.lang.String str34 = class31.getID();
    java.lang.String str35 = class31.getTeacher();
    java.lang.String str36 = class31.getName();
    java.lang.String str37 = class31.reportIn();
    java.lang.String str38 = class31.getTeacher();
    boolean b39 = class23.addPreRequisite(class31);
    administrative.Class class47 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    int i48 = class47.getMinCredits();
    int i49 = class47.getCredits();
    administrative.Course course50 = null;
    class47.setCourse(course50);
    administrative.Class class59 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str60 = class59.listRequisites();
    java.lang.String str61 = class59.getID();
    administrative.Class class69 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i70 = class69.getMinCredits();
    java.lang.String str71 = class69.reportIn();
    administrative.Class class79 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b80 = class69.addPreRequisite(class79);
    boolean b81 = class69.isAvailable();
    administrative.Class class89 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student90 = class89.getStudents();
    java.lang.String str91 = class89.getID();
    boolean b92 = class69.addPreRequisite(class89);
    boolean b93 = class59.addPreRequisite(class89);
    int i94 = class89.getCredits();
    boolean b95 = class47.addPreRequisite(class89);
    boolean b96 = class23.addPreRequisite(class47);
    boolean b97 = class7.addPreRequisite(class47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "|"+ "'", str13.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + ""+ "'", str37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "|"+ "'", str60.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "|"+ "'", str61.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + ""+ "'", str71.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + ""+ "'", str91.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test005"); }


    administrative.Class class7 = new administrative.Class("hi!", "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n", (int)(byte)1, false, false, (int)(short)1, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.reportIn();
    administrative.Class class16 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i17 = class16.getMinCredits();
    java.lang.String str18 = class16.reportIn();
    administrative.Class class26 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b27 = class16.addPreRequisite(class26);
    boolean b28 = class16.isAvailable();
    boolean b29 = class7.addPreRequisite(class16);
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i38 = class37.getMinCredits();
    java.lang.String str39 = class37.reportIn();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b48 = class37.addPreRequisite(class47);
    java.lang.String str49 = class47.listRequisites();
    administrative.Course course50 = null;
    class47.setCourse(course50);
    boolean b52 = class47.isElective();
    java.lang.String str53 = class47.reportIn();
    boolean b54 = class16.addPreRequisite(class47);
    personal.Student student55 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b56 = class16.enroll(student55);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "|"+ "'", str49.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + ""+ "'", str53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test006"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.util.ArrayList<personal.Student> arraylist_student12 = class7.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    java.lang.String str14 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test007"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    boolean b32 = class29.isElective();
    java.lang.String str33 = class29.toString();
    java.lang.String str34 = class29.getTeacher();
    java.lang.String str35 = class29.getID();
    int i36 = class29.getCredits();
    int i37 = class29.getCredits();
    java.lang.String str38 = class29.getTeacher();
    java.lang.String str39 = class29.getTeacher();
    java.lang.String str40 = class29.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str33.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test008"); }


    administrative.Class class7 = new administrative.Class("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n", "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", (int)' ', true, true, 35, "Nome: \nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test009"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    java.lang.String str29 = class27.reportIn();
    boolean b30 = class7.addPreRequisite(class27);
    boolean b31 = class7.isElective();
    boolean b32 = class7.isAvailable();
    boolean b33 = class7.isElective();
    java.lang.String str34 = class7.toString();
    java.lang.String str35 = class7.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str34.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test010"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)(byte)10, false, false, (int)'4', "|| ");
    boolean b8 = class7.isElective();
    personal.Student student9 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = class7.enroll(student9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test011"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    administrative.Course course19 = null;
    class17.setCourse(course19);
    int i21 = class17.getCredits();
    java.lang.String str22 = class17.reportIn();
    java.lang.String str23 = class17.getName();
    personal.Student student24 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b25 = class17.enroll(student24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test012"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.getID();
    boolean b13 = class7.isAvailable();
    personal.Student student14 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = class7.enroll(student14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test013"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.reportIn();
    boolean b13 = class7.isElective();
    java.lang.String str14 = class7.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student15 = class7.getStudents();
    boolean b16 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test014"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.reportIn();
    boolean b13 = class7.isElective();
    java.lang.String str14 = class7.getTeacher();
    java.lang.String str15 = class7.getName();
    boolean b16 = class7.isElective();
    java.util.ArrayList<personal.Student> arraylist_student17 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student17);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test015"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.getName();
    java.lang.String str13 = class7.getName();
    java.lang.String str14 = class7.toString();
    personal.Student student15 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = class7.enroll(student15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str14.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test016"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "|| ", (int)(byte)1, true, true, (int)(byte)1, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    java.lang.String str9 = class7.reportIn();
    java.lang.String str10 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str9.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "|| "+ "'", str10.equals("|| "));

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test017"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student20 = class17.getStudents();
    administrative.Course course21 = null;
    class17.setCourse(course21);
    int i23 = class17.getMinCredits();
    int i24 = class17.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test018"); }


    administrative.Class class7 = new administrative.Class("hi!", "|", (int)(byte)100, false, false, 1, "|| ");
    java.lang.String str8 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test019"); }


    administrative.Class class7 = new administrative.Class("hi!", "", (int)(byte)10, false, true, 32, "");
    administrative.Class class15 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str16 = class15.listRequisites();
    java.lang.String str17 = class15.getTeacher();
    administrative.Course course18 = null;
    class15.setCourse(course18);
    java.lang.String str20 = class15.reportIn();
    java.lang.String str21 = class15.listRequisites();
    boolean b22 = class7.addPreRequisite(class15);
    int i23 = class15.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "|"+ "'", str16.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "|"+ "'", str21.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test020"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.reportIn();
    java.lang.String str20 = class17.getID();
    boolean b21 = class17.isElective();
    boolean b22 = class17.isElective();
    java.lang.String str23 = class17.toString();
    java.lang.String str24 = class17.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str23.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test021"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    java.lang.String str20 = class7.getID();
    java.lang.String str21 = class7.listRequisites();
    java.lang.String str22 = class7.toString();
    java.lang.String str23 = class7.getTeacher();
    personal.Student student24 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b25 = class7.enroll(student24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "|| "+ "'", str21.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str22.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test022"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    int i32 = class29.getMinCredits();
    int i33 = class29.getMinCredits();
    java.lang.String str34 = class29.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test023"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getName();
    int i13 = class7.getMinCredits();
    personal.Student student14 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = class7.enroll(student14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test024"); }


    administrative.Class class7 = new administrative.Class("Nome: hi!\nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", "Nome: hi!\nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", 1, false, false, 1, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n| \nProfessor: \nMatriculado(a)s: \n\n");
    boolean b8 = class7.isElective();
    boolean b9 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test025"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.reportIn();
    java.lang.String str20 = class17.getID();
    java.lang.String str21 = class17.getName();
    java.util.ArrayList<personal.Student> arraylist_student22 = class17.getStudents();
    boolean b23 = class17.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test026"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n", (int)'#', false, false, (int)(byte)-1, "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test027"); }


    administrative.Class class7 = new administrative.Class("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | \nProfessor: \nMatriculado(a)s: \n\n", (int)'#', false, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test028"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class15 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i16 = class15.getMinCredits();
    java.lang.String str17 = class15.getName();
    java.lang.String str18 = class15.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student19 = class15.getStudents();
    boolean b20 = class7.addPreRequisite(class15);
    boolean b21 = class15.isAvailable();
    java.util.ArrayList<personal.Student> arraylist_student22 = class15.getStudents();
    personal.Student student23 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b24 = class15.enroll(student23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student22);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test029"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str8 = class7.getName();
    int i9 = class7.getMinCredits();
    java.lang.String str10 = class7.getTeacher();
    java.lang.String str11 = class7.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!"+ "'", str10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test030"); }


    administrative.Class class7 = new administrative.Class("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n", "Nome: \nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", 0, true, false, (int)(short)0, "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: \nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 0\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: \nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 0\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test031"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    java.lang.String str22 = class17.listRequisites();
    java.lang.String str23 = class17.getID();
    boolean b24 = class17.isElective();
    administrative.Class class25 = null;
    boolean b26 = class17.addPreRequisite(class25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "|"+ "'", str22.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test032"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    int i8 = class7.getMinCredits();
    int i9 = class7.getCredits();
    java.lang.String str10 = class7.toString();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.listRequisites();
    int i13 = class7.getCredits();
    boolean b14 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "|"+ "'", str12.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test033"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n", 0, true, true, (int)(byte)0, "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n");

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test034"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    boolean b62 = class37.isElective();
    int i63 = class37.getMinCredits();
    administrative.Class class71 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str72 = class71.listRequisites();
    administrative.Course course73 = null;
    class71.setCourse(course73);
    java.lang.String str75 = class71.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student76 = class71.getStudents();
    boolean b77 = class37.addPreRequisite(class71);
    int i78 = class37.getMinCredits();
    java.lang.String str79 = class37.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "|"+ "'", str72.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + ""+ "'", str75.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str79.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | \nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test035"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    int i32 = class29.getMinCredits();
    java.lang.String str33 = class29.getID();
    java.util.ArrayList<personal.Student> arraylist_student34 = class29.getStudents();
    java.lang.String str35 = class29.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str35.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test036"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)10, true, false, (int)' ', "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getID();
    int i10 = class7.getCredits();
    java.lang.String str11 = class7.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str9.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test037"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    java.lang.String str10 = class7.toString();
    java.lang.String str11 = class7.toString();
    int i12 = class7.getCredits();
    java.lang.String str13 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str11.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test038"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "Nome: hi!\nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(short)100, false, true, (int)'#', "|Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n| ");

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test039"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    administrative.Class class39 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i40 = class39.getMinCredits();
    java.lang.String str41 = class39.getName();
    java.lang.String str42 = class39.getID();
    java.lang.String str43 = class39.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student44 = class39.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student45 = class39.getStudents();
    boolean b46 = class29.addPreRequisite(class39);
    boolean b47 = class39.isElective();
    java.lang.String str48 = class39.getTeacher();
    java.lang.String str49 = class39.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + ""+ "'", str48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "|"+ "'", str49.equals("|"));

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test040"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.util.ArrayList<personal.Student> arraylist_student12 = class7.getStudents();
    java.lang.String str13 = class7.listRequisites();
    int i14 = class7.getCredits();
    int i15 = class7.getMinCredits();
    int i16 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "|"+ "'", str13.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test041"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    administrative.Course course9 = null;
    class7.setCourse(course9);
    boolean b11 = class7.isElective();
    boolean b12 = class7.isElective();
    int i13 = class7.getCredits();
    administrative.Class class21 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    java.lang.String str31 = class29.getName();
    java.lang.String str32 = class29.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student33 = class29.getStudents();
    boolean b34 = class21.addPreRequisite(class29);
    java.lang.String str35 = class21.listRequisites();
    boolean b36 = class7.addPreRequisite(class21);
    administrative.Class class44 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i45 = class44.getMinCredits();
    java.lang.String str46 = class44.reportIn();
    administrative.Class class54 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b55 = class44.addPreRequisite(class54);
    administrative.Course course56 = null;
    class54.setCourse(course56);
    java.lang.String str58 = class54.getTeacher();
    java.lang.String str59 = class54.reportIn();
    boolean b60 = class54.isElective();
    int i61 = class54.getCredits();
    boolean b62 = class21.addPreRequisite(class54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "|| "+ "'", str35.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + ""+ "'", str46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + ""+ "'", str58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + ""+ "'", str59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test042"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    java.lang.String str10 = class7.getName();
    int i11 = class7.getMinCredits();
    java.lang.String str12 = class7.getName();
    personal.Student student13 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = class7.enroll(student13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test043"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str8 = class7.listRequisites();
    administrative.Class class16 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i17 = class16.getMinCredits();
    java.lang.String str18 = class16.reportIn();
    administrative.Class class26 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b27 = class16.addPreRequisite(class26);
    java.lang.String str28 = class26.reportIn();
    java.lang.String str29 = class26.getID();
    boolean b30 = class26.isElective();
    java.lang.String str31 = class26.getName();
    boolean b32 = class7.addPreRequisite(class26);
    java.lang.String str33 = class26.getName();
    boolean b34 = class26.isAvailable();
    administrative.Course course35 = null;
    class26.setCourse(course35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test044"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)(byte)10, false, false, (int)'4', "|| ");
    boolean b8 = class7.isElective();
    boolean b9 = class7.isElective();
    java.lang.String str10 = class7.getTeacher();
    administrative.Class class18 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "|", 32, true, false, 1, "|| ");
    boolean b19 = class7.addPreRequisite(class18);
    boolean b20 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "|| "+ "'", str10.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test045"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    boolean b12 = class7.isAvailable();
    java.lang.String str13 = class7.reportIn();
    administrative.Course course14 = null;
    class7.setCourse(course14);
    java.util.ArrayList<personal.Student> arraylist_student16 = class7.getStudents();
    boolean b17 = class7.isElective();
    int i18 = class7.getCredits();
    boolean b19 = class7.isAvailable();
    java.lang.String str20 = class7.toString();
    java.lang.String str21 = class7.listRequisites();
    int i22 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str20.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "|"+ "'", str21.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test046"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    java.lang.String str20 = class7.getID();
    java.lang.String str21 = class7.getName();
    java.lang.String str22 = class7.getName();
    boolean b23 = class7.isAvailable();
    java.lang.String str24 = class7.reportIn();
    boolean b25 = class7.isElective();
    java.lang.String str26 = class7.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test047"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.reportIn();
    java.lang.String str20 = class17.getID();
    java.lang.String str21 = class17.getName();
    java.lang.String str22 = class17.reportIn();
    boolean b23 = class17.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test048"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    java.lang.String str10 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.toString();
    java.lang.String str13 = class7.reportIn();
    java.lang.String str14 = class7.listRequisites();
    java.lang.String str15 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str12.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test049"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    boolean b22 = class17.isElective();
    java.lang.String str23 = class17.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student24 = class17.getStudents();
    administrative.Course course25 = null;
    class17.setCourse(course25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student24);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test050"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    int i62 = class37.getCredits();
    administrative.Class class70 = new administrative.Class("", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)0, true, false, (int)'#', "|| ");
    java.lang.String str71 = class70.getTeacher();
    boolean b72 = class37.addPreRequisite(class70);
    administrative.Course course73 = null;
    class70.setCourse(course73);
    java.lang.String str75 = class70.getID();
    java.lang.String str76 = class70.getID();
    java.lang.String str77 = class70.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "|| "+ "'", str71.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str75.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str76.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str77.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test051"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student20 = class17.getStudents();
    administrative.Course course21 = null;
    class17.setCourse(course21);
    java.lang.String str23 = class17.reportIn();
    boolean b24 = class17.isAvailable();
    int i25 = class17.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test052"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "|", 32, true, false, 1, "|| ");
    int i8 = class7.getCredits();
    java.lang.String str9 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test053"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class15 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i16 = class15.getMinCredits();
    java.lang.String str17 = class15.getName();
    java.lang.String str18 = class15.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student19 = class15.getStudents();
    boolean b20 = class7.addPreRequisite(class15);
    personal.Student student21 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b22 = class15.enroll(student21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test054"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class15 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i16 = class15.getMinCredits();
    java.lang.String str17 = class15.getName();
    java.lang.String str18 = class15.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student19 = class15.getStudents();
    boolean b20 = class7.addPreRequisite(class15);
    java.lang.String str21 = class7.getTeacher();
    java.lang.String str22 = class7.reportIn();
    int i23 = class7.getCredits();
    boolean b24 = class7.isElective();
    administrative.Class class32 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i33 = class32.getMinCredits();
    java.lang.String str34 = class32.reportIn();
    administrative.Class class42 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b43 = class32.addPreRequisite(class42);
    boolean b44 = class32.isAvailable();
    administrative.Class class52 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student53 = class52.getStudents();
    java.lang.String str54 = class52.getID();
    boolean b55 = class32.addPreRequisite(class52);
    int i56 = class32.getCredits();
    administrative.Course course57 = null;
    class32.setCourse(course57);
    boolean b59 = class7.addPreRequisite(class32);
    administrative.Course course60 = null;
    class32.setCourse(course60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str21.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str22.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + ""+ "'", str54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test055"); }


    administrative.Class class7 = new administrative.Class("", "", 0, false, true, (int)(short)-1, "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.getTeacher();
    boolean b9 = class7.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test056"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "Nome: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", (int)(short)10, false, true, 1, "");
    personal.Student student8 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b9 = class7.enroll(student8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test057"); }


    administrative.Class class7 = new administrative.Class("Nome: hi!\nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", (int)(short)0, false, true, (int)(byte)-1, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test058"); }


    administrative.Class class7 = new administrative.Class("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", (int)(short)10, false, true, (int)(short)10, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: ||| \nProfessor: \nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test059"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    boolean b62 = class37.isElective();
    int i63 = class37.getMinCredits();
    administrative.Class class71 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i72 = class71.getMinCredits();
    java.lang.String str73 = class71.reportIn();
    administrative.Class class81 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b82 = class71.addPreRequisite(class81);
    boolean b83 = class71.isAvailable();
    java.lang.String str84 = class71.getID();
    java.lang.String str85 = class71.listRequisites();
    boolean b86 = class71.isAvailable();
    boolean b87 = class37.addPreRequisite(class71);
    java.lang.String str88 = class37.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + ""+ "'", str73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + ""+ "'", str84.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "|| "+ "'", str85.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str88.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | \nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test060"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    int i20 = class7.getCredits();
    java.lang.String str21 = class7.getName();
    java.lang.String str22 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test061"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    int i8 = class7.getMinCredits();
    int i9 = class7.getCredits();
    java.lang.String str10 = class7.toString();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.reportIn();
    boolean b13 = class7.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test062"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.getName();
    java.lang.String str13 = class7.getName();
    java.lang.String str14 = class7.toString();
    administrative.Course course15 = null;
    class7.setCourse(course15);
    java.util.ArrayList<personal.Student> arraylist_student17 = class7.getStudents();
    personal.Student student18 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b19 = class7.enroll(student18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str14.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student17);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test063"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    int i8 = class7.getMinCredits();
    int i9 = class7.getCredits();
    java.lang.String str10 = class7.toString();
    boolean b11 = class7.isAvailable();
    java.lang.String str12 = class7.getID();
    java.lang.String str13 = class7.toString();
    java.lang.String str14 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "|"+ "'", str12.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str13.equals("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test064"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    boolean b22 = class17.isElective();
    java.lang.String str23 = class17.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student24 = class17.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student25 = class17.getStudents();
    int i26 = class17.getMinCredits();
    java.lang.String str27 = class17.getName();
    int i28 = class17.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test065"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    java.lang.String str9 = class7.getID();
    java.lang.String str10 = class7.toString();
    administrative.Course course11 = null;
    class7.setCourse(course11);
    administrative.Class class20 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i21 = class20.getMinCredits();
    java.lang.String str22 = class20.reportIn();
    administrative.Class class30 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b31 = class20.addPreRequisite(class30);
    java.lang.String str32 = class30.reportIn();
    int i33 = class30.getMinCredits();
    int i34 = class30.getMinCredits();
    boolean b35 = class7.addPreRequisite(class30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test066"); }


    administrative.Class class7 = new administrative.Class("hi!", "|", (int)(byte)100, true, true, (int)(byte)-1, "|| ");
    boolean b8 = class7.isAvailable();
    personal.Student student9 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = class7.enroll(student9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test067"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    java.lang.String str29 = class27.reportIn();
    boolean b30 = class7.addPreRequisite(class27);
    boolean b31 = class7.isElective();
    boolean b32 = class7.isAvailable();
    boolean b33 = class7.isElective();
    java.lang.String str34 = class7.toString();
    boolean b35 = class7.isAvailable();
    java.lang.String str36 = class7.toString();
    java.lang.String str37 = class7.listRequisites();
    boolean b38 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str34.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str36.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "|| "+ "'", str37.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test068"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)(byte)10, false, false, (int)'4', "|| ");
    boolean b8 = class7.isElective();
    boolean b9 = class7.isElective();
    java.lang.String str10 = class7.getTeacher();
    administrative.Class class18 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "|", 32, true, false, 1, "|| ");
    boolean b19 = class7.addPreRequisite(class18);
    int i20 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "|| "+ "'", str10.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test069"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    int i62 = class37.getCredits();
    java.lang.String str63 = class37.getTeacher();
    java.lang.String str64 = class37.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + ""+ "'", str63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + ""+ "'", str64.equals(""));

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test070"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    boolean b62 = class37.isElective();
    java.lang.String str63 = class37.getID();
    boolean b64 = class37.isElective();
    java.lang.String str65 = class37.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + ""+ "'", str63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + ""+ "'", str65.equals(""));

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test071"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student28 = class27.getStudents();
    java.lang.String str29 = class27.getID();
    boolean b30 = class7.addPreRequisite(class27);
    administrative.Class class38 = new administrative.Class("", "", (int)'4', false, false, (int)(short)10, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");
    java.util.ArrayList<personal.Student> arraylist_student39 = class38.getStudents();
    java.lang.String str40 = class38.getID();
    administrative.Class class48 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "|", 32, true, false, 1, "|| ");
    boolean b49 = class38.addPreRequisite(class48);
    boolean b50 = class7.addPreRequisite(class38);
    boolean b51 = class7.isAvailable();
    java.util.ArrayList<personal.Student> arraylist_student52 = class7.getStudents();
    java.lang.String str53 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "|| | | "+ "'", str53.equals("|| | | "));

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test072"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.getName();
    administrative.Course course13 = null;
    class7.setCourse(course13);
    administrative.Class class22 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i23 = class22.getMinCredits();
    java.lang.String str24 = class22.reportIn();
    administrative.Class class32 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b33 = class22.addPreRequisite(class32);
    boolean b34 = class22.isAvailable();
    administrative.Class class42 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student43 = class42.getStudents();
    java.lang.String str44 = class42.getID();
    boolean b45 = class22.addPreRequisite(class42);
    int i46 = class22.getCredits();
    java.lang.String str47 = class22.getID();
    boolean b48 = class7.addPreRequisite(class22);
    java.lang.String str49 = class22.getID();
    java.lang.String str50 = class22.getName();
    personal.Student student51 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b52 = class22.enroll(student51);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + ""+ "'", str47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + ""+ "'", str50.equals(""));

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test073"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "|| ", (int)(byte)1, true, true, (int)(byte)1, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    int i8 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test074"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    java.lang.String str62 = class37.toString();
    java.lang.String str63 = class37.listRequisites();
    java.lang.String str64 = class37.listRequisites();
    administrative.Class class72 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", 0, true, false, (int)(byte)1, "|");
    java.util.ArrayList<personal.Student> arraylist_student73 = class72.getStudents();
    boolean b74 = class37.addPreRequisite(class72);
    java.lang.String str75 = class37.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str62.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "|| "+ "'", str63.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "|| "+ "'", str64.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + ""+ "'", str75.equals(""));

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test075"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.reportIn();
    java.lang.String str11 = class7.listRequisites();
    java.lang.String str12 = class7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "|"+ "'", str11.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str12.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test076"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    java.lang.String str62 = class17.getName();
    java.util.ArrayList<personal.Student> arraylist_student63 = class17.getStudents();
    java.lang.String str64 = class17.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + ""+ "'", str62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + ""+ "'", str64.equals(""));

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test077"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    administrative.Course course9 = null;
    class7.setCourse(course9);
    boolean b11 = class7.isElective();
    boolean b12 = class7.isElective();
    int i13 = class7.getCredits();
    administrative.Class class21 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    java.lang.String str31 = class29.getName();
    java.lang.String str32 = class29.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student33 = class29.getStudents();
    boolean b34 = class21.addPreRequisite(class29);
    java.lang.String str35 = class21.listRequisites();
    boolean b36 = class7.addPreRequisite(class21);
    java.util.ArrayList<personal.Student> arraylist_student37 = class21.getStudents();
    java.lang.String str38 = class21.listRequisites();
    int i39 = class21.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "|| "+ "'", str35.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "|| "+ "'", str38.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 100);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test078"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    java.lang.String str29 = class27.reportIn();
    boolean b30 = class7.addPreRequisite(class27);
    java.util.ArrayList<personal.Student> arraylist_student31 = class27.getStudents();
    administrative.Class class39 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i40 = class39.getMinCredits();
    java.lang.String str41 = class39.reportIn();
    administrative.Class class49 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b50 = class39.addPreRequisite(class49);
    boolean b51 = class39.isAvailable();
    java.lang.String str52 = class39.toString();
    boolean b53 = class27.addPreRequisite(class39);
    int i54 = class39.getCredits();
    java.lang.String str55 = class39.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str52.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + ""+ "'", str55.equals(""));

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test079"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.listRequisites();
    java.lang.String str13 = class7.getName();
    java.lang.String str14 = class7.getName();
    int i15 = class7.getCredits();
    java.util.ArrayList<personal.Student> arraylist_student16 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "|"+ "'", str12.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student16);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test080"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student28 = class27.getStudents();
    java.lang.String str29 = class27.getID();
    boolean b30 = class7.addPreRequisite(class27);
    int i31 = class7.getCredits();
    java.lang.String str32 = class7.getName();
    java.lang.String str33 = class7.getID();
    java.lang.String str34 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "|| | "+ "'", str34.equals("|| | "));

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test081"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class7.getName();
    java.lang.String str20 = class7.listRequisites();
    java.lang.String str21 = class7.reportIn();
    java.lang.String str22 = class7.reportIn();
    java.lang.String str23 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "|| "+ "'", str20.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "|| "+ "'", str23.equals("|| "));

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test082"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    java.lang.String str10 = class7.getName();
    java.lang.String str11 = class7.getID();
    java.lang.String str12 = class7.getTeacher();
    int i13 = class7.getCredits();
    java.lang.String str14 = class7.getTeacher();
    boolean b15 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test083"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    int i9 = class7.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test084"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    java.lang.String str9 = class7.getID();
    java.lang.String str10 = class7.toString();
    administrative.Class class18 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i19 = class18.getMinCredits();
    java.lang.String str20 = class18.reportIn();
    administrative.Class class28 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b29 = class18.addPreRequisite(class28);
    java.util.ArrayList<personal.Student> arraylist_student30 = class28.getStudents();
    boolean b31 = class7.addPreRequisite(class28);
    java.util.ArrayList<personal.Student> arraylist_student32 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student32);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test085"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    java.lang.String str9 = class7.reportIn();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str9.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test086"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", "Nome: \nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", (int)(short)100, true, false, 10, "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");
    int i8 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 100);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test087"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    java.lang.String str9 = class7.getID();
    boolean b10 = class7.isAvailable();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test088"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    administrative.Course course9 = null;
    class7.setCourse(course9);
    java.lang.String str11 = class7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str11.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test089"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    java.lang.String str9 = class7.getID();
    java.lang.String str10 = class7.toString();
    administrative.Class class18 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i19 = class18.getMinCredits();
    java.lang.String str20 = class18.reportIn();
    administrative.Class class28 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b29 = class18.addPreRequisite(class28);
    java.util.ArrayList<personal.Student> arraylist_student30 = class28.getStudents();
    boolean b31 = class7.addPreRequisite(class28);
    int i32 = class28.getCredits();
    personal.Student student33 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b34 = class28.enroll(student33);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test090"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class15 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i16 = class15.getMinCredits();
    java.lang.String str17 = class15.getName();
    java.lang.String str18 = class15.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student19 = class15.getStudents();
    boolean b20 = class7.addPreRequisite(class15);
    java.lang.String str21 = class7.getTeacher();
    java.lang.String str22 = class7.reportIn();
    java.lang.String str23 = class7.getID();
    personal.Student student24 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b25 = class7.enroll(student24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str21.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str22.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str23.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test091"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getName();
    java.lang.String str13 = class7.reportIn();
    java.lang.String str14 = class7.getTeacher();
    java.lang.String str15 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test092"); }


    administrative.Class class7 = new administrative.Class("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n", "hi!", (int)(short)-1, false, false, (int)(short)10, "hi!");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Nome: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nC\u00F3digo: hi!\nCr\u00E9ditos: -1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str9.equals("Nome: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nC\u00F3digo: hi!\nCr\u00E9ditos: -1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test093"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    java.lang.String str29 = class27.reportIn();
    boolean b30 = class7.addPreRequisite(class27);
    boolean b31 = class7.isElective();
    int i32 = class7.getCredits();
    java.lang.String str33 = class7.getName();
    boolean b34 = class7.isAvailable();
    java.lang.String str35 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test094"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    boolean b62 = class37.isElective();
    int i63 = class37.getMinCredits();
    int i64 = class37.getCredits();
    java.lang.String str65 = class37.getName();
    administrative.Course course66 = null;
    class37.setCourse(course66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + ""+ "'", str65.equals(""));

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test095"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class15 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i16 = class15.getMinCredits();
    java.lang.String str17 = class15.getName();
    java.lang.String str18 = class15.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student19 = class15.getStudents();
    boolean b20 = class7.addPreRequisite(class15);
    java.lang.String str21 = class15.getID();
    java.lang.String str22 = class15.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test096"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)(byte)10, false, false, (int)'4', "|| ");
    boolean b8 = class7.isAvailable();
    java.lang.String str9 = class7.toString();
    java.lang.String str10 = class7.getTeacher();
    administrative.Course course11 = null;
    class7.setCourse(course11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"+ "'", str9.equals("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "|| "+ "'", str10.equals("|| "));

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test097"); }


    administrative.Class class7 = new administrative.Class("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: || \nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | | \nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)0, true, false, 0, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test098"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.listRequisites();
    int i10 = class7.getCredits();
    java.lang.String str11 = class7.getID();
    java.lang.String str12 = class7.toString();
    boolean b13 = class7.isElective();
    java.lang.String str14 = class7.toString();
    administrative.Class class22 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i23 = class22.getMinCredits();
    java.lang.String str24 = class22.reportIn();
    administrative.Class class32 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b33 = class22.addPreRequisite(class32);
    java.lang.String str34 = class32.listRequisites();
    administrative.Class class42 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i43 = class42.getMinCredits();
    java.lang.String str44 = class42.reportIn();
    administrative.Class class52 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b53 = class42.addPreRequisite(class52);
    java.lang.String str54 = class52.listRequisites();
    administrative.Class class62 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i63 = class62.getMinCredits();
    java.lang.String str64 = class62.reportIn();
    administrative.Class class72 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b73 = class62.addPreRequisite(class72);
    boolean b74 = class52.addPreRequisite(class72);
    java.lang.String str75 = class52.getTeacher();
    boolean b76 = class32.addPreRequisite(class52);
    java.lang.String str77 = class32.getName();
    java.lang.String str78 = class32.toString();
    int i79 = class32.getMinCredits();
    boolean b80 = class7.addPreRequisite(class32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str12.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str14.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "|"+ "'", str34.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "|"+ "'", str54.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + ""+ "'", str64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + ""+ "'", str75.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + ""+ "'", str77.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str78.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test099"); }


    administrative.Class class7 = new administrative.Class("|| | ", "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", 0, false, true, (int)(short)1, "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");
    personal.Student student8 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b9 = class7.enroll(student8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test100"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getName();
    java.lang.String str13 = class7.toString();
    int i14 = class7.getMinCredits();
    administrative.Course course15 = null;
    class7.setCourse(course15);
    java.lang.String str17 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str13.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "|"+ "'", str17.equals("|"));

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test101"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    java.lang.String str14 = class7.listRequisites();
    administrative.Class class22 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)100, true, false, (int)'a', "hi!");
    java.lang.String str23 = class22.toString();
    boolean b24 = class7.addPreRequisite(class22);
    administrative.Class class32 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i33 = class32.getMinCredits();
    java.lang.String str34 = class32.reportIn();
    administrative.Class class42 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b43 = class32.addPreRequisite(class42);
    administrative.Course course44 = null;
    class42.setCourse(course44);
    java.lang.String str46 = class42.getTeacher();
    int i47 = class42.getCredits();
    boolean b48 = class22.addPreRequisite(class42);
    administrative.Class class56 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i57 = class56.getMinCredits();
    java.lang.String str58 = class56.reportIn();
    administrative.Class class66 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b67 = class56.addPreRequisite(class66);
    java.lang.String str68 = class66.listRequisites();
    administrative.Course course69 = null;
    class66.setCourse(course69);
    administrative.Class class78 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i79 = class78.getMinCredits();
    boolean b80 = class66.addPreRequisite(class78);
    int i81 = class78.getMinCredits();
    int i82 = class78.getMinCredits();
    administrative.Course course83 = null;
    class78.setCourse(course83);
    java.lang.String str85 = class78.reportIn();
    boolean b86 = class22.addPreRequisite(class78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str23.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + ""+ "'", str46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + ""+ "'", str58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "|"+ "'", str68.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + ""+ "'", str85.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test102"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    boolean b32 = class29.isElective();
    java.lang.String str33 = class29.toString();
    java.lang.String str34 = class29.getTeacher();
    java.lang.String str35 = class29.getID();
    int i36 = class29.getCredits();
    int i37 = class29.getCredits();
    java.lang.String str38 = class29.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str33.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test103"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    java.lang.String str20 = class7.getID();
    java.lang.String str21 = class7.listRequisites();
    java.lang.String str22 = class7.reportIn();
    java.lang.String str23 = class7.reportIn();
    int i24 = class7.getCredits();
    java.util.ArrayList<personal.Student> arraylist_student25 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "|| "+ "'", str21.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student25);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test104"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 0\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", 32, false, true, 0, "Nome: || \nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 0\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n");

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test105"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    boolean b32 = class29.isElective();
    java.lang.String str33 = class29.toString();
    java.lang.String str34 = class29.getTeacher();
    java.lang.String str35 = class29.getID();
    int i36 = class29.getCredits();
    int i37 = class29.getCredits();
    java.lang.String str38 = class29.getTeacher();
    java.lang.String str39 = class29.getTeacher();
    java.lang.String str40 = class29.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student41 = class29.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str33.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student41);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test106"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    int i8 = class7.getMinCredits();
    administrative.Class class16 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i17 = class16.getMinCredits();
    java.lang.String str18 = class16.getName();
    java.lang.String str19 = class16.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student20 = class16.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student21 = class16.getStudents();
    java.lang.String str22 = class16.getTeacher();
    java.lang.String str23 = class16.getName();
    boolean b24 = class7.addPreRequisite(class16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test107"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getID();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.getName();
    java.lang.String str13 = class7.getTeacher();
    java.lang.String str14 = class7.toString();
    boolean b15 = class7.isElective();
    java.lang.String str16 = class7.getTeacher();
    administrative.Course course17 = null;
    class7.setCourse(course17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "|"+ "'", str12.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "hi!"+ "'", str13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str14.equals("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "hi!"+ "'", str16.equals("hi!"));

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test108"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.reportIn();
    boolean b13 = class7.isElective();
    java.lang.String str14 = class7.getTeacher();
    personal.Student student15 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = class7.enroll(student15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test109"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class17.isElective();
    java.lang.String str20 = class17.reportIn();
    boolean b21 = class17.isElective();
    java.lang.String str22 = class17.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test110"); }


    administrative.Class class7 = new administrative.Class("hi!", "", (int)(byte)10, false, true, 32, "");
    administrative.Class class15 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str16 = class15.listRequisites();
    java.lang.String str17 = class15.getTeacher();
    administrative.Course course18 = null;
    class15.setCourse(course18);
    java.lang.String str20 = class15.reportIn();
    java.lang.String str21 = class15.listRequisites();
    boolean b22 = class7.addPreRequisite(class15);
    administrative.Class class30 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b31 = class30.isElective();
    java.lang.String str32 = class30.listRequisites();
    java.lang.String str33 = class30.reportIn();
    int i34 = class30.getCredits();
    int i35 = class30.getCredits();
    java.lang.String str36 = class30.toString();
    boolean b37 = class15.addPreRequisite(class30);
    java.lang.String str38 = class30.getName();
    java.lang.String str39 = class30.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "|"+ "'", str16.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "|"+ "'", str21.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "|"+ "'", str32.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str36.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test111"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    java.lang.String str10 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.toString();
    administrative.Class class20 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i21 = class20.getMinCredits();
    java.lang.String str22 = class20.getName();
    java.lang.String str23 = class20.getID();
    java.lang.String str24 = class20.getTeacher();
    java.lang.String str25 = class20.getName();
    java.util.ArrayList<personal.Student> arraylist_student26 = class20.getStudents();
    boolean b27 = class7.addPreRequisite(class20);
    administrative.Class class35 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i36 = class35.getMinCredits();
    java.lang.String str37 = class35.getName();
    java.lang.String str38 = class35.getID();
    java.lang.String str39 = class35.getTeacher();
    java.lang.String str40 = class35.getName();
    java.lang.String str41 = class35.toString();
    boolean b42 = class7.addPreRequisite(class35);
    java.lang.String str43 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student44 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str12.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + ""+ "'", str37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str41.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student44);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test112"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student12 = class7.getStudents();
    int i13 = class7.getMinCredits();
    java.lang.String str14 = class7.toString();
    personal.Student student15 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = class7.enroll(student15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str14.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test113"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    java.lang.String str14 = class7.listRequisites();
    administrative.Class class22 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)100, true, false, (int)'a', "hi!");
    java.lang.String str23 = class22.toString();
    boolean b24 = class7.addPreRequisite(class22);
    java.lang.String str25 = class22.getTeacher();
    java.lang.String str26 = class22.getTeacher();
    boolean b27 = class22.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str23.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "hi!"+ "'", str25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "hi!"+ "'", str26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test114"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b8 = class7.isElective();
    java.util.ArrayList<personal.Student> arraylist_student9 = class7.getStudents();
    boolean b10 = class7.isElective();
    int i11 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test115"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.reportIn();
    java.lang.String str20 = class17.getTeacher();
    java.lang.String str21 = class17.getID();
    java.lang.String str22 = class17.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test116"); }


    administrative.Class class7 = new administrative.Class("|| | ", "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", (int)(short)100, true, false, 32, "Nome: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test117"); }


    administrative.Class class7 = new administrative.Class("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", 97, false, true, 1, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: ||| \nProfessor: \nMatriculado(a)s: \n\n");

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test118"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", 0, true, false, (int)(byte)1, "|");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test119"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    java.lang.String str29 = class27.reportIn();
    boolean b30 = class7.addPreRequisite(class27);
    java.util.ArrayList<personal.Student> arraylist_student31 = class27.getStudents();
    boolean b32 = class27.isElective();
    java.util.ArrayList<personal.Student> arraylist_student33 = class27.getStudents();
    boolean b34 = class27.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test120"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)10, true, false, (int)' ', "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n");
    administrative.Class class15 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i16 = class15.getMinCredits();
    java.lang.String str17 = class15.getName();
    java.lang.String str18 = class15.getID();
    java.lang.String str19 = class15.getTeacher();
    java.lang.String str20 = class15.getName();
    java.lang.String str21 = class15.reportIn();
    java.lang.String str22 = class15.getTeacher();
    boolean b23 = class7.addPreRequisite(class15);
    java.util.ArrayList<personal.Student> arraylist_student24 = class7.getStudents();
    java.lang.String str25 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "|| "+ "'", str25.equals("|| "));

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test121"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student20 = class17.getStudents();
    java.lang.String str21 = class17.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test122"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)10, true, false, (int)' ', "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n");
    int i8 = class7.getCredits();
    administrative.Course course9 = null;
    class7.setCourse(course9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test123"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student12 = class7.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    int i14 = class7.getCredits();
    java.lang.String str15 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test124"); }


    administrative.Class class7 = new administrative.Class("Nome: hi!\nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", "Nome: hi!\nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", 0, false, false, 10, "");
    int i8 = class7.getMinCredits();
    int i9 = class7.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test125"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "Nome: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", (int)(short)10, false, true, 1, "");
    boolean b8 = class7.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test126"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getID();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    boolean b29 = class17.isAvailable();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student38 = class37.getStudents();
    java.lang.String str39 = class37.getID();
    boolean b40 = class17.addPreRequisite(class37);
    boolean b41 = class7.addPreRequisite(class37);
    int i42 = class37.getCredits();
    java.util.ArrayList<personal.Student> arraylist_student43 = class37.getStudents();
    java.lang.String str44 = class37.getName();
    personal.Student student45 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b46 = class37.enroll(student45);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test127"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    int i12 = class7.getCredits();
    java.lang.String str13 = class7.listRequisites();
    boolean b14 = class7.isAvailable();
    java.lang.String str15 = class7.getName();
    administrative.Course course16 = null;
    class7.setCourse(course16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "|"+ "'", str13.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test128"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "|", (int)'#', false, true, 52, "");
    java.lang.String str8 = class7.getName();
    java.lang.String str9 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test129"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.listRequisites();
    administrative.Class class17 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str18 = class17.listRequisites();
    administrative.Class class26 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i27 = class26.getMinCredits();
    java.lang.String str28 = class26.reportIn();
    administrative.Class class36 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b37 = class26.addPreRequisite(class36);
    java.lang.String str38 = class36.reportIn();
    java.lang.String str39 = class36.getID();
    boolean b40 = class36.isElective();
    java.lang.String str41 = class36.getName();
    boolean b42 = class17.addPreRequisite(class36);
    boolean b43 = class7.addPreRequisite(class17);
    java.lang.String str44 = class17.getTeacher();
    int i45 = class17.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "|"+ "'", str18.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "hi!"+ "'", str44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 32);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test130"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    boolean b39 = class17.addPreRequisite(class37);
    int i40 = class17.getCredits();
    int i41 = class17.getCredits();
    boolean b42 = class17.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test131"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.getID();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    boolean b14 = class7.isAvailable();
    java.lang.String str15 = class7.reportIn();
    java.lang.String str16 = class7.getID();
    java.lang.String str17 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test132"); }


    administrative.Class class7 = new administrative.Class("", "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n", 97, true, true, 10, "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test133"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getID();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.getName();
    java.lang.String str13 = class7.getTeacher();
    java.lang.String str14 = class7.toString();
    administrative.Course course15 = null;
    class7.setCourse(course15);
    java.lang.String str17 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "|"+ "'", str12.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "hi!"+ "'", str13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str14.equals("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "|"+ "'", str17.equals("|"));

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test134"); }


    administrative.Class class7 = new administrative.Class("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "Nome: || \nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 0\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n", 100, true, false, 100, "Nome: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 35\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test135"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student28 = class27.getStudents();
    java.lang.String str29 = class27.getID();
    boolean b30 = class7.addPreRequisite(class27);
    administrative.Class class38 = new administrative.Class("", "", (int)'4', false, false, (int)(short)10, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");
    java.util.ArrayList<personal.Student> arraylist_student39 = class38.getStudents();
    java.lang.String str40 = class38.getID();
    administrative.Class class48 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "|", 32, true, false, 1, "|| ");
    boolean b49 = class38.addPreRequisite(class48);
    boolean b50 = class7.addPreRequisite(class38);
    java.lang.String str51 = class38.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + ""+ "'", str51.equals(""));

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test136"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    java.lang.String str29 = class27.reportIn();
    boolean b30 = class7.addPreRequisite(class27);
    boolean b31 = class7.isElective();
    int i32 = class7.getCredits();
    java.lang.String str33 = class7.getName();
    boolean b34 = class7.isAvailable();
    int i35 = class7.getMinCredits();
    boolean b36 = class7.isAvailable();
    java.lang.String str37 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + ""+ "'", str37.equals(""));

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test137"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "|| ", (int)(short)10, true, true, (int)(short)10, "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.reportIn();
    boolean b9 = class7.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test138"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str8 = class7.listRequisites();
    administrative.Class class16 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i17 = class16.getMinCredits();
    java.lang.String str18 = class16.reportIn();
    administrative.Class class26 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b27 = class16.addPreRequisite(class26);
    java.lang.String str28 = class26.reportIn();
    java.lang.String str29 = class26.getID();
    boolean b30 = class26.isElective();
    java.lang.String str31 = class26.getName();
    boolean b32 = class7.addPreRequisite(class26);
    java.lang.String str33 = class7.reportIn();
    administrative.Class class41 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i42 = class41.getMinCredits();
    java.lang.String str43 = class41.reportIn();
    administrative.Class class51 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b52 = class41.addPreRequisite(class51);
    java.lang.String str53 = class51.listRequisites();
    administrative.Course course54 = null;
    class51.setCourse(course54);
    java.lang.String str56 = class51.listRequisites();
    java.lang.String str57 = class51.getID();
    boolean b58 = class51.isElective();
    java.lang.String str59 = class51.reportIn();
    boolean b60 = class7.addPreRequisite(class51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "|"+ "'", str53.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "|"+ "'", str56.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + ""+ "'", str57.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + ""+ "'", str59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test139"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: ||| \nProfessor: \nMatriculado(a)s: \n\n", 0, true, true, (int)(short)10, "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test140"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "Nome: hi!\nC\u00F3digo: |\nCr\u00E9ditos: 100\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", (int)(byte)0, true, false, (int)(short)10, "|| | ");

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test141"); }


    administrative.Class class7 = new administrative.Class("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", 1, true, false, 100, "|| ");

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test142"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str8 = class7.getName();
    java.lang.String str9 = class7.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student10 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!"+ "'", str9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student10);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test143"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "", 10, false, true, 0, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    personal.Student student9 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = class7.enroll(student9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test144"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    administrative.Class class26 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i27 = class26.getMinCredits();
    java.lang.String str28 = class26.getName();
    java.lang.String str29 = class26.getID();
    java.lang.String str30 = class26.getTeacher();
    java.lang.String str31 = class26.getName();
    boolean b32 = class26.isAvailable();
    boolean b33 = class7.addPreRequisite(class26);
    java.lang.String str34 = class26.listRequisites();
    java.lang.String str35 = class26.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + ""+ "'", str30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "|"+ "'", str34.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "|"+ "'", str35.equals("|"));

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test145"); }


    administrative.Class class7 = new administrative.Class("Nome: |\nC\u00F3digo: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "Nome: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 52\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: ||| | \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", 0, false, true, (int)(byte)-1, "Nome: Nome: hi!\nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test146"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    administrative.Class class39 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i40 = class39.getMinCredits();
    java.lang.String str41 = class39.getName();
    java.lang.String str42 = class39.getID();
    java.lang.String str43 = class39.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student44 = class39.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student45 = class39.getStudents();
    boolean b46 = class29.addPreRequisite(class39);
    boolean b47 = class39.isElective();
    administrative.Class class55 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i56 = class55.getMinCredits();
    boolean b57 = class55.isAvailable();
    administrative.Course course58 = null;
    class55.setCourse(course58);
    java.lang.String str60 = class55.getID();
    java.util.ArrayList<personal.Student> arraylist_student61 = class55.getStudents();
    boolean b62 = class55.isAvailable();
    boolean b63 = class55.isAvailable();
    boolean b64 = class39.addPreRequisite(class55);
    administrative.Course course65 = null;
    class39.setCourse(course65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test147"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    boolean b32 = class29.isElective();
    java.lang.String str33 = class29.toString();
    java.lang.String str34 = class29.getTeacher();
    java.lang.String str35 = class29.getID();
    boolean b36 = class29.isElective();
    java.lang.String str37 = class29.listRequisites();
    int i38 = class29.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str33.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "|"+ "'", str37.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test148"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    int i12 = class7.getCredits();
    administrative.Class class20 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i21 = class20.getMinCredits();
    java.lang.String str22 = class20.getName();
    administrative.Class class30 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i31 = class30.getMinCredits();
    java.lang.String str32 = class30.reportIn();
    administrative.Class class40 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b41 = class30.addPreRequisite(class40);
    java.lang.String str42 = class40.reportIn();
    boolean b43 = class20.addPreRequisite(class40);
    boolean b44 = class20.isElective();
    int i45 = class20.getCredits();
    java.lang.String str46 = class20.getName();
    boolean b47 = class20.isAvailable();
    int i48 = class20.getMinCredits();
    boolean b49 = class7.addPreRequisite(class20);
    int i50 = class7.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + ""+ "'", str46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test149"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    java.lang.String str9 = class7.getID();
    java.lang.String str10 = class7.listRequisites();
    java.lang.String str11 = class7.toString();
    java.util.ArrayList<personal.Student> arraylist_student12 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "|"+ "'", str10.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str11.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test150"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    administrative.Course course8 = null;
    class7.setCourse(course8);
    java.lang.String str10 = class7.getName();
    int i11 = class7.getMinCredits();
    int i12 = class7.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "|"+ "'", str10.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test151"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.reportIn();
    java.lang.String str20 = class17.getID();
    java.util.ArrayList<personal.Student> arraylist_student21 = class17.getStudents();
    java.lang.String str22 = class17.listRequisites();
    int i23 = class17.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "|"+ "'", str22.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test152"); }


    administrative.Class class7 = new administrative.Class("hi!", "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n", (int)(byte)1, false, false, (int)(short)1, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test153"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", "|", (int)(byte)10, false, false, (int)(byte)-1, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class15 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    administrative.Course course16 = null;
    class15.setCourse(course16);
    java.lang.String str18 = class15.getName();
    boolean b19 = class15.isAvailable();
    boolean b20 = class7.addPreRequisite(class15);
    int i21 = class15.getCredits();
    administrative.Class class29 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    administrative.Course course30 = null;
    class29.setCourse(course30);
    boolean b32 = class15.addPreRequisite(class29);
    java.lang.String str33 = class15.toString();
    personal.Student student34 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b35 = class15.enroll(student34);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "|"+ "'", str18.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str33.equals("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test154"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    administrative.Course course19 = null;
    class17.setCourse(course19);
    java.lang.String str21 = class17.getTeacher();
    java.lang.String str22 = class17.reportIn();
    boolean b23 = class17.isElective();
    int i24 = class17.getCredits();
    java.lang.String str25 = class17.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test155"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(short)100, false, true, (int)(short)1, "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test156"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    java.lang.String str20 = class17.getTeacher();
    administrative.Class class28 = new administrative.Class("|| Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n| ", "Nome: || \nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 0\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n", (int)(short)10, true, true, 1, "Nome: hi!\nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");
    boolean b29 = class17.addPreRequisite(class28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test157"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.getName();
    java.lang.String str30 = class27.getID();
    java.lang.String str31 = class27.getTeacher();
    java.lang.String str32 = class27.getName();
    java.lang.String str33 = class27.reportIn();
    boolean b34 = class7.addPreRequisite(class27);
    boolean b35 = class7.isAvailable();
    int i36 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + ""+ "'", str30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test158"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b8 = class7.isElective();
    administrative.Class class16 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i17 = class16.getMinCredits();
    java.lang.String str18 = class16.reportIn();
    administrative.Class class26 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b27 = class16.addPreRequisite(class26);
    java.lang.String str28 = class26.listRequisites();
    administrative.Class class36 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i37 = class36.getMinCredits();
    java.lang.String str38 = class36.reportIn();
    administrative.Class class46 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b47 = class36.addPreRequisite(class46);
    java.lang.String str48 = class46.listRequisites();
    administrative.Class class56 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i57 = class56.getMinCredits();
    java.lang.String str58 = class56.reportIn();
    administrative.Class class66 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b67 = class56.addPreRequisite(class66);
    boolean b68 = class46.addPreRequisite(class66);
    java.lang.String str69 = class46.getTeacher();
    boolean b70 = class26.addPreRequisite(class46);
    boolean b71 = class46.isElective();
    int i72 = class46.getMinCredits();
    int i73 = class46.getCredits();
    java.lang.String str74 = class46.reportIn();
    boolean b75 = class7.addPreRequisite(class46);
    administrative.Course course76 = null;
    class7.setCourse(course76);
    java.lang.String str78 = class7.listRequisites();
    java.lang.String str79 = class7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "|"+ "'", str28.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "|"+ "'", str48.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + ""+ "'", str58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + ""+ "'", str69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + ""+ "'", str74.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "|| "+ "'", str78.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str79.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test159"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: || \nProfessor: |\nMatriculado(a)s: \n\n", "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", 97, false, false, (int)'a', "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test160"); }


    administrative.Class class7 = new administrative.Class("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n", "Nome: \nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", 100, true, false, (int)(byte)10, "Nome: \nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: \nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: \nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test161"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | | \nProfessor: \nMatriculado(a)s: \n\n", "Nome: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 52\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: ||| | \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", 32, true, false, 0, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | | \nProfessor: \nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | | \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 52\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: ||| | \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 0\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | | \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | | \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 52\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: ||| | \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 0\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | | \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test162"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 0\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", "Nome: || | \nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", 1, true, true, 35, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n| \nProfessor: \nMatriculado(a)s: \n\n");

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test163"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    java.lang.String str14 = class7.listRequisites();
    administrative.Class class22 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)100, true, false, (int)'a', "hi!");
    java.lang.String str23 = class22.toString();
    boolean b24 = class7.addPreRequisite(class22);
    java.lang.String str25 = class22.getName();
    personal.Student student26 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b27 = class22.enroll(student26);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str23.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "|"+ "'", str25.equals("|"));

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test164"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n", 1, true, false, 100, "hi!");
    boolean b8 = class7.isAvailable();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"+ "'", str9.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test165"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.reportIn();
    int i20 = class17.getMinCredits();
    boolean b21 = class17.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test166"); }


    administrative.Class class7 = new administrative.Class("|| ", "|", (int)(short)0, true, true, 10, "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.getTeacher();
    java.lang.String str9 = class7.reportIn();
    java.lang.String str10 = class7.getName();
    java.lang.String str11 = class7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Nome: || \nC\u00F3digo: |\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str9.equals("Nome: || \nC\u00F3digo: |\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "|| "+ "'", str10.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Nome: || \nC\u00F3digo: |\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str11.equals("Nome: || \nC\u00F3digo: |\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test167"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)100, true, false, (int)'a', "hi!");
    java.lang.String str8 = class7.toString();
    administrative.Course course9 = null;
    class7.setCourse(course9);
    java.lang.String str11 = class7.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test168"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    java.lang.String str62 = class17.getName();
    int i63 = class17.getCredits();
    administrative.Course course64 = null;
    class17.setCourse(course64);
    administrative.Course course66 = null;
    class17.setCourse(course66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + ""+ "'", str62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test169"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.reportIn();
    boolean b13 = class7.isElective();
    int i14 = class7.getCredits();
    administrative.Class class22 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class30 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i31 = class30.getMinCredits();
    java.lang.String str32 = class30.getName();
    java.lang.String str33 = class30.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student34 = class30.getStudents();
    boolean b35 = class22.addPreRequisite(class30);
    java.lang.String str36 = class22.getID();
    java.lang.String str37 = class22.reportIn();
    boolean b38 = class7.addPreRequisite(class22);
    administrative.Course course39 = null;
    class22.setCourse(course39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str36.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str37.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test170"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.util.ArrayList<personal.Student> arraylist_student12 = class7.getStudents();
    java.lang.String str13 = class7.listRequisites();
    int i14 = class7.getCredits();
    int i15 = class7.getMinCredits();
    java.util.ArrayList<personal.Student> arraylist_student16 = class7.getStudents();
    boolean b17 = class7.isAvailable();
    boolean b18 = class7.isAvailable();
    administrative.Course course19 = null;
    class7.setCourse(course19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "|"+ "'", str13.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test171"); }


    administrative.Class class7 = new administrative.Class("", "", (int)'4', false, false, (int)(short)10, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    java.lang.String str9 = class7.getID();
    administrative.Class class17 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "|", 32, true, false, 1, "|| ");
    boolean b18 = class7.addPreRequisite(class17);
    int i19 = class7.getMinCredits();
    administrative.Class class27 = new administrative.Class("hi!", "", (int)(byte)10, false, true, 32, "");
    administrative.Course course28 = null;
    class27.setCourse(course28);
    java.lang.String str30 = class27.getName();
    boolean b31 = class7.addPreRequisite(class27);
    java.lang.String str32 = class7.toString();
    boolean b33 = class7.isElective();
    int i34 = class7.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "hi!"+ "'", str30.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 52\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: ||| | \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str32.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 52\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: ||| | \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 10);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test172"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    int i8 = class7.getMinCredits();
    int i9 = class7.getCredits();
    java.lang.String str10 = class7.toString();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.reportIn();
    java.lang.String str13 = class7.reportIn();
    java.lang.String str14 = class7.listRequisites();
    boolean b15 = class7.isElective();
    java.util.ArrayList<personal.Student> arraylist_student16 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student16);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test173"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    java.lang.String str10 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.getTeacher();
    java.lang.String str13 = class7.getTeacher();
    java.lang.String str14 = class7.listRequisites();
    java.lang.String str15 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test174"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student20 = class17.getStudents();
    administrative.Course course21 = null;
    class17.setCourse(course21);
    int i23 = class17.getMinCredits();
    java.lang.String str24 = class17.getID();
    java.util.ArrayList<personal.Student> arraylist_student25 = class17.getStudents();
    boolean b26 = class17.isAvailable();
    java.lang.String str27 = class17.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "|"+ "'", str27.equals("|"));

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test175"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student28 = class27.getStudents();
    java.lang.String str29 = class27.getID();
    boolean b30 = class7.addPreRequisite(class27);
    boolean b31 = class7.isAvailable();
    boolean b32 = class7.isElective();
    administrative.Class class40 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "|| ", (int)(byte)1, true, true, (int)(byte)1, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    java.lang.String str41 = class40.listRequisites();
    int i42 = class40.getMinCredits();
    boolean b43 = class7.addPreRequisite(class40);
    int i44 = class40.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "|"+ "'", str41.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test176"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    administrative.Course course9 = null;
    class7.setCourse(course9);
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getTeacher();
    boolean b13 = class7.isAvailable();
    java.lang.String str14 = class7.listRequisites();
    administrative.Class class22 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i23 = class22.getMinCredits();
    java.lang.String str24 = class22.reportIn();
    administrative.Class class32 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b33 = class22.addPreRequisite(class32);
    java.lang.String str34 = class32.reportIn();
    java.lang.String str35 = class32.getID();
    boolean b36 = class32.isElective();
    boolean b37 = class32.isElective();
    boolean b38 = class7.addPreRequisite(class32);
    java.lang.String str39 = class7.reportIn();
    java.lang.String str40 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test177"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student20 = class17.getStudents();
    administrative.Course course21 = null;
    class17.setCourse(course21);
    int i23 = class17.getMinCredits();
    java.lang.String str24 = class17.getID();
    java.util.ArrayList<personal.Student> arraylist_student25 = class17.getStudents();
    boolean b26 = class17.isAvailable();
    int i27 = class17.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test178"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    java.lang.String str14 = class7.listRequisites();
    java.lang.String str15 = class7.getName();
    boolean b16 = class7.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test179"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    java.lang.String str14 = class7.listRequisites();
    administrative.Class class22 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)100, true, false, (int)'a', "hi!");
    java.lang.String str23 = class22.toString();
    boolean b24 = class7.addPreRequisite(class22);
    administrative.Class class32 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i33 = class32.getMinCredits();
    java.lang.String str34 = class32.reportIn();
    administrative.Class class42 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b43 = class32.addPreRequisite(class42);
    administrative.Course course44 = null;
    class42.setCourse(course44);
    java.lang.String str46 = class42.getTeacher();
    int i47 = class42.getCredits();
    boolean b48 = class22.addPreRequisite(class42);
    personal.Student student49 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b50 = class22.enroll(student49);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str23.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + ""+ "'", str46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test180"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    int i10 = class7.getCredits();
    int i11 = class7.getMinCredits();
    administrative.Course course12 = null;
    class7.setCourse(course12);
    administrative.Class class21 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 52\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: ||| | \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", (int)(short)10, true, false, (int)(short)10, "Nome: \nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n");
    boolean b22 = class7.addPreRequisite(class21);
    java.util.ArrayList<personal.Student> arraylist_student23 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student23);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test181"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    administrative.Class class39 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i40 = class39.getMinCredits();
    java.lang.String str41 = class39.getName();
    java.lang.String str42 = class39.getID();
    java.lang.String str43 = class39.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student44 = class39.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student45 = class39.getStudents();
    boolean b46 = class29.addPreRequisite(class39);
    java.lang.String str47 = class39.reportIn();
    int i48 = class39.getCredits();
    int i49 = class39.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + ""+ "'", str47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test182"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.listRequisites();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.util.ArrayList<personal.Student> arraylist_student12 = class7.getStudents();
    java.lang.String str13 = class7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str13.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test183"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str8 = class7.getName();
    java.lang.String str9 = class7.getTeacher();
    java.lang.String str10 = class7.listRequisites();
    java.lang.String str11 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!"+ "'", str9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "|"+ "'", str10.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "hi!"+ "'", str11.equals("hi!"));

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test184"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student28 = class27.getStudents();
    java.lang.String str29 = class27.getID();
    boolean b30 = class7.addPreRequisite(class27);
    int i31 = class7.getCredits();
    java.lang.String str32 = class7.getID();
    java.lang.String str33 = class7.toString();
    java.lang.String str34 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str33.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test185"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    java.lang.String str9 = class7.getID();
    java.lang.String str10 = class7.toString();
    administrative.Course course11 = null;
    class7.setCourse(course11);
    boolean b13 = class7.isElective();
    java.lang.String str14 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test186"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    administrative.Course course8 = null;
    class7.setCourse(course8);
    administrative.Class class17 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "", (int)'a', false, true, (-1), "|| ");
    java.lang.String str18 = class17.toString();
    boolean b19 = class7.addPreRequisite(class17);
    java.lang.String str20 = class17.getTeacher();
    java.lang.String str21 = class17.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"+ "'", str18.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "|| "+ "'", str20.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str21.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test187"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    int i8 = class7.getMinCredits();
    int i9 = class7.getCredits();
    java.lang.String str10 = class7.toString();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.reportIn();
    java.lang.String str13 = class7.reportIn();
    java.lang.String str14 = class7.getID();
    java.lang.String str15 = class7.getName();
    java.lang.String str16 = class7.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "|"+ "'", str15.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test188"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    administrative.Course course8 = null;
    class7.setCourse(course8);
    administrative.Class class17 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "", (int)'a', false, true, (-1), "|| ");
    java.lang.String str18 = class17.toString();
    boolean b19 = class7.addPreRequisite(class17);
    int i20 = class17.getCredits();
    administrative.Class class28 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i29 = class28.getMinCredits();
    java.lang.String str30 = class28.reportIn();
    administrative.Class class38 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b39 = class28.addPreRequisite(class38);
    administrative.Course course40 = null;
    class38.setCourse(course40);
    java.lang.String str42 = class38.getTeacher();
    java.lang.String str43 = class38.reportIn();
    boolean b44 = class38.isElective();
    int i45 = class38.getCredits();
    java.lang.String str46 = class38.reportIn();
    boolean b47 = class17.addPreRequisite(class38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"+ "'", str18.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + ""+ "'", str30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + ""+ "'", str46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test189"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n", "|| | ", (int)(short)10, true, true, 1, "");
    administrative.Course course8 = null;
    class7.setCourse(course8);
    java.lang.String str10 = class7.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nC\u00F3digo: || | \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nC\u00F3digo: || | \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test190"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 0\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "Nome: \nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", (int)(short)-1, true, true, (int)(byte)1, "Nome: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n\nC\u00F3digo: |\nCr\u00E9ditos: 0\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test191"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    boolean b39 = class17.addPreRequisite(class37);
    int i40 = class17.getCredits();
    administrative.Class class48 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str49 = class48.listRequisites();
    java.lang.String str50 = class48.getTeacher();
    administrative.Course course51 = null;
    class48.setCourse(course51);
    java.lang.String str53 = class48.reportIn();
    boolean b54 = class48.isElective();
    java.lang.String str55 = class48.reportIn();
    int i56 = class48.getCredits();
    administrative.Class class64 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str65 = class64.listRequisites();
    administrative.Course course66 = null;
    class64.setCourse(course66);
    java.lang.String str68 = class64.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student69 = class64.getStudents();
    boolean b70 = class48.addPreRequisite(class64);
    boolean b71 = class17.addPreRequisite(class64);
    boolean b72 = class17.isElective();
    int i73 = class17.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "|"+ "'", str49.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + ""+ "'", str50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + ""+ "'", str53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + ""+ "'", str55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "|"+ "'", str65.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + ""+ "'", str68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test192"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    boolean b22 = class17.isElective();
    int i23 = class17.getMinCredits();
    java.lang.String str24 = class17.getName();
    administrative.Course course25 = null;
    class17.setCourse(course25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test193"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "", (int)'a', false, true, (-1), "|| ");
    java.lang.String str8 = class7.toString();
    java.lang.String str9 = class7.reportIn();
    java.lang.String str10 = class7.getName();
    int i11 = class7.getMinCredits();
    int i12 = class7.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"+ "'", str9.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test194"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getName();
    java.lang.String str13 = class7.toString();
    int i14 = class7.getMinCredits();
    administrative.Course course15 = null;
    class7.setCourse(course15);
    java.lang.String str17 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str13.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test195"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    administrative.Class class39 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i40 = class39.getMinCredits();
    java.lang.String str41 = class39.getName();
    java.lang.String str42 = class39.getID();
    java.lang.String str43 = class39.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student44 = class39.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student45 = class39.getStudents();
    boolean b46 = class29.addPreRequisite(class39);
    java.lang.String str47 = class29.getTeacher();
    int i48 = class29.getCredits();
    java.lang.String str49 = class29.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + ""+ "'", str47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test196"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b8 = class7.isElective();
    administrative.Class class16 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i17 = class16.getMinCredits();
    java.lang.String str18 = class16.reportIn();
    administrative.Class class26 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b27 = class16.addPreRequisite(class26);
    java.lang.String str28 = class26.listRequisites();
    administrative.Class class36 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i37 = class36.getMinCredits();
    java.lang.String str38 = class36.reportIn();
    administrative.Class class46 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b47 = class36.addPreRequisite(class46);
    java.lang.String str48 = class46.listRequisites();
    administrative.Class class56 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i57 = class56.getMinCredits();
    java.lang.String str58 = class56.reportIn();
    administrative.Class class66 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b67 = class56.addPreRequisite(class66);
    boolean b68 = class46.addPreRequisite(class66);
    java.lang.String str69 = class46.getTeacher();
    boolean b70 = class26.addPreRequisite(class46);
    boolean b71 = class46.isElective();
    int i72 = class46.getMinCredits();
    int i73 = class46.getCredits();
    java.lang.String str74 = class46.reportIn();
    boolean b75 = class7.addPreRequisite(class46);
    int i76 = class7.getMinCredits();
    administrative.Class class77 = null;
    boolean b78 = class7.addPreRequisite(class77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "|"+ "'", str28.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "|"+ "'", str48.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + ""+ "'", str58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + ""+ "'", str69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + ""+ "'", str74.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test197"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student28 = class27.getStudents();
    java.lang.String str29 = class27.getID();
    boolean b30 = class7.addPreRequisite(class27);
    int i31 = class7.getCredits();
    java.lang.String str32 = class7.getID();
    boolean b33 = class7.isElective();
    java.util.ArrayList<personal.Student> arraylist_student34 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student34);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test198"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    boolean b22 = class17.isElective();
    java.lang.String str23 = class17.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student24 = class17.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student25 = class17.getStudents();
    int i26 = class17.getMinCredits();
    java.lang.String str27 = class17.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test199"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    int i12 = class7.getCredits();
    java.lang.String str13 = class7.listRequisites();
    administrative.Class class21 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str22 = class21.listRequisites();
    java.lang.String str23 = class21.getTeacher();
    administrative.Course course24 = null;
    class21.setCourse(course24);
    java.lang.String str26 = class21.reportIn();
    java.lang.String str27 = class21.getName();
    boolean b28 = class7.addPreRequisite(class21);
    int i29 = class21.getMinCredits();
    java.lang.String str30 = class21.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "|"+ "'", str13.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "|"+ "'", str22.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + ""+ "'", str30.equals(""));

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test200"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student28 = class27.getStudents();
    java.lang.String str29 = class27.getID();
    boolean b30 = class7.addPreRequisite(class27);
    administrative.Class class38 = new administrative.Class("", "", (int)'4', false, false, (int)(short)10, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");
    java.util.ArrayList<personal.Student> arraylist_student39 = class38.getStudents();
    java.lang.String str40 = class38.getID();
    administrative.Class class48 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "|", 32, true, false, 1, "|| ");
    boolean b49 = class38.addPreRequisite(class48);
    boolean b50 = class7.addPreRequisite(class38);
    java.lang.String str51 = class7.toString();
    int i52 = class7.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | | \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str51.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | | \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test201"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    boolean b62 = class37.isElective();
    int i63 = class37.getMinCredits();
    int i64 = class37.getMinCredits();
    java.lang.String str65 = class37.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + ""+ "'", str65.equals(""));

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test202"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str8 = class7.getName();
    administrative.Course course9 = null;
    class7.setCourse(course9);
    administrative.Course course11 = null;
    class7.setCourse(course11);
    java.lang.String str13 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "|"+ "'", str13.equals("|"));

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test203"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getName();
    java.lang.String str13 = class7.reportIn();
    administrative.Course course14 = null;
    class7.setCourse(course14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test204"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    boolean b32 = class29.isElective();
    java.lang.String str33 = class29.toString();
    java.lang.String str34 = class29.getTeacher();
    java.lang.String str35 = class29.getID();
    int i36 = class29.getCredits();
    java.lang.String str37 = class29.toString();
    java.lang.String str38 = class29.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str33.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str37.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "|"+ "'", str38.equals("|"));

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test205"); }


    administrative.Class class7 = new administrative.Class("hi!", "", (int)(byte)10, false, true, 32, "");
    administrative.Class class15 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str16 = class15.listRequisites();
    java.lang.String str17 = class15.getTeacher();
    administrative.Course course18 = null;
    class15.setCourse(course18);
    java.lang.String str20 = class15.reportIn();
    java.lang.String str21 = class15.listRequisites();
    boolean b22 = class7.addPreRequisite(class15);
    administrative.Class class30 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b31 = class30.isElective();
    java.lang.String str32 = class30.listRequisites();
    java.lang.String str33 = class30.reportIn();
    int i34 = class30.getCredits();
    int i35 = class30.getCredits();
    java.lang.String str36 = class30.toString();
    boolean b37 = class15.addPreRequisite(class30);
    java.lang.String str38 = class15.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student39 = class15.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "|"+ "'", str16.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "|"+ "'", str21.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "|"+ "'", str32.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str36.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student39);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test206"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    java.lang.String str9 = class7.getID();
    boolean b10 = class7.isAvailable();
    int i11 = class7.getCredits();
    administrative.Course course12 = null;
    class7.setCourse(course12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test207"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    java.lang.String str20 = class7.toString();
    java.lang.String str21 = class7.getTeacher();
    java.lang.String str22 = class7.reportIn();
    boolean b23 = class7.isAvailable();
    java.lang.String str24 = class7.getName();
    boolean b25 = class7.isAvailable();
    boolean b26 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str20.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test208"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student20 = class17.getStudents();
    java.lang.String str21 = class17.toString();
    java.lang.String str22 = class17.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str21.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str22.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test209"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student28 = class27.getStudents();
    java.lang.String str29 = class27.getID();
    boolean b30 = class7.addPreRequisite(class27);
    administrative.Class class38 = new administrative.Class("", "", (int)'4', false, false, (int)(short)10, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");
    java.util.ArrayList<personal.Student> arraylist_student39 = class38.getStudents();
    java.lang.String str40 = class38.getID();
    administrative.Class class48 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "|", 32, true, false, 1, "|| ");
    boolean b49 = class38.addPreRequisite(class48);
    boolean b50 = class7.addPreRequisite(class38);
    int i51 = class7.getMinCredits();
    administrative.Course course52 = null;
    class7.setCourse(course52);
    boolean b54 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test210"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "|", (int)'#', false, true, 52, "");
    boolean b8 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test211"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getName();
    java.lang.String str13 = class7.reportIn();
    java.lang.String str14 = class7.getTeacher();
    personal.Student student15 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = class7.enroll(student15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test212"); }


    administrative.Class class7 = new administrative.Class("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n", "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", 0, true, false, 0, "|| ");
    int i8 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test213"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    boolean b12 = class7.isAvailable();
    java.lang.String str13 = class7.reportIn();
    boolean b14 = class7.isAvailable();
    boolean b15 = class7.isElective();
    personal.Student student16 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = class7.enroll(student16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test214"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    java.lang.String str10 = class7.toString();
    java.lang.String str11 = class7.toString();
    int i12 = class7.getCredits();
    administrative.Course course13 = null;
    class7.setCourse(course13);
    java.lang.String str15 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str11.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "|"+ "'", str15.equals("|"));

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test215"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    boolean b39 = class17.addPreRequisite(class37);
    java.lang.String str40 = class37.toString();
    java.lang.String str41 = class37.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str40.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test216"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    administrative.Course course9 = null;
    class7.setCourse(course9);
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getTeacher();
    java.lang.String str13 = class7.getTeacher();
    administrative.Course course14 = null;
    class7.setCourse(course14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test217"); }


    administrative.Class class7 = new administrative.Class("", "Nome: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", (int)'#', true, false, 35, "Nome: |\nC\u00F3digo: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.getTeacher();
    boolean b9 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: |\nC\u00F3digo: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: |\nC\u00F3digo: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test218"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)1, false, false, 0, "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n");

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test219"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test220"); }


    administrative.Class class7 = new administrative.Class("|Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n| ", "|| | | ", 35, false, false, (int)(short)10, "");

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test221"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    java.lang.String str20 = class7.getID();
    java.lang.String str21 = class7.getName();
    java.lang.String str22 = class7.getID();
    boolean b23 = class7.isElective();
    java.lang.String str24 = class7.getName();
    java.lang.String str25 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test222"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)(byte)10, false, false, (int)'4', "|| ");
    boolean b8 = class7.isAvailable();
    boolean b9 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test223"); }


    administrative.Class class7 = new administrative.Class("Nome: || \nC\u00F3digo: |\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "", 0, true, false, (int)(byte)10, "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test224"); }


    administrative.Class class7 = new administrative.Class("hi!", "", (int)(byte)10, false, true, 32, "");
    administrative.Class class15 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str16 = class15.listRequisites();
    java.lang.String str17 = class15.getTeacher();
    administrative.Course course18 = null;
    class15.setCourse(course18);
    java.lang.String str20 = class15.reportIn();
    java.lang.String str21 = class15.listRequisites();
    boolean b22 = class7.addPreRequisite(class15);
    administrative.Course course23 = null;
    class7.setCourse(course23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "|"+ "'", str16.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "|"+ "'", str21.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test225"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    java.lang.String str10 = class7.reportIn();
    administrative.Class class18 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class26 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i27 = class26.getMinCredits();
    java.lang.String str28 = class26.getName();
    java.lang.String str29 = class26.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student30 = class26.getStudents();
    boolean b31 = class18.addPreRequisite(class26);
    java.lang.String str32 = class18.getTeacher();
    boolean b33 = class7.addPreRequisite(class18);
    java.lang.String str34 = class18.toString();
    administrative.Class class42 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i43 = class42.getMinCredits();
    java.lang.String str44 = class42.reportIn();
    boolean b45 = class18.addPreRequisite(class42);
    java.lang.String str46 = class18.getTeacher();
    int i47 = class18.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str32.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str34.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str46.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 100);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test226"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    administrative.Class class26 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i27 = class26.getMinCredits();
    java.lang.String str28 = class26.getName();
    java.lang.String str29 = class26.getID();
    java.lang.String str30 = class26.getTeacher();
    java.lang.String str31 = class26.getName();
    boolean b32 = class26.isAvailable();
    boolean b33 = class7.addPreRequisite(class26);
    int i34 = class26.getCredits();
    java.lang.String str35 = class26.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + ""+ "'", str30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str35.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test227"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    boolean b12 = class7.isAvailable();
    java.lang.String str13 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test228"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 52\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: ||| | \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 52\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: ||| | \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", (int)'4', false, false, (int)'a', "Nome: Nome: || \nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 0\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 52\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: ||| | \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test229"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    boolean b62 = class37.isElective();
    int i63 = class37.getMinCredits();
    administrative.Class class71 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str72 = class71.listRequisites();
    administrative.Course course73 = null;
    class71.setCourse(course73);
    java.lang.String str75 = class71.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student76 = class71.getStudents();
    boolean b77 = class37.addPreRequisite(class71);
    boolean b78 = class37.isAvailable();
    java.lang.String str79 = class37.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "|"+ "'", str72.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + ""+ "'", str75.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + ""+ "'", str79.equals(""));

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test230"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    java.lang.String str14 = class7.listRequisites();
    administrative.Class class22 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)100, true, false, (int)'a', "hi!");
    java.lang.String str23 = class22.toString();
    boolean b24 = class7.addPreRequisite(class22);
    java.lang.String str25 = class22.getTeacher();
    java.lang.String str26 = class22.getTeacher();
    java.lang.String str27 = class22.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str23.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "hi!"+ "'", str25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "hi!"+ "'", str26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str27.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test231"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str8 = class7.getName();
    administrative.Course course9 = null;
    class7.setCourse(course9);
    int i11 = class7.getCredits();
    int i12 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 32);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test232"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student12 = class7.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    int i14 = class7.getCredits();
    administrative.Class class22 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str23 = class22.listRequisites();
    java.lang.String str24 = class22.getTeacher();
    java.lang.String str25 = class22.reportIn();
    administrative.Class class33 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class41 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i42 = class41.getMinCredits();
    java.lang.String str43 = class41.getName();
    java.lang.String str44 = class41.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student45 = class41.getStudents();
    boolean b46 = class33.addPreRequisite(class41);
    java.lang.String str47 = class33.getTeacher();
    boolean b48 = class22.addPreRequisite(class33);
    java.lang.String str49 = class33.toString();
    int i50 = class33.getCredits();
    boolean b51 = class7.addPreRequisite(class33);
    boolean b52 = class33.isAvailable();
    java.lang.String str53 = class33.listRequisites();
    java.lang.String str54 = class33.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "|"+ "'", str23.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str47.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str49.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "|| "+ "'", str53.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str54.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test233"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    boolean b22 = class17.isElective();
    java.lang.String str23 = class17.toString();
    boolean b24 = class17.isElective();
    administrative.Class class32 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i33 = class32.getMinCredits();
    java.lang.String str34 = class32.getName();
    administrative.Class class42 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i43 = class42.getMinCredits();
    java.lang.String str44 = class42.getName();
    java.lang.String str45 = class42.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student46 = class42.getStudents();
    boolean b47 = class32.addPreRequisite(class42);
    int i48 = class32.getMinCredits();
    java.lang.String str49 = class32.getName();
    boolean b50 = class17.addPreRequisite(class32);
    administrative.Course course51 = null;
    class17.setCourse(course51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str23.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + ""+ "'", str45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test234"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    java.lang.String str10 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.toString();
    administrative.Class class20 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i21 = class20.getMinCredits();
    java.lang.String str22 = class20.getName();
    java.lang.String str23 = class20.getID();
    java.lang.String str24 = class20.getTeacher();
    java.lang.String str25 = class20.getName();
    java.util.ArrayList<personal.Student> arraylist_student26 = class20.getStudents();
    boolean b27 = class7.addPreRequisite(class20);
    java.lang.String str28 = class20.getID();
    java.lang.String str29 = class20.getTeacher();
    java.lang.String str30 = class20.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str12.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "|"+ "'", str30.equals("|"));

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test235"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    java.lang.String str62 = class17.getName();
    java.util.ArrayList<personal.Student> arraylist_student63 = class17.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student64 = class17.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + ""+ "'", str62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student64);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test236"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    boolean b32 = class29.isElective();
    java.lang.String str33 = class29.toString();
    java.lang.String str34 = class29.getTeacher();
    java.lang.String str35 = class29.getID();
    administrative.Course course36 = null;
    class29.setCourse(course36);
    boolean b38 = class29.isAvailable();
    java.lang.String str39 = class29.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str33.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test237"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    boolean b32 = class29.isElective();
    java.lang.String str33 = class29.toString();
    java.lang.String str34 = class29.toString();
    boolean b35 = class29.isAvailable();
    administrative.Class class43 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student44 = class43.getStudents();
    java.lang.String str45 = class43.getID();
    java.lang.String str46 = class43.toString();
    administrative.Course course47 = null;
    class43.setCourse(course47);
    administrative.Class class49 = null;
    boolean b50 = class43.addPreRequisite(class49);
    boolean b51 = class29.addPreRequisite(class43);
    java.lang.String str52 = class43.getName();
    java.lang.String str53 = class43.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str33.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str34.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + ""+ "'", str45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str46.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + ""+ "'", str52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + ""+ "'", str53.equals(""));

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test238"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    java.lang.String str10 = class7.reportIn();
    administrative.Class class18 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class26 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i27 = class26.getMinCredits();
    java.lang.String str28 = class26.getName();
    java.lang.String str29 = class26.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student30 = class26.getStudents();
    boolean b31 = class18.addPreRequisite(class26);
    java.lang.String str32 = class18.getTeacher();
    boolean b33 = class7.addPreRequisite(class18);
    java.lang.String str34 = class18.toString();
    java.lang.String str35 = class18.getID();
    boolean b36 = class18.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str32.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str34.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str35.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test239"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    java.lang.String str14 = class7.listRequisites();
    administrative.Class class22 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)100, true, false, (int)'a', "hi!");
    java.lang.String str23 = class22.toString();
    boolean b24 = class7.addPreRequisite(class22);
    java.lang.String str25 = class22.getTeacher();
    int i26 = class22.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str23.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "hi!"+ "'", str25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 97);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test240"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    boolean b12 = class7.isAvailable();
    java.lang.String str13 = class7.reportIn();
    administrative.Course course14 = null;
    class7.setCourse(course14);
    java.util.ArrayList<personal.Student> arraylist_student16 = class7.getStudents();
    java.lang.String str17 = class7.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student18 = class7.getStudents();
    java.lang.String str19 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test241"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    java.lang.String str10 = class7.reportIn();
    administrative.Class class18 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class26 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i27 = class26.getMinCredits();
    java.lang.String str28 = class26.getName();
    java.lang.String str29 = class26.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student30 = class26.getStudents();
    boolean b31 = class18.addPreRequisite(class26);
    java.lang.String str32 = class18.getTeacher();
    boolean b33 = class7.addPreRequisite(class18);
    java.lang.String str34 = class18.toString();
    java.lang.String str35 = class18.getName();
    personal.Student student36 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b37 = class18.enroll(student36);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str32.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str34.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "|"+ "'", str35.equals("|"));

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test242"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    administrative.Course course9 = null;
    class7.setCourse(course9);
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getTeacher();
    boolean b13 = class7.isAvailable();
    java.lang.String str14 = class7.listRequisites();
    administrative.Class class22 = new administrative.Class("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", (int)(short)1, true, true, (int)'a', "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");
    boolean b23 = class7.addPreRequisite(class22);
    java.util.ArrayList<personal.Student> arraylist_student24 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student24);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test243"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    java.lang.String str10 = class7.getName();
    java.lang.String str11 = class7.getID();
    java.lang.String str12 = class7.getTeacher();
    int i13 = class7.getCredits();
    administrative.Class class21 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i22 = class21.getMinCredits();
    java.lang.String str23 = class21.reportIn();
    administrative.Class class31 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b32 = class21.addPreRequisite(class31);
    boolean b33 = class21.isAvailable();
    java.lang.String str34 = class21.getID();
    java.lang.String str35 = class21.getName();
    java.lang.String str36 = class21.getName();
    boolean b37 = class21.isAvailable();
    boolean b38 = class7.addPreRequisite(class21);
    administrative.Class class46 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str47 = class46.listRequisites();
    java.lang.String str48 = class46.getTeacher();
    administrative.Course course49 = null;
    class46.setCourse(course49);
    int i51 = class46.getCredits();
    java.lang.String str52 = class46.listRequisites();
    boolean b53 = class46.isAvailable();
    boolean b54 = class46.isElective();
    boolean b55 = class46.isAvailable();
    boolean b56 = class7.addPreRequisite(class46);
    java.lang.String str57 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "|"+ "'", str47.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + ""+ "'", str48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "|"+ "'", str52.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "|| | "+ "'", str57.equals("|| | "));

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test244"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.getID();
    java.lang.String str13 = class7.reportIn();
    java.lang.String str14 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test245"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: ||| \nProfessor: \nMatriculado(a)s: \n\n", 32, false, true, 35, "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n");
    personal.Student student8 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b9 = class7.enroll(student8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test246"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getCredits();
    java.lang.String str9 = class7.getTeacher();
    int i10 = class7.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test247"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str8 = class7.getName();
    int i9 = class7.getMinCredits();
    java.lang.String str10 = class7.getTeacher();
    java.lang.String str11 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!"+ "'", str10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "|"+ "'", str11.equals("|"));

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test248"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student28 = class27.getStudents();
    java.lang.String str29 = class27.getID();
    boolean b30 = class7.addPreRequisite(class27);
    administrative.Class class38 = new administrative.Class("", "", (int)'4', false, false, (int)(short)10, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");
    java.util.ArrayList<personal.Student> arraylist_student39 = class38.getStudents();
    java.lang.String str40 = class38.getID();
    administrative.Class class48 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "|", 32, true, false, 1, "|| ");
    boolean b49 = class38.addPreRequisite(class48);
    boolean b50 = class7.addPreRequisite(class38);
    int i51 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test249"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", 0, true, false, (int)(byte)1, "|");
    java.lang.String str8 = class7.listRequisites();
    int i9 = class7.getMinCredits();
    administrative.Class class17 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str18 = class17.listRequisites();
    java.lang.String str19 = class17.getID();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    boolean b39 = class27.isAvailable();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student48 = class47.getStudents();
    java.lang.String str49 = class47.getID();
    boolean b50 = class27.addPreRequisite(class47);
    boolean b51 = class17.addPreRequisite(class47);
    int i52 = class47.getCredits();
    java.util.ArrayList<personal.Student> arraylist_student53 = class47.getStudents();
    boolean b54 = class7.addPreRequisite(class47);
    boolean b55 = class7.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "|"+ "'", str18.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test250"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    int i10 = class7.getCredits();
    int i11 = class7.getMinCredits();
    administrative.Course course12 = null;
    class7.setCourse(course12);
    administrative.Course course14 = null;
    class7.setCourse(course14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test251"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    boolean b62 = class37.isElective();
    int i63 = class37.getMinCredits();
    administrative.Class class71 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str72 = class71.listRequisites();
    administrative.Course course73 = null;
    class71.setCourse(course73);
    java.lang.String str75 = class71.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student76 = class71.getStudents();
    boolean b77 = class37.addPreRequisite(class71);
    boolean b78 = class37.isAvailable();
    java.util.ArrayList<personal.Student> arraylist_student79 = class37.getStudents();
    boolean b80 = class37.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "|"+ "'", str72.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + ""+ "'", str75.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test252"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    int i32 = class29.getMinCredits();
    java.lang.String str33 = class29.listRequisites();
    java.lang.String str34 = class29.listRequisites();
    int i35 = class29.getMinCredits();
    int i36 = class29.getMinCredits();
    boolean b37 = class29.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "|"+ "'", str33.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "|"+ "'", str34.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test253"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: ||| \nProfessor: \nMatriculado(a)s: \n\n", (int)' ', false, false, (int)'#', "");

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test254"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    java.lang.String str9 = class7.getID();
    java.lang.String str10 = class7.listRequisites();
    java.lang.String str11 = class7.toString();
    boolean b12 = class7.isAvailable();
    java.lang.String str13 = class7.toString();
    java.util.ArrayList<personal.Student> arraylist_student14 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "|"+ "'", str10.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str11.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str13.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student14);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test255"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "Nome: || \nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 0\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n", 35, false, true, 100, "|| Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n| ");

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test256"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    int i12 = class7.getCredits();
    java.lang.String str13 = class7.listRequisites();
    boolean b14 = class7.isAvailable();
    boolean b15 = class7.isElective();
    java.lang.String str16 = class7.getTeacher();
    int i17 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "|"+ "'", str13.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test257"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.reportIn();
    boolean b20 = class17.isAvailable();
    java.lang.String str21 = class17.toString();
    java.lang.String str22 = class17.getName();
    int i23 = class17.getCredits();
    java.lang.String str24 = class17.toString();
    administrative.Course course25 = null;
    class17.setCourse(course25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str21.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str24.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test258"); }


    administrative.Class class7 = new administrative.Class("", "", (int)'4', false, false, (int)(short)10, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    java.lang.String str9 = class7.getID();
    administrative.Class class17 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "|", 32, true, false, 1, "|| ");
    boolean b18 = class7.addPreRequisite(class17);
    int i19 = class7.getMinCredits();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Course course40 = null;
    class37.setCourse(course40);
    administrative.Class class49 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i50 = class49.getMinCredits();
    boolean b51 = class37.addPreRequisite(class49);
    boolean b52 = class49.isElective();
    java.lang.String str53 = class49.toString();
    java.lang.String str54 = class49.getTeacher();
    java.lang.String str55 = class49.getID();
    int i56 = class49.getCredits();
    boolean b57 = class7.addPreRequisite(class49);
    java.lang.String str58 = class49.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str53.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + ""+ "'", str54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + ""+ "'", str55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + ""+ "'", str58.equals(""));

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test259"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: hi!\nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n| \nProfessor: \nMatriculado(a)s: \n\n", (int)'#', true, false, 1, "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test260"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    int i19 = class7.getCredits();
    java.lang.String str20 = class7.listRequisites();
    administrative.Course course21 = null;
    class7.setCourse(course21);
    java.util.ArrayList<personal.Student> arraylist_student23 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "|| "+ "'", str20.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student23);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test261"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    administrative.Course course8 = null;
    class7.setCourse(course8);
    administrative.Class class17 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "", (int)'a', false, true, (-1), "|| ");
    java.lang.String str18 = class17.toString();
    boolean b19 = class7.addPreRequisite(class17);
    administrative.Course course20 = null;
    class7.setCourse(course20);
    java.lang.String str22 = class7.getID();
    int i23 = class7.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"+ "'", str18.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "|"+ "'", str22.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test262"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    int i12 = class7.getCredits();
    java.lang.String str13 = class7.listRequisites();
    administrative.Class class21 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str22 = class21.listRequisites();
    java.lang.String str23 = class21.getTeacher();
    administrative.Course course24 = null;
    class21.setCourse(course24);
    java.lang.String str26 = class21.reportIn();
    java.lang.String str27 = class21.getName();
    boolean b28 = class7.addPreRequisite(class21);
    int i29 = class21.getMinCredits();
    java.lang.String str30 = class21.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "|"+ "'", str13.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "|"+ "'", str22.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "|"+ "'", str30.equals("|"));

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test263"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    int i8 = class7.getMinCredits();
    int i9 = class7.getCredits();
    java.lang.String str10 = class7.toString();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "hi!"+ "'", str12.equals("hi!"));

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test264"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    int i12 = class7.getCredits();
    java.lang.String str13 = class7.listRequisites();
    boolean b14 = class7.isAvailable();
    boolean b15 = class7.isElective();
    boolean b16 = class7.isAvailable();
    personal.Student student17 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b18 = class7.enroll(student17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "|"+ "'", str13.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test265"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class17.isElective();
    java.lang.String str20 = class17.reportIn();
    administrative.Class class28 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    boolean b29 = class17.addPreRequisite(class28);
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i38 = class37.getMinCredits();
    java.lang.String str39 = class37.reportIn();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b48 = class37.addPreRequisite(class47);
    java.lang.String str49 = class47.reportIn();
    java.lang.String str50 = class47.getID();
    boolean b51 = class47.isElective();
    java.lang.String str52 = class47.toString();
    boolean b53 = class28.addPreRequisite(class47);
    personal.Student student54 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b55 = class47.enroll(student54);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + ""+ "'", str50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str52.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test266"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", "|", (int)(byte)10, false, false, (int)(byte)-1, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Course course8 = null;
    class7.setCourse(course8);
    boolean b10 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test267"); }


    administrative.Class class7 = new administrative.Class("", "", (int)'4', false, false, (int)(short)10, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    java.lang.String str9 = class7.getID();
    administrative.Class class17 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "|", 32, true, false, 1, "|| ");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class17.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test268"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    administrative.Course course19 = null;
    class17.setCourse(course19);
    int i21 = class17.getCredits();
    java.lang.String str22 = class17.reportIn();
    java.lang.String str23 = class17.getName();
    boolean b24 = class17.isAvailable();
    java.util.ArrayList<personal.Student> arraylist_student25 = class17.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student25);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test269"); }


    administrative.Class class7 = new administrative.Class("|| | ", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n| \nProfessor: \nMatriculado(a)s: \n\n", (int)(short)100, false, false, (int)(short)0, "Nome: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 35\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test270"); }


    administrative.Class class7 = new administrative.Class("", "hi!", 1, true, true, (int)(short)-1, "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test271"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    boolean b32 = class29.isElective();
    java.lang.String str33 = class29.toString();
    java.lang.String str34 = class29.getTeacher();
    int i35 = class29.getCredits();
    java.lang.String str36 = class29.getID();
    int i37 = class29.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str33.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test272"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    java.lang.String str10 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.toString();
    administrative.Class class20 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i21 = class20.getMinCredits();
    java.lang.String str22 = class20.getName();
    java.lang.String str23 = class20.getID();
    java.lang.String str24 = class20.getTeacher();
    java.lang.String str25 = class20.getName();
    java.util.ArrayList<personal.Student> arraylist_student26 = class20.getStudents();
    boolean b27 = class7.addPreRequisite(class20);
    java.lang.String str28 = class20.getID();
    java.lang.String str29 = class20.getID();
    administrative.Class class37 = new administrative.Class("hi!", "|", (int)(byte)100, false, false, 1, "|| ");
    int i38 = class37.getCredits();
    boolean b39 = class20.addPreRequisite(class37);
    java.util.ArrayList<personal.Student> arraylist_student40 = class37.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str12.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student40);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test273"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    administrative.Course course8 = null;
    class7.setCourse(course8);
    java.lang.String str10 = class7.getName();
    boolean b11 = class7.isAvailable();
    java.lang.String str12 = class7.getName();
    int i13 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "|"+ "'", str10.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "|"+ "'", str12.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 32);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test274"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    administrative.Course course9 = null;
    class7.setCourse(course9);
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getTeacher();
    boolean b13 = class7.isAvailable();
    java.lang.String str14 = class7.listRequisites();
    administrative.Course course15 = null;
    class7.setCourse(course15);
    java.lang.String str17 = class7.getTeacher();
    java.lang.String str18 = class7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str18.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test275"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.listRequisites();
    java.lang.String str10 = class7.reportIn();
    int i11 = class7.getCredits();
    int i12 = class7.getCredits();
    boolean b13 = class7.isAvailable();
    java.lang.String str14 = class7.toString();
    boolean b15 = class7.isAvailable();
    int i16 = class7.getMinCredits();
    administrative.Class class24 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "", (int)(short)100, true, true, (int)'a', "|");
    java.lang.String str25 = class24.reportIn();
    boolean b26 = class7.addPreRequisite(class24);
    personal.Student student27 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b28 = class7.enroll(student27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str14.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n"+ "'", str25.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test276"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    java.lang.String str29 = class27.reportIn();
    boolean b30 = class7.addPreRequisite(class27);
    java.lang.String str31 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "|| "+ "'", str31.equals("|| "));

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test277"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n\nC\u00F3digo: |\nCr\u00E9ditos: 0\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "", 100, false, true, (int)(byte)0, "");

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test278"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: || \nProfessor: |\nMatriculado(a)s: \n\n", "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: || \nProfessor: |\nMatriculado(a)s: \n\n", 1, true, true, (int)(byte)1, "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test279"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    java.lang.String str20 = class7.toString();
    java.lang.String str21 = class7.getTeacher();
    java.lang.String str22 = class7.reportIn();
    boolean b23 = class7.isAvailable();
    java.lang.String str24 = class7.getName();
    boolean b25 = class7.isAvailable();
    java.lang.String str26 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str20.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test280"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    java.lang.String str9 = class7.getID();
    java.lang.String str10 = class7.listRequisites();
    java.lang.String str11 = class7.toString();
    boolean b12 = class7.isAvailable();
    java.lang.String str13 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "|"+ "'", str10.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str11.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test281"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    administrative.Course course19 = null;
    class17.setCourse(course19);
    boolean b21 = class17.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test282"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getCredits();
    java.lang.String str9 = class7.getTeacher();
    java.lang.String str10 = class7.getID();
    boolean b11 = class7.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test283"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    int i8 = class7.getMinCredits();
    int i9 = class7.getCredits();
    java.lang.String str10 = class7.toString();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student12 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test284"); }


    administrative.Class class7 = new administrative.Class("", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)0, true, false, (int)'#', "|| ");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.listRequisites();
    java.lang.String str10 = class7.getTeacher();
    int i11 = class7.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "|| "+ "'", str10.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 35);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test285"); }


    administrative.Class class7 = new administrative.Class("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: || \nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "|Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n| ", (int)(byte)100, false, false, 52, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test286"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    administrative.Course course19 = null;
    class17.setCourse(course19);
    java.lang.String str21 = class17.getTeacher();
    java.lang.String str22 = class17.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student23 = class17.getStudents();
    administrative.Course course24 = null;
    class17.setCourse(course24);
    boolean b26 = class17.isElective();
    java.lang.String str27 = class17.toString();
    java.util.ArrayList<personal.Student> arraylist_student28 = class17.getStudents();
    boolean b29 = class17.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str27.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test287"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    administrative.Class class39 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i40 = class39.getMinCredits();
    java.lang.String str41 = class39.getName();
    java.lang.String str42 = class39.getID();
    java.lang.String str43 = class39.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student44 = class39.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student45 = class39.getStudents();
    boolean b46 = class29.addPreRequisite(class39);
    java.lang.String str47 = class29.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + ""+ "'", str47.equals(""));

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test288"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.getID();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    boolean b14 = class7.isAvailable();
    java.lang.String str15 = class7.listRequisites();
    personal.Student student16 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = class7.enroll(student16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "|"+ "'", str15.equals("|"));

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test289"); }


    administrative.Class class7 = new administrative.Class("Nome: || \nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 0\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | \nProfessor: \nMatriculado(a)s: \n\n", (int)(short)1, true, true, (int)(byte)1, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 52\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: ||| | \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");
    int i8 = class7.getCredits();
    java.lang.String str9 = class7.toString();
    int i10 = class7.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Nome: Nome: || \nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 0\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 52\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: ||| | \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str9.equals("Nome: Nome: || \nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 0\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 52\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: ||| | \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test290"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", 0, true, false, (int)(byte)1, "|");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.toString();
    java.util.ArrayList<personal.Student> arraylist_student10 = class7.getStudents();
    administrative.Course course11 = null;
    class7.setCourse(course11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n"+ "'", str9.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student10);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test291"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.listRequisites();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    boolean b29 = class17.isAvailable();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student38 = class37.getStudents();
    java.lang.String str39 = class37.getID();
    boolean b40 = class17.addPreRequisite(class37);
    boolean b41 = class7.addPreRequisite(class17);
    java.lang.String str42 = class17.getID();
    java.util.ArrayList<personal.Student> arraylist_student43 = class17.getStudents();
    int i44 = class17.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test292"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    java.lang.String str20 = class7.getID();
    boolean b21 = class7.isAvailable();
    int i22 = class7.getCredits();
    boolean b23 = class7.isElective();
    java.lang.String str24 = class7.listRequisites();
    java.util.ArrayList<personal.Student> arraylist_student25 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "|| "+ "'", str24.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student25);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test293"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    java.lang.String str14 = class7.listRequisites();
    administrative.Class class22 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)100, true, false, (int)'a', "hi!");
    java.lang.String str23 = class22.toString();
    boolean b24 = class7.addPreRequisite(class22);
    java.lang.String str25 = class22.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str23.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str25.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test294"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class15 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i16 = class15.getMinCredits();
    java.lang.String str17 = class15.getName();
    java.lang.String str18 = class15.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student19 = class15.getStudents();
    boolean b20 = class7.addPreRequisite(class15);
    java.lang.String str21 = class7.getTeacher();
    java.lang.String str22 = class7.reportIn();
    int i23 = class7.getCredits();
    boolean b24 = class7.isElective();
    java.util.ArrayList<personal.Student> arraylist_student25 = class7.getStudents();
    java.lang.String str26 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str21.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str22.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str26.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test295"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    java.lang.String str20 = class7.toString();
    boolean b21 = class7.isElective();
    java.lang.String str22 = class7.getID();
    java.lang.String str23 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str20.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test296"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    java.lang.String str20 = class7.getID();
    boolean b21 = class7.isAvailable();
    int i22 = class7.getCredits();
    personal.Student student23 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b24 = class7.enroll(student23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test297"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    java.lang.String str62 = class37.toString();
    boolean b63 = class37.isAvailable();
    java.lang.String str64 = class37.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str62.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + ""+ "'", str64.equals(""));

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test298"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "|", 32, true, false, 1, "|| ");
    administrative.Class class15 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    java.util.ArrayList<personal.Student> arraylist_student16 = class15.getStudents();
    java.lang.String str17 = class15.reportIn();
    java.lang.String str18 = class15.reportIn();
    boolean b19 = class7.addPreRequisite(class15);
    boolean b20 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str17.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str18.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test299"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "|| ", (int)(byte)1, true, true, (int)(byte)1, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.listRequisites();
    boolean b9 = class7.isAvailable();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    personal.Student student12 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = class7.enroll(student12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test300"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    java.lang.String str20 = class7.getID();
    java.lang.String str21 = class7.getName();
    java.lang.String str22 = class7.getID();
    int i23 = class7.getCredits();
    java.lang.String str24 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test301"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.listRequisites();
    java.lang.String str10 = class7.reportIn();
    int i11 = class7.getCredits();
    int i12 = class7.getCredits();
    int i13 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test302"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    java.lang.String str10 = class7.reportIn();
    administrative.Class class18 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class26 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i27 = class26.getMinCredits();
    java.lang.String str28 = class26.getName();
    java.lang.String str29 = class26.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student30 = class26.getStudents();
    boolean b31 = class18.addPreRequisite(class26);
    java.lang.String str32 = class18.getTeacher();
    boolean b33 = class7.addPreRequisite(class18);
    administrative.Course course34 = null;
    class18.setCourse(course34);
    java.lang.String str36 = class18.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str32.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str36.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test303"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    boolean b22 = class17.isElective();
    java.lang.String str23 = class17.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student24 = class17.getStudents();
    java.lang.String str25 = class17.getTeacher();
    java.lang.String str26 = class17.getID();
    personal.Student student27 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b28 = class17.enroll(student27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test304"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    boolean b32 = class29.isElective();
    java.lang.String str33 = class29.toString();
    java.lang.String str34 = class29.toString();
    java.lang.String str35 = class29.getTeacher();
    int i36 = class29.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str33.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str34.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test305"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    java.lang.String str22 = class17.listRequisites();
    java.lang.String str23 = class17.getID();
    boolean b24 = class17.isAvailable();
    boolean b25 = class17.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "|"+ "'", str22.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test306"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    boolean b62 = class37.isElective();
    int i63 = class37.getMinCredits();
    int i64 = class37.getCredits();
    java.lang.String str65 = class37.reportIn();
    java.lang.String str66 = class37.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + ""+ "'", str65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str66.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test307"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n", (int)(byte)1, false, true, 32, "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.getTeacher();
    boolean b9 = class7.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test308"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.listRequisites();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    boolean b29 = class17.isAvailable();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student38 = class37.getStudents();
    java.lang.String str39 = class37.getID();
    boolean b40 = class17.addPreRequisite(class37);
    boolean b41 = class7.addPreRequisite(class17);
    java.lang.String str42 = class17.getID();
    java.lang.String str43 = class17.getName();
    java.lang.String str44 = class17.getName();
    java.lang.String str45 = class17.getTeacher();
    java.lang.String str46 = class17.reportIn();
    boolean b47 = class17.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + ""+ "'", str45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + ""+ "'", str46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test309"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class15 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i16 = class15.getMinCredits();
    java.lang.String str17 = class15.getName();
    java.lang.String str18 = class15.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student19 = class15.getStudents();
    boolean b20 = class7.addPreRequisite(class15);
    java.lang.String str21 = class7.getTeacher();
    java.lang.String str22 = class7.reportIn();
    java.lang.String str23 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str21.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str22.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "|"+ "'", str23.equals("|"));

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test310"); }


    administrative.Class class7 = new administrative.Class("Nome: hi!\nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", (int)(short)0, false, true, (int)(byte)-1, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.toString();
    java.lang.String str9 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: Nome: hi!\nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: Nome: hi!\nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str9.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test311"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    int i8 = class7.getMinCredits();
    int i9 = class7.getCredits();
    java.lang.String str10 = class7.toString();
    boolean b11 = class7.isAvailable();
    java.lang.String str12 = class7.getID();
    boolean b13 = class7.isElective();
    boolean b14 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "|"+ "'", str12.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test312"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getID();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.getName();
    administrative.Class class13 = null;
    boolean b14 = class7.addPreRequisite(class13);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str15 = class7.toString();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "|"+ "'", str12.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test313"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.listRequisites();
    java.lang.String str10 = class7.reportIn();
    int i11 = class7.getCredits();
    int i12 = class7.getCredits();
    boolean b13 = class7.isAvailable();
    java.lang.String str14 = class7.toString();
    boolean b15 = class7.isAvailable();
    int i16 = class7.getMinCredits();
    boolean b17 = class7.isAvailable();
    java.lang.String str18 = class7.getTeacher();
    administrative.Course course19 = null;
    class7.setCourse(course19);
    java.lang.String str21 = class7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str14.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str21.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test314"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    java.lang.String str29 = class27.reportIn();
    boolean b30 = class7.addPreRequisite(class27);
    boolean b31 = class7.isElective();
    boolean b32 = class7.isAvailable();
    boolean b33 = class7.isElective();
    java.lang.String str34 = class7.toString();
    boolean b35 = class7.isAvailable();
    java.lang.String str36 = class7.toString();
    java.lang.String str37 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str34.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str36.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + ""+ "'", str37.equals(""));

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test315"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.listRequisites();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    personal.Student student12 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = class7.enroll(student12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test316"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    java.lang.String str22 = class17.listRequisites();
    java.lang.String str23 = class17.reportIn();
    administrative.Course course24 = null;
    class17.setCourse(course24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "|"+ "'", str22.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test317"); }


    administrative.Class class7 = new administrative.Class("hi!", "", (int)(byte)10, false, true, 32, "");
    administrative.Course course8 = null;
    class7.setCourse(course8);
    java.lang.String str10 = class7.toString();
    administrative.Class class18 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i19 = class18.getMinCredits();
    java.lang.String str20 = class18.reportIn();
    administrative.Class class28 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b29 = class18.addPreRequisite(class28);
    java.lang.String str30 = class28.listRequisites();
    administrative.Course course31 = null;
    class28.setCourse(course31);
    boolean b33 = class7.addPreRequisite(class28);
    personal.Student student34 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b35 = class28.enroll(student34);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: hi!\nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: hi!\nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "|"+ "'", str30.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test318"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.listRequisites();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.util.ArrayList<personal.Student> arraylist_student12 = class7.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    java.lang.String str14 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test319"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    administrative.Course course8 = null;
    class7.setCourse(course8);
    administrative.Class class17 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "", (int)'a', false, true, (-1), "|| ");
    java.lang.String str18 = class17.toString();
    boolean b19 = class7.addPreRequisite(class17);
    int i20 = class7.getCredits();
    boolean b21 = class7.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"+ "'", str18.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test320"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    java.lang.String str20 = class7.toString();
    boolean b21 = class7.isElective();
    java.lang.String str22 = class7.getID();
    boolean b23 = class7.isElective();
    int i24 = class7.getMinCredits();
    int i25 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str20.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test321"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student12 = class7.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    int i14 = class7.getCredits();
    java.util.ArrayList<personal.Student> arraylist_student15 = class7.getStudents();
    administrative.Class class23 = new administrative.Class("hi!", "", (int)(byte)10, false, true, 32, "");
    administrative.Course course24 = null;
    class23.setCourse(course24);
    java.lang.String str26 = class23.getTeacher();
    int i27 = class23.getMinCredits();
    boolean b28 = class7.addPreRequisite(class23);
    personal.Student student29 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b30 = class23.enroll(student29);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test322"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    java.lang.String str29 = class27.reportIn();
    boolean b30 = class7.addPreRequisite(class27);
    java.lang.String str31 = class27.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test323"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.reportIn();
    java.lang.String str20 = class17.getTeacher();
    java.lang.String str21 = class17.listRequisites();
    boolean b22 = class17.isAvailable();
    boolean b23 = class17.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "|"+ "'", str21.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test324"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "", (int)'a', false, true, (-1), "|| ");
    java.lang.String str8 = class7.toString();
    java.lang.String str9 = class7.listRequisites();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    boolean b19 = class17.isAvailable();
    java.lang.String str20 = class17.getName();
    boolean b21 = class7.addPreRequisite(class17);
    java.lang.String str22 = class17.reportIn();
    java.lang.String str23 = class17.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str23.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test325"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getCredits();
    java.lang.String str9 = class7.getTeacher();
    boolean b10 = class7.isAvailable();
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test326"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | | \nProfessor: \nMatriculado(a)s: \n\n", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)-1, true, false, (int)(short)1, "Nome: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 52\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: ||| | \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test327"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    int i10 = class7.getCredits();
    int i11 = class7.getMinCredits();
    administrative.Course course12 = null;
    class7.setCourse(course12);
    personal.Student student14 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = class7.enroll(student14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test328"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student20 = class17.getStudents();
    java.lang.String str21 = class17.toString();
    java.lang.String str22 = class17.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str21.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test329"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.reportIn();
    java.lang.String str20 = class17.getID();
    boolean b21 = class17.isElective();
    java.lang.String str22 = class17.reportIn();
    int i23 = class17.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test330"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str8 = class7.listRequisites();
    boolean b9 = class7.isAvailable();
    java.lang.String str10 = class7.reportIn();
    administrative.Course course11 = null;
    class7.setCourse(course11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test331"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.reportIn();
    java.lang.String str13 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test332"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student12 = class7.getStudents();
    administrative.Class class20 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b21 = class20.isElective();
    java.lang.String str22 = class20.listRequisites();
    administrative.Class class30 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i31 = class30.getMinCredits();
    java.lang.String str32 = class30.reportIn();
    administrative.Class class40 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b41 = class30.addPreRequisite(class40);
    boolean b42 = class30.isAvailable();
    administrative.Class class50 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student51 = class50.getStudents();
    java.lang.String str52 = class50.getID();
    boolean b53 = class30.addPreRequisite(class50);
    boolean b54 = class20.addPreRequisite(class30);
    int i55 = class20.getMinCredits();
    administrative.Class class63 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str64 = class63.listRequisites();
    administrative.Course course65 = null;
    class63.setCourse(course65);
    boolean b67 = class20.addPreRequisite(class63);
    boolean b68 = class7.addPreRequisite(class63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "|"+ "'", str22.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + ""+ "'", str52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "|"+ "'", str64.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test333"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.listRequisites();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    boolean b29 = class17.isAvailable();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student38 = class37.getStudents();
    java.lang.String str39 = class37.getID();
    boolean b40 = class17.addPreRequisite(class37);
    boolean b41 = class7.addPreRequisite(class17);
    java.lang.String str42 = class17.getID();
    java.lang.String str43 = class17.getName();
    java.lang.String str44 = class17.getName();
    java.lang.String str45 = class17.listRequisites();
    int i46 = class17.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "|| | "+ "'", str45.equals("|| | "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test334"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.listRequisites();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    boolean b29 = class17.isAvailable();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student38 = class37.getStudents();
    java.lang.String str39 = class37.getID();
    boolean b40 = class17.addPreRequisite(class37);
    boolean b41 = class7.addPreRequisite(class17);
    java.lang.String str42 = class7.toString();
    int i43 = class7.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str42.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test335"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", "Nome: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 0\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", 0, true, true, 1, "");

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test336"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    java.lang.String str10 = class7.reportIn();
    boolean b11 = class7.isElective();
    java.lang.String str12 = class7.reportIn();
    java.lang.String str13 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test337"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    boolean b22 = class17.isElective();
    java.lang.String str23 = class17.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student24 = class17.getStudents();
    java.lang.String str25 = class17.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student26 = class17.getStudents();
    java.lang.String str27 = class17.listRequisites();
    java.lang.String str28 = class17.listRequisites();
    java.lang.String str29 = class17.getName();
    boolean b30 = class17.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "|"+ "'", str27.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "|"+ "'", str28.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test338"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    int i12 = class7.getCredits();
    java.lang.String str13 = class7.getName();
    java.lang.String str14 = class7.toString();
    java.lang.String str15 = class7.listRequisites();
    java.lang.String str16 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str14.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "|"+ "'", str15.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test339"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.reportIn();
    boolean b13 = class7.isElective();
    java.lang.String str14 = class7.getTeacher();
    java.lang.String str15 = class7.getName();
    administrative.Course course16 = null;
    class7.setCourse(course16);
    java.lang.String str18 = class7.listRequisites();
    boolean b19 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "|"+ "'", str18.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test340"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    administrative.Course course9 = null;
    class7.setCourse(course9);
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getTeacher();
    java.lang.String str13 = class7.reportIn();
    java.lang.String str14 = class7.getID();
    java.lang.String str15 = class7.getName();
    boolean b16 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test341"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n", (int)(byte)1, false, true, 32, "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.getTeacher();
    boolean b9 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test342"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.listRequisites();
    java.lang.String str13 = class7.getName();
    java.lang.String str14 = class7.getName();
    java.lang.String str15 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "|"+ "'", str12.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test343"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.getName();
    java.lang.String str30 = class27.getID();
    java.lang.String str31 = class27.getTeacher();
    java.lang.String str32 = class27.getName();
    java.lang.String str33 = class27.reportIn();
    boolean b34 = class7.addPreRequisite(class27);
    java.lang.String str35 = class27.getID();
    java.lang.String str36 = class27.getName();
    boolean b37 = class27.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + ""+ "'", str30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test344"); }


    administrative.Class class7 = new administrative.Class("", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)0, true, false, (int)'#', "|| ");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test345"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    boolean b62 = class37.isElective();
    int i63 = class37.getMinCredits();
    int i64 = class37.getCredits();
    java.lang.String str65 = class37.reportIn();
    personal.Student student66 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b67 = class37.enroll(student66);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + ""+ "'", str65.equals(""));

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test346"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    boolean b32 = class29.isElective();
    java.lang.String str33 = class29.toString();
    java.lang.String str34 = class29.getTeacher();
    int i35 = class29.getCredits();
    java.lang.String str36 = class29.getID();
    java.util.ArrayList<personal.Student> arraylist_student37 = class29.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str33.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student37);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test347"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.getName();
    java.lang.String str20 = class17.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student21 = class17.getStudents();
    boolean b22 = class7.addPreRequisite(class17);
    int i23 = class7.getMinCredits();
    int i24 = class7.getCredits();
    int i25 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test348"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student12 = class7.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    int i14 = class7.getCredits();
    administrative.Class class22 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str23 = class22.listRequisites();
    java.lang.String str24 = class22.getTeacher();
    java.lang.String str25 = class22.reportIn();
    administrative.Class class33 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class41 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i42 = class41.getMinCredits();
    java.lang.String str43 = class41.getName();
    java.lang.String str44 = class41.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student45 = class41.getStudents();
    boolean b46 = class33.addPreRequisite(class41);
    java.lang.String str47 = class33.getTeacher();
    boolean b48 = class22.addPreRequisite(class33);
    java.lang.String str49 = class33.toString();
    int i50 = class33.getCredits();
    boolean b51 = class7.addPreRequisite(class33);
    personal.Student student52 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b53 = class7.enroll(student52);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "|"+ "'", str23.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str47.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str49.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test349"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    boolean b62 = class37.isElective();
    int i63 = class37.getMinCredits();
    administrative.Course course64 = null;
    class37.setCourse(course64);
    java.lang.String str66 = class37.listRequisites();
    administrative.Class class74 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class82 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i83 = class82.getMinCredits();
    java.lang.String str84 = class82.getName();
    java.lang.String str85 = class82.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student86 = class82.getStudents();
    boolean b87 = class74.addPreRequisite(class82);
    java.lang.String str88 = class74.getTeacher();
    boolean b89 = class37.addPreRequisite(class74);
    java.lang.String str90 = class74.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "|| "+ "'", str66.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + ""+ "'", str84.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + ""+ "'", str85.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str88.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str90.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test350"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getID();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    int i12 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 32);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test351"); }


    administrative.Class class7 = new administrative.Class("hi!", "|", (int)(byte)100, false, false, 1, "|| ");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    administrative.Class class16 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str17 = class16.listRequisites();
    java.lang.String str18 = class16.getTeacher();
    administrative.Course course19 = null;
    class16.setCourse(course19);
    int i21 = class16.getCredits();
    java.lang.String str22 = class16.listRequisites();
    administrative.Class class30 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str31 = class30.listRequisites();
    java.lang.String str32 = class30.getTeacher();
    administrative.Course course33 = null;
    class30.setCourse(course33);
    java.lang.String str35 = class30.reportIn();
    java.lang.String str36 = class30.getName();
    boolean b37 = class16.addPreRequisite(class30);
    java.lang.String str38 = class16.getName();
    boolean b39 = class7.addPreRequisite(class16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "|"+ "'", str17.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "|"+ "'", str22.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "|"+ "'", str31.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test352"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n", (int)(byte)1, true, true, (int)(short)-1, "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.reportIn();
    java.lang.String str9 = class7.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: |\nC\u00F3digo: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: |\nC\u00F3digo: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Nome: |\nC\u00F3digo: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str9.equals("Nome: |\nC\u00F3digo: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test353"); }


    administrative.Class class7 = new administrative.Class("", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)0, true, false, (int)'#', "|| ");
    java.lang.String str8 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test354"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    java.lang.String str10 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.toString();
    java.lang.String str13 = class7.reportIn();
    java.lang.String str14 = class7.getID();
    java.lang.String str15 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str12.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "|"+ "'", str15.equals("|"));

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test355"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.getName();
    boolean b13 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test356"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    administrative.Course course8 = null;
    class7.setCourse(course8);
    administrative.Class class17 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "", (int)'a', false, true, (-1), "|| ");
    java.lang.String str18 = class17.toString();
    boolean b19 = class7.addPreRequisite(class17);
    int i20 = class17.getCredits();
    java.util.ArrayList<personal.Student> arraylist_student21 = class17.getStudents();
    int i22 = class17.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"+ "'", str18.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 97);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test357"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    java.lang.String str20 = class7.getID();
    java.lang.String str21 = class7.getName();
    java.lang.String str22 = class7.getID();
    boolean b23 = class7.isElective();
    int i24 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test358"); }


    administrative.Class class7 = new administrative.Class("", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)0, true, false, (int)'#', "|| ");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getName();
    int i10 = class7.getCredits();
    administrative.Course course11 = null;
    class7.setCourse(course11);
    personal.Student student13 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = class7.enroll(student13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test359"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)(byte)10, false, false, (int)'4', "|| ");
    boolean b8 = class7.isElective();
    boolean b9 = class7.isElective();
    java.lang.String str10 = class7.getTeacher();
    administrative.Class class18 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "|", 32, true, false, 1, "|| ");
    boolean b19 = class7.addPreRequisite(class18);
    java.lang.String str20 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "|| "+ "'", str10.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "||| "+ "'", str20.equals("||| "));

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test360"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    java.lang.String str9 = class7.getID();
    java.lang.String str10 = class7.toString();
    administrative.Course course11 = null;
    class7.setCourse(course11);
    administrative.Class class20 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i21 = class20.getMinCredits();
    java.lang.String str22 = class20.reportIn();
    administrative.Class class30 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b31 = class20.addPreRequisite(class30);
    java.lang.String str32 = class20.getTeacher();
    java.lang.String str33 = class20.toString();
    int i34 = class20.getMinCredits();
    boolean b35 = class7.addPreRequisite(class20);
    int i36 = class20.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str33.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test361"); }


    administrative.Class class7 = new administrative.Class("", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)0, true, false, (int)'#', "|| ");
    java.lang.String str8 = class7.getTeacher();
    java.lang.String str9 = class7.getID();
    java.lang.String str10 = class7.getName();
    java.lang.String str11 = class7.toString();
    java.lang.String str12 = class7.getName();
    personal.Student student13 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = class7.enroll(student13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|| "+ "'", str8.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str9.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Nome: \nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"+ "'", str11.equals("Nome: \nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test362"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    int i12 = class7.getCredits();
    java.lang.String str13 = class7.getName();
    java.lang.String str14 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test363"); }


    administrative.Class class7 = new administrative.Class("", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)0, true, false, (int)'#', "|| ");
    java.lang.String str8 = class7.reportIn();
    int i9 = class7.getMinCredits();
    int i10 = class7.getMinCredits();
    java.lang.String str11 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "|| "+ "'", str11.equals("|| "));

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test364"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student28 = class27.getStudents();
    java.lang.String str29 = class27.getID();
    boolean b30 = class7.addPreRequisite(class27);
    boolean b31 = class7.isAvailable();
    java.lang.String str32 = class7.reportIn();
    java.lang.String str33 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "|| | "+ "'", str33.equals("|| | "));

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test365"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)100, true, false, (int)'a', "hi!");
    java.lang.String str8 = class7.toString();
    java.lang.String str9 = class7.reportIn();
    personal.Student student10 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b11 = class7.enroll(student10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test366"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    boolean b14 = class7.isElective();
    administrative.Class class22 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)10, true, false, (int)' ', "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n");
    int i23 = class22.getMinCredits();
    java.lang.String str24 = class22.getID();
    int i25 = class22.getCredits();
    boolean b26 = class7.addPreRequisite(class22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str24.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test367"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    java.lang.String str62 = class37.toString();
    java.lang.String str63 = class37.listRequisites();
    java.lang.String str64 = class37.listRequisites();
    administrative.Class class72 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", 0, true, false, (int)(byte)1, "|");
    java.util.ArrayList<personal.Student> arraylist_student73 = class72.getStudents();
    boolean b74 = class37.addPreRequisite(class72);
    java.lang.String str75 = class72.reportIn();
    java.lang.String str76 = class72.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str62.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "|| "+ "'", str63.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "|| "+ "'", str64.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + ""+ "'", str75.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "|"+ "'", str76.equals("|"));

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test368"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    java.lang.String str29 = class27.reportIn();
    boolean b30 = class7.addPreRequisite(class27);
    boolean b31 = class7.isElective();
    boolean b32 = class7.isAvailable();
    boolean b33 = class7.isElective();
    java.lang.String str34 = class7.toString();
    boolean b35 = class7.isAvailable();
    java.lang.String str36 = class7.toString();
    java.lang.String str37 = class7.listRequisites();
    boolean b38 = class7.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str34.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str36.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "|| "+ "'", str37.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test369"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    administrative.Course course9 = null;
    class7.setCourse(course9);
    int i11 = class7.getMinCredits();
    java.lang.String str12 = class7.toString();
    administrative.Class class20 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i21 = class20.getMinCredits();
    java.lang.String str22 = class20.reportIn();
    administrative.Class class30 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b31 = class20.addPreRequisite(class30);
    boolean b32 = class20.isAvailable();
    administrative.Class class40 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student41 = class40.getStudents();
    java.lang.String str42 = class40.getID();
    boolean b43 = class20.addPreRequisite(class40);
    int i44 = class20.getCredits();
    java.lang.String str45 = class20.getID();
    administrative.Class class53 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i54 = class53.getMinCredits();
    java.lang.String str55 = class53.reportIn();
    administrative.Class class63 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b64 = class53.addPreRequisite(class63);
    java.lang.String str65 = class63.listRequisites();
    administrative.Class class73 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i74 = class73.getMinCredits();
    java.lang.String str75 = class73.reportIn();
    administrative.Class class83 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b84 = class73.addPreRequisite(class83);
    boolean b85 = class63.addPreRequisite(class83);
    administrative.Course course86 = null;
    class83.setCourse(course86);
    boolean b88 = class20.addPreRequisite(class83);
    boolean b89 = class7.addPreRequisite(class83);
    boolean b90 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str12.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + ""+ "'", str45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + ""+ "'", str55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "|"+ "'", str65.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + ""+ "'", str75.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test370"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)10, true, false, (int)' ', "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n");
    administrative.Class class15 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i16 = class15.getMinCredits();
    java.lang.String str17 = class15.getName();
    java.lang.String str18 = class15.getID();
    java.lang.String str19 = class15.getTeacher();
    java.lang.String str20 = class15.getName();
    java.lang.String str21 = class15.reportIn();
    java.lang.String str22 = class15.getTeacher();
    boolean b23 = class7.addPreRequisite(class15);
    java.lang.String str24 = class7.getName();
    administrative.Class class32 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i33 = class32.getMinCredits();
    java.lang.String str34 = class32.reportIn();
    administrative.Class class42 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b43 = class32.addPreRequisite(class42);
    boolean b44 = class42.isElective();
    java.lang.String str45 = class42.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student46 = class42.getStudents();
    boolean b47 = class7.addPreRequisite(class42);
    administrative.Class class55 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i56 = class55.getMinCredits();
    java.lang.String str57 = class55.reportIn();
    administrative.Class class65 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b66 = class55.addPreRequisite(class65);
    java.lang.String str67 = class65.listRequisites();
    administrative.Class class75 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i76 = class75.getMinCredits();
    java.lang.String str77 = class75.reportIn();
    administrative.Class class85 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b86 = class75.addPreRequisite(class85);
    boolean b87 = class65.addPreRequisite(class85);
    int i88 = class65.getCredits();
    boolean b89 = class7.addPreRequisite(class65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "|"+ "'", str24.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + ""+ "'", str45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + ""+ "'", str57.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "|"+ "'", str67.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + ""+ "'", str77.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test371"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: \nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 0\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "Nome: hi!\nC\u00F3digo: |\nCr\u00E9ditos: 100\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", 97, false, true, 0, "|");

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test372"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    java.lang.String str10 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.toString();
    administrative.Class class20 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i21 = class20.getMinCredits();
    java.lang.String str22 = class20.getName();
    java.lang.String str23 = class20.getID();
    java.lang.String str24 = class20.getTeacher();
    java.lang.String str25 = class20.getName();
    java.util.ArrayList<personal.Student> arraylist_student26 = class20.getStudents();
    boolean b27 = class7.addPreRequisite(class20);
    java.lang.String str28 = class7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str12.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str28.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test373"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    java.lang.String str9 = class7.getID();
    boolean b10 = class7.isAvailable();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.listRequisites();
    java.lang.String str13 = class7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "|"+ "'", str12.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str13.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test374"); }


    administrative.Class class7 = new administrative.Class("", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)0, true, false, (int)'#', "|| ");
    java.lang.String str8 = class7.reportIn();
    int i9 = class7.getMinCredits();
    int i10 = class7.getMinCredits();
    boolean b11 = class7.isAvailable();
    java.lang.String str12 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "|| "+ "'", str12.equals("|| "));

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test375"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)(byte)10, false, false, (int)'4', "|| ");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.getID();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str18 = class17.listRequisites();
    java.lang.String str19 = class17.getTeacher();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    int i22 = class17.getCredits();
    int i23 = class17.getMinCredits();
    boolean b24 = class7.addPreRequisite(class17);
    administrative.Class class32 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i33 = class32.getMinCredits();
    java.lang.String str34 = class32.reportIn();
    administrative.Class class42 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b43 = class32.addPreRequisite(class42);
    boolean b44 = class32.isAvailable();
    administrative.Class class52 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i53 = class52.getMinCredits();
    java.lang.String str54 = class52.getName();
    java.lang.String str55 = class52.getID();
    java.lang.String str56 = class52.getTeacher();
    java.lang.String str57 = class52.getName();
    java.lang.String str58 = class52.reportIn();
    boolean b59 = class32.addPreRequisite(class52);
    boolean b60 = class7.addPreRequisite(class32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "|"+ "'", str18.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + ""+ "'", str54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + ""+ "'", str55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + ""+ "'", str56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + ""+ "'", str57.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + ""+ "'", str58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test376"); }


    administrative.Class class7 = new administrative.Class("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: || \nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "|Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n| ", (int)(byte)100, false, false, 52, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: || \nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nC\u00F3digo: |Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n| \nCr\u00E9ditos: 100\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: || \nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nC\u00F3digo: |Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n| \nCr\u00E9ditos: 100\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test377"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.reportIn();
    java.lang.String str20 = class17.getID();
    boolean b21 = class17.isElective();
    java.lang.String str22 = class17.toString();
    boolean b23 = class17.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str22.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test378"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    java.lang.String str10 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.toString();
    int i13 = class7.getCredits();
    java.lang.String str14 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str12.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test379"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    administrative.Class class39 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i40 = class39.getMinCredits();
    java.lang.String str41 = class39.getName();
    java.lang.String str42 = class39.getID();
    java.lang.String str43 = class39.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student44 = class39.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student45 = class39.getStudents();
    boolean b46 = class29.addPreRequisite(class39);
    java.lang.String str47 = class29.getTeacher();
    int i48 = class29.getCredits();
    boolean b49 = class29.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + ""+ "'", str47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test380"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    int i12 = class7.getCredits();
    java.lang.String str13 = class7.getTeacher();
    java.lang.String str14 = class7.getID();
    int i15 = class7.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test381"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    administrative.Course course19 = null;
    class17.setCourse(course19);
    java.lang.String str21 = class17.getTeacher();
    java.lang.String str22 = class17.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student23 = class17.getStudents();
    administrative.Course course24 = null;
    class17.setCourse(course24);
    boolean b26 = class17.isElective();
    administrative.Course course27 = null;
    class17.setCourse(course27);
    personal.Student student29 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b30 = class17.enroll(student29);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test382"); }


    administrative.Class class7 = new administrative.Class("hi!", "", (int)(byte)10, false, true, 32, "");
    administrative.Course course8 = null;
    class7.setCourse(course8);
    java.lang.String str10 = class7.toString();
    administrative.Class class18 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i19 = class18.getMinCredits();
    java.lang.String str20 = class18.reportIn();
    administrative.Class class28 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b29 = class18.addPreRequisite(class28);
    java.lang.String str30 = class28.listRequisites();
    administrative.Course course31 = null;
    class28.setCourse(course31);
    boolean b33 = class7.addPreRequisite(class28);
    java.lang.String str34 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: hi!\nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: hi!\nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "|"+ "'", str30.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "|| "+ "'", str34.equals("|| "));

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test383"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    boolean b12 = class7.isAvailable();
    java.lang.String str13 = class7.reportIn();
    administrative.Class class21 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i22 = class21.getMinCredits();
    java.lang.String str23 = class21.reportIn();
    administrative.Class class31 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b32 = class21.addPreRequisite(class31);
    java.lang.String str33 = class31.reportIn();
    java.lang.String str34 = class31.getID();
    boolean b35 = class31.isElective();
    boolean b36 = class31.isElective();
    java.lang.String str37 = class31.toString();
    boolean b38 = class7.addPreRequisite(class31);
    int i39 = class31.getMinCredits();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class57.isElective();
    java.lang.String str60 = class57.reportIn();
    administrative.Class class68 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    boolean b69 = class57.addPreRequisite(class68);
    boolean b70 = class31.addPreRequisite(class57);
    java.lang.String str71 = class57.reportIn();
    administrative.Course course72 = null;
    class57.setCourse(course72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str37.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + ""+ "'", str71.equals(""));

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test384"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)10, true, false, (int)' ', "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.getID();
    boolean b9 = class7.isElective();
    java.lang.String str10 = class7.getName();
    java.lang.String str11 = class7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "|"+ "'", str10.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str11.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test385"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getID();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    administrative.Course course12 = null;
    class7.setCourse(course12);
    java.lang.String str14 = class7.getName();
    java.lang.String str15 = class7.listRequisites();
    int i16 = class7.getCredits();
    int i17 = class7.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "|"+ "'", str15.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test386"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    boolean b32 = class29.isElective();
    java.lang.String str33 = class29.toString();
    java.lang.String str34 = class29.toString();
    java.util.ArrayList<personal.Student> arraylist_student35 = class29.getStudents();
    java.lang.String str36 = class29.getName();
    boolean b37 = class29.isAvailable();
    int i38 = class29.getMinCredits();
    administrative.Course course39 = null;
    class29.setCourse(course39);
    int i41 = class29.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str33.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str34.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test387"); }


    administrative.Class class7 = new administrative.Class("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n", "|| ", 35, false, false, 10, "Nome: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n\nC\u00F3digo: |\nCr\u00E9ditos: 0\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test388"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    java.lang.String str10 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.toString();
    administrative.Class class20 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i21 = class20.getMinCredits();
    java.lang.String str22 = class20.getName();
    java.lang.String str23 = class20.getID();
    java.lang.String str24 = class20.getTeacher();
    java.lang.String str25 = class20.getName();
    java.util.ArrayList<personal.Student> arraylist_student26 = class20.getStudents();
    boolean b27 = class7.addPreRequisite(class20);
    java.lang.String str28 = class20.getID();
    java.lang.String str29 = class20.toString();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i38 = class37.getMinCredits();
    java.lang.String str39 = class37.reportIn();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b48 = class37.addPreRequisite(class47);
    boolean b49 = class37.isAvailable();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student58 = class57.getStudents();
    java.lang.String str59 = class57.getID();
    boolean b60 = class37.addPreRequisite(class57);
    administrative.Class class68 = new administrative.Class("", "", (int)'4', false, false, (int)(short)10, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");
    java.util.ArrayList<personal.Student> arraylist_student69 = class68.getStudents();
    java.lang.String str70 = class68.getID();
    administrative.Class class78 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "|", 32, true, false, 1, "|| ");
    boolean b79 = class68.addPreRequisite(class78);
    boolean b80 = class37.addPreRequisite(class68);
    int i81 = class37.getMinCredits();
    boolean b82 = class20.addPreRequisite(class37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str12.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str29.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + ""+ "'", str59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + ""+ "'", str70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test389"); }


    administrative.Class class7 = new administrative.Class("|| | ", "", 10, false, false, 0, "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: || | \nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 0\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: || | \nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 0\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test390"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.getName();
    java.lang.String str13 = class7.getName();
    java.lang.String str14 = class7.toString();
    administrative.Course course15 = null;
    class7.setCourse(course15);
    java.util.ArrayList<personal.Student> arraylist_student17 = class7.getStudents();
    administrative.Class class25 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)100, true, false, (int)'a', "hi!");
    java.lang.String str26 = class25.toString();
    java.lang.String str27 = class25.reportIn();
    boolean b28 = class7.addPreRequisite(class25);
    int i29 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str14.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str26.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test391"); }


    administrative.Class class7 = new administrative.Class("", "Nome: \nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", (int)(short)100, false, true, 1, "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test392"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    java.lang.String str62 = class37.toString();
    java.lang.String str63 = class37.listRequisites();
    java.lang.String str64 = class37.getName();
    boolean b65 = class37.isAvailable();
    personal.Student student66 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b67 = class37.enroll(student66);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str62.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "|| "+ "'", str63.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + ""+ "'", str64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test393"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    boolean b39 = class17.addPreRequisite(class37);
    boolean b40 = class37.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test394"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student12 = class7.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    int i14 = class7.getCredits();
    administrative.Class class22 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str23 = class22.listRequisites();
    java.lang.String str24 = class22.getTeacher();
    java.lang.String str25 = class22.reportIn();
    administrative.Class class33 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class41 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i42 = class41.getMinCredits();
    java.lang.String str43 = class41.getName();
    java.lang.String str44 = class41.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student45 = class41.getStudents();
    boolean b46 = class33.addPreRequisite(class41);
    java.lang.String str47 = class33.getTeacher();
    boolean b48 = class22.addPreRequisite(class33);
    java.lang.String str49 = class33.toString();
    int i50 = class33.getCredits();
    boolean b51 = class7.addPreRequisite(class33);
    boolean b52 = class33.isAvailable();
    java.lang.String str53 = class33.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "|"+ "'", str23.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str47.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str49.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str53.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test395"); }


    administrative.Class class7 = new administrative.Class("", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)0, true, false, (int)'#', "|| ");
    java.lang.String str8 = class7.reportIn();
    int i9 = class7.getMinCredits();
    int i10 = class7.getMinCredits();
    boolean b11 = class7.isAvailable();
    java.util.ArrayList<personal.Student> arraylist_student12 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test396"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.reportIn();
    boolean b20 = class17.isAvailable();
    java.lang.String str21 = class17.toString();
    java.lang.String str22 = class17.getName();
    int i23 = class17.getCredits();
    java.lang.String str24 = class17.toString();
    personal.Student student25 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b26 = class17.enroll(student25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str21.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str24.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test397"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    java.lang.String str10 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.toString();
    administrative.Class class20 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i21 = class20.getMinCredits();
    java.lang.String str22 = class20.getName();
    java.lang.String str23 = class20.getID();
    java.lang.String str24 = class20.getTeacher();
    java.lang.String str25 = class20.getName();
    java.util.ArrayList<personal.Student> arraylist_student26 = class20.getStudents();
    boolean b27 = class7.addPreRequisite(class20);
    java.lang.String str28 = class20.getID();
    java.lang.String str29 = class20.toString();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str38 = class37.listRequisites();
    java.lang.String str39 = class37.getTeacher();
    administrative.Course course40 = null;
    class37.setCourse(course40);
    int i42 = class37.getCredits();
    java.lang.String str43 = class37.listRequisites();
    boolean b44 = class20.addPreRequisite(class37);
    personal.Student student45 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b46 = class20.enroll(student45);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str12.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str29.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "|"+ "'", str38.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "|"+ "'", str43.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test398"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    boolean b32 = class29.isElective();
    java.lang.String str33 = class29.toString();
    java.lang.String str34 = class29.getTeacher();
    java.lang.String str35 = class29.getID();
    administrative.Course course36 = null;
    class29.setCourse(course36);
    java.lang.String str38 = class29.getID();
    java.lang.String str39 = class29.listRequisites();
    java.lang.String str40 = class29.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str33.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test399"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    boolean b62 = class37.isElective();
    int i63 = class37.getMinCredits();
    int i64 = class37.getCredits();
    administrative.Course course65 = null;
    class37.setCourse(course65);
    java.lang.String str67 = class37.getTeacher();
    boolean b68 = class37.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + ""+ "'", str67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test400"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    java.lang.String str20 = class7.toString();
    java.lang.String str21 = class7.getTeacher();
    java.lang.String str22 = class7.reportIn();
    boolean b23 = class7.isAvailable();
    java.lang.String str24 = class7.getTeacher();
    java.lang.String str25 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str20.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test401"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "", (int)(short)100, true, true, (int)'a', "|");
    java.lang.String str8 = class7.reportIn();
    administrative.Class class16 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i17 = class16.getMinCredits();
    java.lang.String str18 = class16.reportIn();
    administrative.Class class26 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b27 = class16.addPreRequisite(class26);
    java.lang.String str28 = class26.reportIn();
    int i29 = class26.getMinCredits();
    boolean b30 = class7.addPreRequisite(class26);
    java.lang.String str31 = class7.getID();
    java.lang.String str32 = class7.toString();
    java.lang.String str33 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: || \nProfessor: |\nMatriculado(a)s: \n\n"+ "'", str32.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: || \nProfessor: |\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "|| "+ "'", str33.equals("|| "));

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test402"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "|", (int)'#', false, true, 52, "");
    java.lang.String str8 = class7.getName();
    administrative.Course course9 = null;
    class7.setCourse(course9);
    java.lang.String str11 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "|"+ "'", str11.equals("|"));

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test403"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 52\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: ||| | \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", (int)(short)10, true, false, (int)(short)10, "Nome: \nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n");
    int i8 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test404"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    boolean b12 = class7.isAvailable();
    administrative.Class class20 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i21 = class20.getMinCredits();
    java.lang.String str22 = class20.reportIn();
    administrative.Class class30 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b31 = class20.addPreRequisite(class30);
    java.lang.String str32 = class30.listRequisites();
    administrative.Class class40 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i41 = class40.getMinCredits();
    java.lang.String str42 = class40.reportIn();
    administrative.Class class50 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b51 = class40.addPreRequisite(class50);
    java.lang.String str52 = class50.listRequisites();
    administrative.Class class60 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i61 = class60.getMinCredits();
    java.lang.String str62 = class60.reportIn();
    administrative.Class class70 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b71 = class60.addPreRequisite(class70);
    boolean b72 = class50.addPreRequisite(class70);
    java.lang.String str73 = class50.getTeacher();
    boolean b74 = class30.addPreRequisite(class50);
    java.lang.String str75 = class50.toString();
    java.lang.String str76 = class50.listRequisites();
    boolean b77 = class7.addPreRequisite(class50);
    java.lang.String str78 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "|"+ "'", str32.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "|"+ "'", str52.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + ""+ "'", str62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + ""+ "'", str73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str75.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "|| "+ "'", str76.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + ""+ "'", str78.equals(""));

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test405"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "|", (int)'#', false, true, 52, "");
    java.lang.String str8 = class7.getName();
    administrative.Course course9 = null;
    class7.setCourse(course9);
    administrative.Course course11 = null;
    class7.setCourse(course11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 1\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test406"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.util.ArrayList<personal.Student> arraylist_student12 = class7.getStudents();
    administrative.Class class20 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str21 = class20.listRequisites();
    java.lang.String str22 = class20.getTeacher();
    java.lang.String str23 = class20.reportIn();
    administrative.Class class31 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class39 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i40 = class39.getMinCredits();
    java.lang.String str41 = class39.getName();
    java.lang.String str42 = class39.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student43 = class39.getStudents();
    boolean b44 = class31.addPreRequisite(class39);
    java.lang.String str45 = class31.getTeacher();
    boolean b46 = class20.addPreRequisite(class31);
    java.lang.String str47 = class31.toString();
    administrative.Class class55 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i56 = class55.getMinCredits();
    java.lang.String str57 = class55.reportIn();
    boolean b58 = class31.addPreRequisite(class55);
    boolean b59 = class7.addPreRequisite(class55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "|"+ "'", str21.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str45.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str47.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + ""+ "'", str57.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test407"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)(byte)10, false, false, (int)'4', "|| ");
    boolean b8 = class7.isElective();
    boolean b9 = class7.isElective();
    personal.Student student10 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b11 = class7.enroll(student10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test408"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 0\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", "Nome: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nC\u00F3digo: || | \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)100, true, false, (int)' ', "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | \nProfessor: \nMatriculado(a)s: \n\n");

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test409"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b8 = class7.isElective();
    java.util.ArrayList<personal.Student> arraylist_student9 = class7.getStudents();
    boolean b10 = class7.isElective();
    boolean b11 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test410"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    boolean b32 = class29.isElective();
    int i33 = class29.getMinCredits();
    java.util.ArrayList<personal.Student> arraylist_student34 = class29.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student34);

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test411"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    boolean b12 = class7.isAvailable();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    java.lang.String str14 = class7.toString();
    java.lang.String str15 = class7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str14.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str15.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test412"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    int i19 = class7.getCredits();
    java.lang.String str20 = class7.listRequisites();
    int i21 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "|| "+ "'", str20.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test413"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.reportIn();
    boolean b13 = class7.isElective();
    java.lang.String str14 = class7.getTeacher();
    java.lang.String str15 = class7.getName();
    boolean b16 = class7.isElective();
    administrative.Class class17 = null;
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test414"); }


    administrative.Class class7 = new administrative.Class("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n", "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n", (int)(byte)100, false, true, (int)(short)-1, "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    java.lang.String str10 = class7.listRequisites();
    administrative.Course course11 = null;
    class7.setCourse(course11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "|"+ "'", str10.equals("|"));

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test415"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    int i32 = class29.getMinCredits();
    java.lang.String str33 = class29.getID();
    java.util.ArrayList<personal.Student> arraylist_student34 = class29.getStudents();
    administrative.Class class42 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    administrative.Course course43 = null;
    class42.setCourse(course43);
    java.lang.String str45 = class42.getName();
    boolean b46 = class42.isAvailable();
    boolean b47 = class29.addPreRequisite(class42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "|"+ "'", str45.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test416"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.listRequisites();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    boolean b29 = class17.isAvailable();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student38 = class37.getStudents();
    java.lang.String str39 = class37.getID();
    boolean b40 = class17.addPreRequisite(class37);
    boolean b41 = class7.addPreRequisite(class17);
    java.lang.String str42 = class17.getID();
    java.util.ArrayList<personal.Student> arraylist_student43 = class17.getStudents();
    administrative.Class class51 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i52 = class51.getMinCredits();
    java.lang.String str53 = class51.reportIn();
    administrative.Class class61 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b62 = class51.addPreRequisite(class61);
    java.lang.String str63 = class61.listRequisites();
    administrative.Course course64 = null;
    class61.setCourse(course64);
    administrative.Class class73 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i74 = class73.getMinCredits();
    boolean b75 = class61.addPreRequisite(class73);
    boolean b76 = class73.isElective();
    java.lang.String str77 = class73.toString();
    java.lang.String str78 = class73.getTeacher();
    java.lang.String str79 = class73.getID();
    administrative.Course course80 = null;
    class73.setCourse(course80);
    boolean b82 = class73.isAvailable();
    boolean b83 = class17.addPreRequisite(class73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + ""+ "'", str53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "|"+ "'", str63.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str77.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + ""+ "'", str78.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + ""+ "'", str79.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test417"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student20 = class17.getStudents();
    administrative.Course course21 = null;
    class17.setCourse(course21);
    int i23 = class17.getMinCredits();
    boolean b24 = class17.isElective();
    java.util.ArrayList<personal.Student> arraylist_student25 = class17.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student25);

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test418"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    int i10 = class7.getCredits();
    int i11 = class7.getMinCredits();
    administrative.Course course12 = null;
    class7.setCourse(course12);
    java.lang.String str14 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test419"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n| \nProfessor: \nMatriculado(a)s: \n\n", "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", 0, false, true, 35, "Nome: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 35\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test420"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "|Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n| ", (int)(short)100, false, true, (int)(short)-1, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 52\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: ||| | \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n| "+ "'", str8.equals("|Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n| "));

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test421"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.reportIn();
    boolean b13 = class7.isElective();
    int i14 = class7.getCredits();
    administrative.Class class22 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class30 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i31 = class30.getMinCredits();
    java.lang.String str32 = class30.getName();
    java.lang.String str33 = class30.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student34 = class30.getStudents();
    boolean b35 = class22.addPreRequisite(class30);
    java.lang.String str36 = class22.getID();
    java.lang.String str37 = class22.reportIn();
    boolean b38 = class7.addPreRequisite(class22);
    boolean b39 = class22.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str36.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str37.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test422"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    boolean b39 = class17.addPreRequisite(class37);
    java.lang.String str40 = class17.getTeacher();
    int i41 = class17.getMinCredits();
    int i42 = class17.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test423"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.listRequisites();
    java.lang.String str13 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student14 = class7.getStudents();
    int i15 = class7.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "|"+ "'", str12.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test424"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.reportIn();
    java.lang.String str20 = class17.getID();
    int i21 = class17.getMinCredits();
    boolean b22 = class17.isAvailable();
    boolean b23 = class17.isElective();
    java.lang.String str24 = class17.reportIn();
    java.lang.String str25 = class17.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test425"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    java.lang.String str14 = class7.getTeacher();
    boolean b15 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test426"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class15 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i16 = class15.getMinCredits();
    java.lang.String str17 = class15.getName();
    java.lang.String str18 = class15.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student19 = class15.getStudents();
    boolean b20 = class7.addPreRequisite(class15);
    java.lang.String str21 = class7.getTeacher();
    java.lang.String str22 = class7.reportIn();
    int i23 = class7.getCredits();
    boolean b24 = class7.isElective();
    java.util.ArrayList<personal.Student> arraylist_student25 = class7.getStudents();
    java.lang.String str26 = class7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str21.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str22.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str26.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test427"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student12 = class7.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    int i14 = class7.getCredits();
    administrative.Class class22 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str23 = class22.listRequisites();
    java.lang.String str24 = class22.getTeacher();
    java.lang.String str25 = class22.reportIn();
    administrative.Class class33 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class41 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i42 = class41.getMinCredits();
    java.lang.String str43 = class41.getName();
    java.lang.String str44 = class41.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student45 = class41.getStudents();
    boolean b46 = class33.addPreRequisite(class41);
    java.lang.String str47 = class33.getTeacher();
    boolean b48 = class22.addPreRequisite(class33);
    java.lang.String str49 = class33.toString();
    int i50 = class33.getCredits();
    boolean b51 = class7.addPreRequisite(class33);
    administrative.Course course52 = null;
    class7.setCourse(course52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "|"+ "'", str23.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str47.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str49.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test428"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    int i12 = class7.getCredits();
    java.lang.String str13 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "|"+ "'", str13.equals("|"));

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test429"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getID();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    boolean b29 = class17.isAvailable();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student38 = class37.getStudents();
    java.lang.String str39 = class37.getID();
    boolean b40 = class17.addPreRequisite(class37);
    boolean b41 = class7.addPreRequisite(class37);
    boolean b42 = class37.isElective();
    java.lang.String str43 = class37.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str43.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test430"); }


    administrative.Class class7 = new administrative.Class("", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)0, true, false, (int)'#', "|| ");
    java.lang.String str8 = class7.getTeacher();
    java.lang.String str9 = class7.reportIn();
    boolean b10 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|| "+ "'", str8.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test431"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    java.lang.String str9 = class7.reportIn();
    java.lang.String str10 = class7.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    administrative.Class class19 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", "|", (int)(byte)10, false, false, (int)(byte)-1, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");
    java.lang.String str20 = class19.getTeacher();
    boolean b21 = class7.addPreRequisite(class19);
    administrative.Course course22 = null;
    class19.setCourse(course22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str9.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str20.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test432"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    administrative.Course course19 = null;
    class17.setCourse(course19);
    int i21 = class17.getCredits();
    java.lang.String str22 = class17.reportIn();
    java.lang.String str23 = class17.getName();
    boolean b24 = class17.isAvailable();
    java.lang.String str25 = class17.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "|"+ "'", str25.equals("|"));

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test433"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    java.lang.String str29 = class27.reportIn();
    boolean b30 = class7.addPreRequisite(class27);
    boolean b31 = class7.isElective();
    java.lang.String str32 = class7.getTeacher();
    java.lang.String str33 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "|| "+ "'", str33.equals("|| "));

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test434"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    java.lang.String str10 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.reportIn();
    java.lang.String str13 = class7.listRequisites();
    personal.Student student14 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = class7.enroll(student14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "|"+ "'", str13.equals("|"));

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test435"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    java.lang.String str29 = class27.reportIn();
    boolean b30 = class7.addPreRequisite(class27);
    boolean b31 = class7.isElective();
    java.lang.String str32 = class7.listRequisites();
    java.lang.String str33 = class7.reportIn();
    administrative.Course course34 = null;
    class7.setCourse(course34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "|| "+ "'", str32.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test436"); }


    administrative.Class class7 = new administrative.Class("|| | ", "", 10, false, false, 0, "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|| | "+ "'", str9.equals("|| | "));

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test437"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "", (int)(short)100, true, true, (int)'a', "|");
    java.lang.String str8 = class7.reportIn();
    administrative.Class class16 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i17 = class16.getMinCredits();
    java.lang.String str18 = class16.reportIn();
    administrative.Class class26 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b27 = class16.addPreRequisite(class26);
    java.lang.String str28 = class26.reportIn();
    int i29 = class26.getMinCredits();
    boolean b30 = class7.addPreRequisite(class26);
    personal.Student student31 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b32 = class26.enroll(student31);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test438"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.getID();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    boolean b14 = class7.isAvailable();
    java.lang.String str15 = class7.listRequisites();
    int i16 = class7.getCredits();
    int i17 = class7.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "|"+ "'", str15.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test439"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    boolean b62 = class37.isElective();
    int i63 = class37.getMinCredits();
    administrative.Course course64 = null;
    class37.setCourse(course64);
    int i66 = class37.getMinCredits();
    java.lang.String str67 = class37.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + ""+ "'", str67.equals(""));

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test440"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str8 = class7.listRequisites();
    boolean b9 = class7.isAvailable();
    boolean b10 = class7.isElective();
    int i11 = class7.getCredits();
    personal.Student student12 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = class7.enroll(student12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 32);

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test441"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    java.lang.String str10 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.toString();
    administrative.Class class20 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i21 = class20.getMinCredits();
    java.lang.String str22 = class20.getName();
    java.lang.String str23 = class20.getID();
    java.lang.String str24 = class20.getTeacher();
    java.lang.String str25 = class20.getName();
    java.util.ArrayList<personal.Student> arraylist_student26 = class20.getStudents();
    boolean b27 = class7.addPreRequisite(class20);
    java.lang.String str28 = class20.listRequisites();
    boolean b29 = class20.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str12.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "|"+ "'", str28.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test442"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | \nProfessor: \nMatriculado(a)s: \n\n", "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", (int)(byte)0, true, true, 52, "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");
    int i8 = class7.getCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n", "|", 0, false, false, 10, "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n");
    boolean b18 = class7.addPreRequisite(class17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str9.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test443"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    int i32 = class29.getMinCredits();
    int i33 = class29.getMinCredits();
    administrative.Course course34 = null;
    class29.setCourse(course34);
    administrative.Class class43 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str44 = class43.listRequisites();
    java.lang.String str45 = class43.getTeacher();
    administrative.Course course46 = null;
    class43.setCourse(course46);
    java.lang.String str48 = class43.reportIn();
    boolean b49 = class43.isElective();
    java.lang.String str50 = class43.reportIn();
    int i51 = class43.getCredits();
    administrative.Class class59 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str60 = class59.listRequisites();
    administrative.Course course61 = null;
    class59.setCourse(course61);
    java.lang.String str63 = class59.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student64 = class59.getStudents();
    boolean b65 = class43.addPreRequisite(class59);
    boolean b66 = class29.addPreRequisite(class43);
    java.lang.String str67 = class43.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "|"+ "'", str44.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + ""+ "'", str45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + ""+ "'", str48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + ""+ "'", str50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "|"+ "'", str60.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + ""+ "'", str63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "|| "+ "'", str67.equals("|| "));

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test444"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    administrative.Course course9 = null;
    class7.setCourse(course9);
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getTeacher();
    boolean b13 = class7.isAvailable();
    int i14 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test445"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    java.lang.String str10 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.toString();
    administrative.Class class20 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i21 = class20.getMinCredits();
    java.lang.String str22 = class20.getName();
    java.lang.String str23 = class20.getID();
    java.lang.String str24 = class20.getTeacher();
    java.lang.String str25 = class20.getName();
    java.util.ArrayList<personal.Student> arraylist_student26 = class20.getStudents();
    boolean b27 = class7.addPreRequisite(class20);
    java.lang.String str28 = class20.getID();
    java.lang.String str29 = class20.getID();
    int i30 = class20.getMinCredits();
    administrative.Class class38 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i39 = class38.getMinCredits();
    java.lang.String str40 = class38.reportIn();
    administrative.Class class48 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b49 = class38.addPreRequisite(class48);
    java.lang.String str50 = class48.listRequisites();
    administrative.Course course51 = null;
    class48.setCourse(course51);
    administrative.Class class60 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i61 = class60.getMinCredits();
    boolean b62 = class48.addPreRequisite(class60);
    boolean b63 = class60.isElective();
    java.lang.String str64 = class60.toString();
    java.lang.String str65 = class60.toString();
    boolean b66 = class60.isAvailable();
    administrative.Class class74 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student75 = class74.getStudents();
    java.lang.String str76 = class74.getID();
    java.lang.String str77 = class74.toString();
    administrative.Course course78 = null;
    class74.setCourse(course78);
    administrative.Class class80 = null;
    boolean b81 = class74.addPreRequisite(class80);
    boolean b82 = class60.addPreRequisite(class74);
    boolean b83 = class20.addPreRequisite(class74);
    java.lang.String str84 = class74.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str12.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "|"+ "'", str50.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str64.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str65.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + ""+ "'", str76.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str77.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + ""+ "'", str84.equals(""));

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test446"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", 0, true, false, (int)(byte)1, "|");
    personal.Student student8 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b9 = class7.enroll(student8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test447"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n", (int)(byte)1, false, true, 32, "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.getTeacher();
    java.lang.String str9 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n"+ "'", str9.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test448"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str8 = class7.getName();
    int i9 = class7.getMinCredits();
    java.lang.String str10 = class7.getTeacher();
    administrative.Course course11 = null;
    class7.setCourse(course11);
    personal.Student student13 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = class7.enroll(student13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!"+ "'", str10.equals("hi!"));

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test449"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    java.lang.String str29 = class27.reportIn();
    boolean b30 = class7.addPreRequisite(class27);
    boolean b31 = class7.isElective();
    int i32 = class7.getCredits();
    java.lang.String str33 = class7.getName();
    administrative.Class class41 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class49 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i50 = class49.getMinCredits();
    java.lang.String str51 = class49.getName();
    java.lang.String str52 = class49.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student53 = class49.getStudents();
    boolean b54 = class41.addPreRequisite(class49);
    boolean b55 = class7.addPreRequisite(class41);
    boolean b56 = class41.isAvailable();
    int i57 = class41.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + ""+ "'", str51.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + ""+ "'", str52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 52);

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test450"); }


    administrative.Class class7 = new administrative.Class("Nome: hi!\nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", "Nome: hi!\nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", 1, false, false, 1, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n| \nProfessor: \nMatriculado(a)s: \n\n");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Nome: hi!\nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str9.equals("Nome: hi!\nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 32\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test451"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class7.getTeacher();
    java.lang.String str20 = class7.toString();
    administrative.Course course21 = null;
    class7.setCourse(course21);
    boolean b23 = class7.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str20.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test452"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)10, true, false, (int)' ', "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n");
    administrative.Class class15 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i16 = class15.getMinCredits();
    java.lang.String str17 = class15.getName();
    java.lang.String str18 = class15.getID();
    java.lang.String str19 = class15.getTeacher();
    java.lang.String str20 = class15.getName();
    java.lang.String str21 = class15.reportIn();
    java.lang.String str22 = class15.getTeacher();
    boolean b23 = class7.addPreRequisite(class15);
    administrative.Class class31 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    int i32 = class31.getMinCredits();
    int i33 = class31.getCredits();
    administrative.Course course34 = null;
    class31.setCourse(course34);
    administrative.Class class43 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str44 = class43.listRequisites();
    java.lang.String str45 = class43.getID();
    administrative.Class class53 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i54 = class53.getMinCredits();
    java.lang.String str55 = class53.reportIn();
    administrative.Class class63 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b64 = class53.addPreRequisite(class63);
    boolean b65 = class53.isAvailable();
    administrative.Class class73 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student74 = class73.getStudents();
    java.lang.String str75 = class73.getID();
    boolean b76 = class53.addPreRequisite(class73);
    boolean b77 = class43.addPreRequisite(class73);
    int i78 = class73.getCredits();
    boolean b79 = class31.addPreRequisite(class73);
    boolean b80 = class7.addPreRequisite(class31);
    administrative.Course course81 = null;
    class7.setCourse(course81);
    int i83 = class7.getCredits();
    administrative.Course course84 = null;
    class7.setCourse(course84);
    personal.Student student86 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b87 = class7.enroll(student86);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + ""+ "'", str21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "|"+ "'", str44.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "|"+ "'", str45.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + ""+ "'", str55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + ""+ "'", str75.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 10);

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test453"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getID();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.getName();
    java.lang.String str13 = class7.getTeacher();
    java.lang.String str14 = class7.toString();
    administrative.Course course15 = null;
    class7.setCourse(course15);
    boolean b17 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "|"+ "'", str12.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "hi!"+ "'", str13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str14.equals("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test454"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    boolean b62 = class37.isElective();
    int i63 = class37.getMinCredits();
    administrative.Course course64 = null;
    class37.setCourse(course64);
    java.lang.String str66 = class37.listRequisites();
    administrative.Class class74 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class82 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i83 = class82.getMinCredits();
    java.lang.String str84 = class82.getName();
    java.lang.String str85 = class82.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student86 = class82.getStudents();
    boolean b87 = class74.addPreRequisite(class82);
    java.lang.String str88 = class74.getTeacher();
    boolean b89 = class37.addPreRequisite(class74);
    int i90 = class74.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "|| "+ "'", str66.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + ""+ "'", str84.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + ""+ "'", str85.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str88.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 100);

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test455"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    java.lang.String str10 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.toString();
    administrative.Class class20 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i21 = class20.getMinCredits();
    java.lang.String str22 = class20.getName();
    java.lang.String str23 = class20.getID();
    java.lang.String str24 = class20.getTeacher();
    java.lang.String str25 = class20.getName();
    java.util.ArrayList<personal.Student> arraylist_student26 = class20.getStudents();
    boolean b27 = class7.addPreRequisite(class20);
    java.lang.String str28 = class20.getID();
    java.lang.String str29 = class20.getID();
    int i30 = class20.getMinCredits();
    administrative.Class class38 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i39 = class38.getMinCredits();
    java.lang.String str40 = class38.reportIn();
    administrative.Class class48 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b49 = class38.addPreRequisite(class48);
    java.lang.String str50 = class48.listRequisites();
    administrative.Course course51 = null;
    class48.setCourse(course51);
    administrative.Class class60 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i61 = class60.getMinCredits();
    boolean b62 = class48.addPreRequisite(class60);
    boolean b63 = class60.isElective();
    java.lang.String str64 = class60.toString();
    java.lang.String str65 = class60.toString();
    boolean b66 = class60.isAvailable();
    administrative.Class class74 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student75 = class74.getStudents();
    java.lang.String str76 = class74.getID();
    java.lang.String str77 = class74.toString();
    administrative.Course course78 = null;
    class74.setCourse(course78);
    administrative.Class class80 = null;
    boolean b81 = class74.addPreRequisite(class80);
    boolean b82 = class60.addPreRequisite(class74);
    boolean b83 = class20.addPreRequisite(class74);
    java.util.ArrayList<personal.Student> arraylist_student84 = class74.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str12.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "|"+ "'", str50.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str64.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str65.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + ""+ "'", str76.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str77.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student84);

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test456"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    java.lang.String str29 = class27.reportIn();
    boolean b30 = class7.addPreRequisite(class27);
    boolean b31 = class7.isElective();
    boolean b32 = class7.isAvailable();
    boolean b33 = class7.isElective();
    java.lang.String str34 = class7.toString();
    java.lang.String str35 = class7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str34.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str35.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test457"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.getID();
    boolean b13 = class7.isAvailable();
    administrative.Course course14 = null;
    class7.setCourse(course14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test458"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n", "|| | ", (int)(short)10, true, true, 1, "");
    java.lang.String str8 = class7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nC\u00F3digo: || | \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n\nC\u00F3digo: || | \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test459"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    java.lang.String str10 = class7.getName();
    boolean b11 = class7.isElective();
    java.lang.String str12 = class7.getTeacher();
    boolean b13 = class7.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test460"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "", (int)'a', false, true, (-1), "|| ");
    java.lang.String str8 = class7.toString();
    java.lang.String str9 = class7.listRequisites();
    int i10 = class7.getMinCredits();
    boolean b11 = class7.isAvailable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"+ "'", str8.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test461"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    administrative.Class class39 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i40 = class39.getMinCredits();
    java.lang.String str41 = class39.getName();
    java.lang.String str42 = class39.getID();
    java.lang.String str43 = class39.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student44 = class39.getStudents();
    java.util.ArrayList<personal.Student> arraylist_student45 = class39.getStudents();
    boolean b46 = class29.addPreRequisite(class39);
    java.lang.String str47 = class29.getTeacher();
    int i48 = class29.getCredits();
    int i49 = class29.getCredits();
    administrative.Class class57 = new administrative.Class("hi!", "", (int)(byte)10, false, true, 32, "");
    administrative.Class class65 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str66 = class65.listRequisites();
    java.lang.String str67 = class65.getTeacher();
    administrative.Course course68 = null;
    class65.setCourse(course68);
    java.lang.String str70 = class65.reportIn();
    java.lang.String str71 = class65.listRequisites();
    boolean b72 = class57.addPreRequisite(class65);
    administrative.Class class80 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b81 = class80.isElective();
    java.lang.String str82 = class80.listRequisites();
    java.lang.String str83 = class80.reportIn();
    int i84 = class80.getCredits();
    int i85 = class80.getCredits();
    java.lang.String str86 = class80.toString();
    boolean b87 = class65.addPreRequisite(class80);
    java.lang.String str88 = class65.getTeacher();
    boolean b89 = class29.addPreRequisite(class65);
    java.lang.String str90 = class29.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + ""+ "'", str43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + ""+ "'", str47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "|"+ "'", str66.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + ""+ "'", str67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + ""+ "'", str70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "|"+ "'", str71.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "|"+ "'", str82.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + ""+ "'", str83.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str86.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + ""+ "'", str88.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "|| | "+ "'", str90.equals("|| | "));

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test462"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.listRequisites();
    java.lang.String str10 = class7.reportIn();
    int i11 = class7.getCredits();
    int i12 = class7.getCredits();
    boolean b13 = class7.isAvailable();
    java.lang.String str14 = class7.toString();
    boolean b15 = class7.isAvailable();
    int i16 = class7.getMinCredits();
    boolean b17 = class7.isAvailable();
    java.lang.String str18 = class7.getTeacher();
    java.util.ArrayList<personal.Student> arraylist_student19 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str14.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student19);

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test463"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n", (-1), false, true, 0, "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n");
    administrative.Class class15 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", "|", (int)(byte)10, false, false, (int)(byte)-1, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class23 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    administrative.Course course24 = null;
    class23.setCourse(course24);
    java.lang.String str26 = class23.getName();
    boolean b27 = class23.isAvailable();
    boolean b28 = class15.addPreRequisite(class23);
    int i29 = class23.getCredits();
    boolean b30 = class7.addPreRequisite(class23);
    boolean b31 = class23.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "|"+ "'", str26.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test464"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    boolean b62 = class37.isElective();
    int i63 = class37.getMinCredits();
    int i64 = class37.getCredits();
    java.lang.String str65 = class37.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student66 = class37.getStudents();
    int i67 = class37.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + ""+ "'", str65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test465"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    int i20 = class17.getMinCredits();
    administrative.Course course21 = null;
    class17.setCourse(course21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test466"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    boolean b12 = class7.isAvailable();
    java.lang.String str13 = class7.reportIn();
    administrative.Class class21 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i22 = class21.getMinCredits();
    java.lang.String str23 = class21.reportIn();
    administrative.Class class31 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b32 = class21.addPreRequisite(class31);
    java.lang.String str33 = class31.reportIn();
    java.lang.String str34 = class31.getID();
    boolean b35 = class31.isElective();
    boolean b36 = class31.isElective();
    java.lang.String str37 = class31.toString();
    boolean b38 = class7.addPreRequisite(class31);
    java.lang.String str39 = class7.getName();
    java.lang.String str40 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str37.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test467"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.reportIn();
    boolean b11 = class7.isAvailable();
    java.lang.String str12 = class7.getName();
    boolean b13 = class7.isElective();
    java.lang.String str14 = class7.listRequisites();
    java.util.ArrayList<personal.Student> arraylist_student15 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student15);

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test468"); }


    administrative.Class class7 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class15 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i16 = class15.getMinCredits();
    java.lang.String str17 = class15.getName();
    java.lang.String str18 = class15.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student19 = class15.getStudents();
    boolean b20 = class7.addPreRequisite(class15);
    boolean b21 = class15.isAvailable();
    boolean b22 = class15.isElective();
    administrative.Class class30 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str31 = class30.listRequisites();
    administrative.Course course32 = null;
    class30.setCourse(course32);
    int i34 = class30.getMinCredits();
    java.lang.String str35 = class30.toString();
    boolean b36 = class15.addPreRequisite(class30);
    java.util.ArrayList<personal.Student> arraylist_student37 = class15.getStudents();
    java.lang.String str38 = class15.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "|"+ "'", str31.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str35.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test469"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getID();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.getName();
    java.lang.String str13 = class7.getTeacher();
    int i14 = class7.getCredits();
    int i15 = class7.getMinCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "|"+ "'", str12.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "hi!"+ "'", str13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test470"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    java.lang.String str10 = class7.reportIn();
    administrative.Class class18 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class26 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i27 = class26.getMinCredits();
    java.lang.String str28 = class26.getName();
    java.lang.String str29 = class26.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student30 = class26.getStudents();
    boolean b31 = class18.addPreRequisite(class26);
    java.lang.String str32 = class18.getTeacher();
    boolean b33 = class7.addPreRequisite(class18);
    administrative.Course course34 = null;
    class18.setCourse(course34);
    java.lang.String str36 = class18.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str32.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"+ "'", str36.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: || \nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test471"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    administrative.Course course9 = null;
    class7.setCourse(course9);
    boolean b11 = class7.isElective();
    boolean b12 = class7.isElective();
    java.lang.String str13 = class7.getID();
    java.lang.String str14 = class7.listRequisites();
    java.lang.String str15 = class7.getName();
    java.lang.String str16 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test472"); }


    administrative.Class class7 = new administrative.Class("Nome: || | \nC\u00F3digo: \nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 0\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 10\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 52\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "|| ", (int)' ', false, false, 1, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test473"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | | \nProfessor: \nMatriculado(a)s: \n\n", "Nome: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: \nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 35\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 0\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", (int)(short)0, false, true, (int)(short)10, "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 52\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 100\nPre-requisitos: |\nProfessor: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n");

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test474"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    boolean b10 = class7.isElective();
    java.lang.String str11 = class7.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test475"); }


    administrative.Class class7 = new administrative.Class("|| Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n| ", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || | | \nProfessor: \nMatriculado(a)s: \n\n", (-1), true, false, (int)(short)-1, "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 0\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n");
    java.lang.String str8 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|| Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n| "+ "'", str8.equals("|| Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n| "));

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test476"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    int i8 = class7.getMinCredits();
    int i9 = class7.getCredits();
    java.lang.String str10 = class7.toString();
    java.util.ArrayList<personal.Student> arraylist_student11 = class7.getStudents();
    java.lang.String str12 = class7.reportIn();
    java.lang.String str13 = class7.reportIn();
    java.lang.String str14 = class7.listRequisites();
    java.lang.String str15 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str10.equals("Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!"+ "'", str15.equals("hi!"));

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test477"); }


    administrative.Class class7 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getID();
    administrative.Class class17 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    int i18 = class17.getMinCredits();
    int i19 = class17.getCredits();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str30 = class29.listRequisites();
    java.lang.String str31 = class29.getTeacher();
    administrative.Course course32 = null;
    class29.setCourse(course32);
    java.lang.String str34 = class29.reportIn();
    boolean b35 = class29.isElective();
    java.lang.String str36 = class29.getTeacher();
    boolean b37 = class17.addPreRequisite(class29);
    boolean b38 = class7.addPreRequisite(class29);
    java.util.ArrayList<personal.Student> arraylist_student39 = class29.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "|"+ "'", str30.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student39);

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test478"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.getID();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    boolean b14 = class7.isAvailable();
    java.lang.String str15 = class7.reportIn();
    personal.Student student16 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = class7.enroll(student16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test479"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    java.lang.String str29 = class27.reportIn();
    boolean b30 = class7.addPreRequisite(class27);
    administrative.Class class38 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i39 = class38.getMinCredits();
    java.lang.String str40 = class38.reportIn();
    administrative.Class class48 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b49 = class38.addPreRequisite(class48);
    administrative.Course course50 = null;
    class48.setCourse(course50);
    java.lang.String str52 = class48.getTeacher();
    int i53 = class48.getCredits();
    boolean b54 = class7.addPreRequisite(class48);
    java.lang.String str55 = class7.listRequisites();
    java.lang.String str56 = class7.getID();
    java.lang.String str57 = class7.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + ""+ "'", str52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "|| | "+ "'", str55.equals("|| | "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + ""+ "'", str56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + ""+ "'", str57.equals(""));

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test480"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n", 1, true, false, 100, "hi!");
    java.lang.String str8 = class7.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test481"); }


    administrative.Class class7 = new administrative.Class("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n", "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 97\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: || \nMatriculado(a)s: \n\n", 1, false, false, (int)(byte)100, "|| ");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str9.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test482"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.getName();
    java.lang.String str30 = class27.getID();
    java.lang.String str31 = class27.getTeacher();
    java.lang.String str32 = class27.getName();
    java.lang.String str33 = class27.reportIn();
    boolean b34 = class7.addPreRequisite(class27);
    administrative.Course course35 = null;
    class27.setCourse(course35);
    java.lang.String str37 = class27.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + ""+ "'", str30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + ""+ "'", str37.equals(""));

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test483"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.listRequisites();
    int i10 = class7.getCredits();
    java.lang.String str11 = class7.getID();
    java.lang.String str12 = class7.toString();
    boolean b13 = class7.isElective();
    java.lang.String str14 = class7.toString();
    java.util.ArrayList<personal.Student> arraylist_student15 = class7.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str12.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str14.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student15);

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test484"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str8 = class7.listRequisites();
    java.lang.String str9 = class7.getTeacher();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    int i12 = class7.getCredits();
    java.lang.String str13 = class7.getName();
    int i14 = class7.getMinCredits();
    boolean b15 = class7.isElective();
    java.lang.String str16 = class7.getID();
    java.lang.String str17 = class7.toString();
    java.lang.String str18 = class7.getName();
    int i19 = class7.getCredits();
    java.lang.String str20 = class7.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str17.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test485"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getName();
    java.lang.String str13 = class7.toString();
    int i14 = class7.getMinCredits();
    administrative.Course course15 = null;
    class7.setCourse(course15);
    boolean b17 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str13.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test486"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    java.lang.String str14 = class7.listRequisites();
    administrative.Class class22 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)100, true, false, (int)'a', "hi!");
    java.lang.String str23 = class22.toString();
    boolean b24 = class7.addPreRequisite(class22);
    java.lang.String str25 = class7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str23.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n| \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str25.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n| \nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test487"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    java.lang.String str22 = class17.listRequisites();
    boolean b23 = class17.isAvailable();
    administrative.Class class31 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n", "", (int)(short)100, true, true, (int)'a', "|");
    java.lang.String str32 = class31.reportIn();
    administrative.Class class40 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i41 = class40.getMinCredits();
    java.lang.String str42 = class40.reportIn();
    administrative.Class class50 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b51 = class40.addPreRequisite(class50);
    java.lang.String str52 = class50.reportIn();
    int i53 = class50.getMinCredits();
    boolean b54 = class31.addPreRequisite(class50);
    java.lang.String str55 = class31.getID();
    java.lang.String str56 = class31.toString();
    boolean b57 = class17.addPreRequisite(class31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "|"+ "'", str22.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n"+ "'", str32.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + ""+ "'", str52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + ""+ "'", str55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: || \nProfessor: |\nMatriculado(a)s: \n\n"+ "'", str56.equals("Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: || \nProfessor: |\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test488"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    java.lang.String str29 = class27.reportIn();
    boolean b30 = class7.addPreRequisite(class27);
    boolean b31 = class7.isElective();
    java.util.ArrayList<personal.Student> arraylist_student32 = class7.getStudents();
    boolean b33 = class7.isAvailable();
    int i34 = class7.getCredits();
    personal.Student student35 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b36 = class7.enroll(student35);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test489"); }


    administrative.Class class7 = new administrative.Class("|| ", "|", (int)(short)0, true, true, 10, "Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: \nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: |\nMatriculado(a)s: \n\n");
    int i8 = class7.getCredits();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test490"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.getName();
    java.lang.String str30 = class27.getID();
    java.lang.String str31 = class27.getTeacher();
    java.lang.String str32 = class27.getName();
    java.lang.String str33 = class27.reportIn();
    boolean b34 = class7.addPreRequisite(class27);
    boolean b35 = class7.isAvailable();
    java.lang.String str36 = class7.reportIn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + ""+ "'", str30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test491"); }


    administrative.Class class7 = new administrative.Class("", "", (int)'4', false, false, (int)(short)10, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n");
    java.util.ArrayList<personal.Student> arraylist_student8 = class7.getStudents();
    java.lang.String str9 = class7.getID();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.lang.String str18 = class17.listRequisites();
    administrative.Course course19 = null;
    class17.setCourse(course19);
    boolean b21 = class17.isElective();
    boolean b22 = class17.isElective();
    int i23 = class17.getCredits();
    administrative.Class class31 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class39 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i40 = class39.getMinCredits();
    java.lang.String str41 = class39.getName();
    java.lang.String str42 = class39.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student43 = class39.getStudents();
    boolean b44 = class31.addPreRequisite(class39);
    java.lang.String str45 = class31.listRequisites();
    boolean b46 = class17.addPreRequisite(class31);
    boolean b47 = class7.addPreRequisite(class17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "|"+ "'", str18.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "|| "+ "'", str45.equals("|| "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test492"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    boolean b9 = class7.isAvailable();
    administrative.Course course10 = null;
    class7.setCourse(course10);
    java.lang.String str12 = class7.getID();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    boolean b14 = class7.isAvailable();
    java.lang.String str15 = class7.listRequisites();
    boolean b16 = class7.isAvailable();
    personal.Student student17 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b18 = class7.enroll(student17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "|"+ "'", str15.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test493"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i18 = class17.getMinCredits();
    java.lang.String str19 = class17.reportIn();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b28 = class17.addPreRequisite(class27);
    java.lang.String str29 = class27.reportIn();
    boolean b30 = class7.addPreRequisite(class27);
    boolean b31 = class7.isElective();
    int i32 = class7.getCredits();
    java.lang.String str33 = class7.getName();
    administrative.Class class41 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)'4', true, true, (int)(byte)100, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n");
    administrative.Class class49 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i50 = class49.getMinCredits();
    java.lang.String str51 = class49.getName();
    java.lang.String str52 = class49.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student53 = class49.getStudents();
    boolean b54 = class41.addPreRequisite(class49);
    boolean b55 = class7.addPreRequisite(class41);
    java.lang.String str56 = class41.getTeacher();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + ""+ "'", str33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + ""+ "'", str51.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + ""+ "'", str52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"+ "'", str56.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n"));

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test494"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    boolean b19 = class7.isAvailable();
    java.lang.String str20 = class7.getID();
    boolean b21 = class7.isAvailable();
    int i22 = class7.getCredits();
    java.lang.String str23 = class7.getName();
    int i24 = class7.getMinCredits();
    int i25 = class7.getMinCredits();
    java.lang.String str26 = class7.getID();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test495"); }


    administrative.Class class7 = new administrative.Class("Nome: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nC\u00F3digo: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: N\u00E3o\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n", "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n", (int)(short)100, false, true, 97, "|| Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n| ");
    java.lang.String str8 = class7.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "|"+ "'", str8.equals("|"));

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test496"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Course course20 = null;
    class17.setCourse(course20);
    administrative.Class class29 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i30 = class29.getMinCredits();
    boolean b31 = class17.addPreRequisite(class29);
    boolean b32 = class29.isElective();
    java.lang.String str33 = class29.toString();
    java.lang.String str34 = class29.toString();
    boolean b35 = class29.isAvailable();
    administrative.Class class43 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    java.util.ArrayList<personal.Student> arraylist_student44 = class43.getStudents();
    java.lang.String str45 = class43.getID();
    java.lang.String str46 = class43.toString();
    administrative.Course course47 = null;
    class43.setCourse(course47);
    administrative.Class class49 = null;
    boolean b50 = class43.addPreRequisite(class49);
    boolean b51 = class29.addPreRequisite(class43);
    personal.Student student52 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b53 = class43.enroll(student52);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str33.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str34.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + ""+ "'", str45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"+ "'", str46.equals("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test497"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b8 = class7.isElective();
    java.lang.String str9 = class7.listRequisites();
    administrative.Class class17 = new administrative.Class("|", "|", (int)' ', true, false, (int)(short)-1, "hi!");
    java.lang.String str18 = class17.listRequisites();
    administrative.Class class26 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i27 = class26.getMinCredits();
    java.lang.String str28 = class26.reportIn();
    administrative.Class class36 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b37 = class26.addPreRequisite(class36);
    java.lang.String str38 = class36.reportIn();
    java.lang.String str39 = class36.getID();
    boolean b40 = class36.isElective();
    java.lang.String str41 = class36.getName();
    boolean b42 = class17.addPreRequisite(class36);
    boolean b43 = class7.addPreRequisite(class17);
    java.lang.String str44 = class17.getTeacher();
    personal.Student student45 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b46 = class17.enroll(student45);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "|"+ "'", str9.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "|"+ "'", str18.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "hi!"+ "'", str44.equals("hi!"));

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test498"); }


    administrative.Class class7 = new administrative.Class("Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |Nome: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: || \nProfessor: \nMatriculado(a)s: \n\n\nC\u00F3digo: || \nCr\u00E9ditos: 10\nEletiva: Sim\nDispon\u00EDvel: Sim\nCr\u00E9ditos necess\u00E1rios: 10\nPre-requisitos: |\nProfessor: Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n\nMatriculado(a)s: \n\n| \nProfessor: \nMatriculado(a)s: \n\n", "Nome: |\nC\u00F3digo: |\nCr\u00E9ditos: 32\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: -1\nPre-requisitos: ||| \nProfessor: hi!\nMatriculado(a)s: \n\n", 97, false, true, (int)(short)10, "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: ||| \nProfessor: \nMatriculado(a)s: \n\n");
    boolean b8 = class7.isElective();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test499"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.getName();
    java.lang.String str10 = class7.getID();
    java.lang.String str11 = class7.getTeacher();
    java.lang.String str12 = class7.getName();
    java.util.ArrayList<personal.Student> arraylist_student13 = class7.getStudents();
    java.lang.String str14 = class7.listRequisites();
    administrative.Class class22 = new administrative.Class("|", "Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n", (int)(byte)100, true, false, (int)'a', "hi!");
    java.lang.String str23 = class22.toString();
    boolean b24 = class7.addPreRequisite(class22);
    java.lang.String str25 = class22.reportIn();
    java.lang.String str26 = class22.listRequisites();
    java.lang.String str27 = class22.getName();
    java.lang.String str28 = class22.reportIn();
    java.util.ArrayList<personal.Student> arraylist_student29 = class22.getStudents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "|"+ "'", str14.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"+ "'", str23.equals("Nome: |\nC\u00F3digo: Nome: \nC\u00F3digo: \nCr\u00E9ditos: 1\nEletiva: N\u00E3o\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 1\nPre-requisitos: |\nProfessor: \nMatriculado(a)s: \n\n\nCr\u00E9ditos: 100\nEletiva: Sim\nDispon\u00EDvel: N\u00E3o\nCr\u00E9ditos necess\u00E1rios: 97\nPre-requisitos: |\nProfessor: hi!\nMatriculado(a)s: \n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "|"+ "'", str26.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "|"+ "'", str27.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student29);

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test500"); }


    administrative.Class class7 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i8 = class7.getMinCredits();
    java.lang.String str9 = class7.reportIn();
    administrative.Class class17 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b18 = class7.addPreRequisite(class17);
    java.lang.String str19 = class17.listRequisites();
    administrative.Class class27 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i28 = class27.getMinCredits();
    java.lang.String str29 = class27.reportIn();
    administrative.Class class37 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b38 = class27.addPreRequisite(class37);
    java.lang.String str39 = class37.listRequisites();
    administrative.Class class47 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    int i48 = class47.getMinCredits();
    java.lang.String str49 = class47.reportIn();
    administrative.Class class57 = new administrative.Class("", "", (int)(byte)1, false, false, (int)(short)1, "");
    boolean b58 = class47.addPreRequisite(class57);
    boolean b59 = class37.addPreRequisite(class57);
    java.lang.String str60 = class37.getTeacher();
    boolean b61 = class17.addPreRequisite(class37);
    boolean b62 = class37.isElective();
    java.util.ArrayList<personal.Student> arraylist_student63 = class37.getStudents();
    boolean b64 = class37.isElective();
    java.lang.String str65 = class37.listRequisites();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "|"+ "'", str19.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "|"+ "'", str39.equals("|"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + ""+ "'", str49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_student63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "|| "+ "'", str65.equals("|| "));

  }

}
